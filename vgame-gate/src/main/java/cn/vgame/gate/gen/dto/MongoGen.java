package cn.vgame.gate.gen.dto;import java.net.UnknownHostException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import cn.javaplus.exception.UnImplMethodException;import com.mongodb.BasicDBList;import com.mongodb.BasicDBObject;import com.mongodb.DB;import com.mongodb.DBCollection;import com.mongodb.DBCursor;import com.mongodb.DBObject;import com.mongodb.Mongo;import com.mongodb.MongoClient;public class MongoGen {	public static class Lists {		public static<T> List<T> newArrayList() {			return new ArrayList<T>();		}	}	public static interface CollectionFetcher {			DBCollection getCollection(String string);		}			public static interface MongoDbProperties {			/**		 * 数据库名		 */		String getName();				/**		 * 主机地址		 */		String getHost();				/**		 * 端口		 */		int getPort();		}	public static final class Daos {			private static CollectionFetcher	fetcher;		private static MongoDbProperties	properties;		private static Map<String, DBCollection> cache = new HashMap<String, DBCollection>();				public static final void setProperties(MongoDbProperties properties) {			Daos.properties = properties;		}				public static final CollectionFetcher getCollectionFetcher() {			if(fetcher == null)				fetcher = new NormalFetcher();			return fetcher;		}				private static  class NormalFetcher implements CollectionFetcher {			@Override			public DBCollection getCollection(String name) {								Mongo m = getMongo();				DB db = m.getDB(properties.getName());				return db.getCollection(name);			}						private static Mongo mongo;			private static Mongo getMongo() {				if(mongo == null) {					try {						mongo = new MongoClient(properties.getHost(), properties.getPort());					} catch (UnknownHostException e) {						throw cn.javaplus.util.Util.Exception.toRuntimeException(e);					}				}				return mongo;			}		}		private static DBCollection getCollection(String collectionName) {			DBCollection c;			try {				c = cache.get(collectionName);			} catch (NullPointerException e) {				c = null;			}			if (c != null) {				return c;			}			c = getCollectionFetcher().getCollection(collectionName);			cache.put(collectionName, c);			return c;		}		public static UserDao getUserDao() {			return new UserDao(getCollection("User"));		}
		}
		public static class UserDao {			private DBCollection	collection;			public UserDao(DBCollection collection) {			this.collection = collection;		}			public void save(UserDto u) {			collection.save(u.toDBObject());		}			public void delete(UserDto u) {			delete(u.getId());		}			public void delete(String id) {			collection.remove(key(id));		}			public UserDto get(String id) {			DBObject o = collection.findOne(key(id));			if(o == null) {				return null;			}			UserDto x = new UserDto();			x.fromDBObject(o);			return x;		}			private BasicDBObject key(String id) {			BasicDBObject o = new BasicDBObject();		o.put("_id", id);			return o;		}			public UserDtoCursor find() {			return new UserDtoCursor(collection.find());		}			public long getCount() {			return collection.count();		}			public UserDtoCursor findById(String id) {			collection.ensureIndex("id");			BasicDBObject o = new BasicDBObject("id", id);			return new UserDtoCursor(collection.find(o));		}
		public UserDtoCursor findByPassword(String password) {						BasicDBObject o = new BasicDBObject("password", password);			return new UserDtoCursor(collection.find(o));		}
			public void clear () {			collection.drop();		}			public UserDto createDTO() {			return new UserDto();		}			public static class UserDtoCursor implements Iterator<UserDto>, Iterable<UserDto>{				private DBCursor	cursor;				public UserDtoCursor(DBCursor cursor) {				this.cursor = cursor;			}				public boolean hasNext() {				return cursor.hasNext();			}				public UserDto next() {				DBObject next = cursor.next();				UserDto dto = new UserDto();				dto.fromDBObject(next);				return dto;			}				public int getCount() {				return cursor.count();			}				public void remove() {				throw new UnImplMethodException();			}				public Iterator<UserDto> iterator() {				return this;			}		}	}
		public static class UserDto {		private String id = "";
		private String password = "";
		public String getId() {			return this.id;		}
		public String getPassword() {			return this.password;		}
		public void setId(String id) {			this.id = id;		}
		public void setPassword(String password) {			this.password = password;		}
		DBObject toDBObject() {			BasicDBObject o = new BasicDBObject();		checkNull(id);
		checkNull(password);
		o.put("_id", id);
			o.put("id", id);
			o.put("password", password);
			return o;		}		void fromDBObject(DBObject o) {		id = getString(o, "id");
		password = getString(o, "password");
		}			BasicDBList getBasicDBList(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return new BasicDBList();			}			return (BasicDBList) obj;		}			boolean getBoolean(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return false;			}			return (Boolean) obj;		}				int getInteger(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return 0;			}			return (Integer) obj;		}				byte[] getBytes(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return null;			}			return (byte[]) obj;		}					float getFloat(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return 0;			}			return (Float) obj;		}				String getString(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return "";			}			return (String) obj;		}			long getLong(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return 0;			}			return (Long) obj;		}				double getDouble(DBObject o, String k) {			Object obj = o.get(k);			if(obj == null) {				return 0;			}			return (Double) obj;		}			private void checkNull(Object o) {			if(o == null) {				throw new RuntimeException("属性不能为null!");			}		}			@Override		public String toString() {			return toDBObject().toString();		}	}
}