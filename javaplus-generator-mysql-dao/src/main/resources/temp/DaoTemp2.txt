package PACKAGE_NAME.dao.impl;

//该类自动生成, 禁止手动修改
//这一版本的Dao, 带写缓存

import com.google.common.collect.Maps;
import com.google.common.collect.Lists;
import java.util.Map;
import java.sql.Date;
import java.util.List;
import com.lemon.commons.database.ConnectionFetcher;
import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;
import db.domain.*;
import cn.javaplus.exception.SQLRuntimeException;
import org.apache.log4j.Logger;
import cn.javaplus.util.Util;

import cn.javaplus.cache.Cache;
import cn.javaplus.cache.CacheImpl;

//该文件自动生成, 禁止手动修改!
public class CLASS_NAMEDao2 implements CLASS_NAMEDao {

	private CLASS_NAMEDao1 dao;
	
	private static Cache<String, CLASS_NAME> cache = new CacheImpl<String, CLASS_NAME>();

	CLASS_NAMEDao2(ConnectionFetcher fetcher) {
		dao = new CLASS_NAMEDao1(fetcher);
	}

	void commitAllSafety() {
	
		List<CLASS_NAME> values;
		
		synchronized (cache) {
			values = Lists.newArrayList(cache.values());
			cache.clear();
		}
		
		if(values.isEmpty()) {
			return;
		}
		
		try {
			long time = System.currentTimeMillis();
			dao.save(values);
			if(!values.isEmpty()) {
//				Logger.getLogger(CLASS_NAMEDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 CLASS_NAME 数据量: " + values.size() + " [CLASS_NAMEDao2] [time = " + (System.currentTimeMillis() - time) + "]");
			}
		
		} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {
			save(values);
			Logger.getLogger(CLASS_NAMEDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 CLASS_NAME 失败, 重新写入缓存, 数据量: " + values.size() + " [CLASS_NAMEDao2]");
			Logger.getLogger(CLASS_NAMEDao2.class).error(e.getClass().getName() + ":" + e.getMessage());
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	private String key(Object... keys) {
		return Util.Collection.linkWith(",", keys);
	}

	public void delete(PK_PARAMETER) {
		cache.remove(key(KEYNAMES_LINK_BY_COMMA));
		dao.delete(KEYNAMES_LINK_BY_COMMA);
	}
	
	public void delete(List<CLASS_NAME> CLASS_PARAMETERs) {
		for (CLASS_NAME CLASS_PARAMETER : CLASS_PARAMETERs) {
			cache.remove(key(KS_GETTER));
		}
		dao.delete(CLASS_PARAMETERs);
	}
	
	public void save(CLASS_NAME CLASS_PARAMETER) {
		cache.put(key(KS_GETTER), /*new CLASS_NAMEImpl( */CLASS_PARAMETER/*)*/);
	}
	
	public CLASS_NAME get(PK_PARAMETER) {
		CLASS_NAME CLASS_PARAMETER = cache.get(key(KEYNAMES_LINK_BY_COMMA));
		if(CLASS_PARAMETER == null) {
			CLASS_PARAMETER = dao.get(KEYNAMES_LINK_BY_COMMA);
		}
		return CLASS_PARAMETER;
	}

	public int getCount() {
		return dao.getCount() + cache.size();
 	}
	
	public void clear() {
		cache.clear();
		dao.clear();
	}
	
/*
	@Deprecated 
	public List<CLASS_NAME> findBy(String field, String o) {
		return dao.findBy(field, o);
	}
*/
	@Deprecated
	public List<CLASS_NAME> findBy(String field, String o, int limit) {
		return dao.findBy(field, o, limit);
	}

	public CLASS_NAME createDTO() {
		return new CLASS_NAMEImpl();
	}
	
	@Deprecated
	public List<CLASS_NAME> findBy(String field, String symbol, String o, int limit) {
		return dao.findBy(field, symbol, o, limit);
	}

	@Deprecated
	public List<CLASS_NAME> findWhere(String where) {
		return dao.findWhere(where);
	}
	
	@Deprecated
	public List<CLASS_NAME> findByScope(String field, int min, int max, int limit) {
		return dao.findByScope(field, min, max, limit);
	}

	public void add(CLASS_NAME CLASS_PARAMETER) {
		save(CLASS_PARAMETER);
	}
	
	public void addAll(List<CLASS_NAME> CLASS_PARAMETERs) {
		save(CLASS_PARAMETERs);
	}

	public void update(CLASS_NAME CLASS_PARAMETER) {
		save(CLASS_PARAMETER);
	}
	
	public void update(List<CLASS_NAME> CLASS_PARAMETERs) {
		save(CLASS_PARAMETERs);
	}
	
	public void delete(CLASS_NAME CLASS_PARAMETER) {
		delete(KS_GETTER);
	}

	public List<CLASS_NAME> getAll() {
		List<CLASS_NAME> all = Lists.newArrayList(cache.values());
		all.addAll(dao.getAll());
		return all;
	}

	public void save(List<CLASS_NAME> CLASS_PARAMETERs) {
		for (CLASS_NAME CLASS_PARAMETER : CLASS_PARAMETERs) {
			save(CLASS_PARAMETER);
		}
	}
	
	@Deprecated
	public void update(String fieldName, Object value) {
		dao.update(fieldName, value);
	}
	
DAO2_FINDERS
	
	private boolean equals(Object o1, Object o2) {
		return o1.equals(o2);
	}
}









































/*

CLASS_$PARAMETERs
CLASS_PARAMETERs
---------------

CLASS_$NAME
CLASS_NAME
---------------

KS_$GETTER
KS_GETTER
---------------

PACKAGE_$NAME
PACKAGE_NAME
---------------

COLUMN_$NAMES
COLUMN_NAMES
---------------

COLUMN_$?S
COLUMN_?S
---------------

PS_$SETS_$ADD
PS_SETS_ADD
---------------

PK_$PARAMETER
PK_PARAMETER
---------------

PKCOLUMNS_$S
PKCOLUMNS_S
---------------

PK_$PS_$SETS
PK_PS_SETS
---------------

COLUMN_$PARAMETERS
COLUMN_PARAMETERS
---------------

PS_$SETS_$UPDATE
PS_SETS_UPDATE
---------------

TABLE_$NAME
TABLE_NAME
---------------

PK_$COLUMNS
PK_COLUMNS
---------------

DELETE_$SETS
DELETE_SETS
---------------

CLASS_$PARAMETER
CLASS_PARAMETER
---------------

RS_$GETS
RS_GETS

---------------

PAGE_$SETS
PAGE_SETS
---------------

TA$IL
TAIL
---------------

KE$YS
KEYS
---------------

KEY_$COLUMN_$NAME
KEY_COLUMN_NAME
---------------

CACHE_$DEFINE
CACHE_DEFINE
---------------

KEYS_$GETTERS
KEYS_GETTERS
---------------

KEY$NAMES_LINK_BY_COMMA
KEYNAMES_LINK_BY_COMMA
---------------

KEY_$TYPE_1
KEY_TYPE_1
---------------

KEY_$TYPE_2
KEY_TYPE_2
---------------

FIN&DERS
FINDERS

--------------
UPPER_$FNAME
UPPER_FNAME

--------------
FILED_&NAME_IN_TABLE
FILED_NAME_IN_TABLE

--------------
PACKAGE_$FTYPE
PACKAGE_FTYPE

--------------
UPPER_$FTYPE
UPPER_FTYPE

--------------
INTERFAC_$FINDS
INTERFAC_FINDS


--------------
DAO2_$FINDERS
DAO2_FINDERS


*/