package mongo.gen;import com.mongodb.BasicDBObject;import com.mongodb.DBCollection;import com.mongodb.DBCursor;import com.mongodb.DBObject;import java.util.Iterator;import cn.javaplus.exception.UnImplMethodException;public class LogDao {	private DBCollection	collection;	public LogDao(DBCollection collection) {		this.collection = collection;	}	public void save(LogDto u) {		collection.save(u.toDBObject());	}	public void delete(LogDto u) {		collection.remove(u.toDBObject());	}	public void delete(int ids) {		collection.remove(key(ids));	}	public LogDto get(int ids) {		DBObject o = collection.findOne(key(ids));		if(o == null) {			return null;		}		LogDto x = new LogDto();		x.fromDBObject(o);		return x;	}	private BasicDBObject key(int ids) {		BasicDBObject o = new BasicDBObject();		o.put("_id", ids);		return o;	}	public LogDtoCursor find() {		return new LogDtoCursor(collection.find());	}	public long getCount() {		return collection.count();	}	public LogDtoCursor findByIds(int ids) {		collection.ensureIndex("ids");		BasicDBObject o = new BasicDBObject("ids", ids);		return new LogDtoCursor(collection.find(o));	}
	public LogDtoCursor findByTime(long time) {				BasicDBObject o = new BasicDBObject("time", time);		return new LogDtoCursor(collection.find(o));	}
	public LogDtoCursor findByServerId(int serverId) {				BasicDBObject o = new BasicDBObject("serverId", serverId);		return new LogDtoCursor(collection.find(o));	}
	public LogDtoCursor findByLogHead(String logHead) {				BasicDBObject o = new BasicDBObject("logHead", logHead);		return new LogDtoCursor(collection.find(o));	}
	public LogDtoCursor findByLogText(String logText) {				BasicDBObject o = new BasicDBObject("logText", logText);		return new LogDtoCursor(collection.find(o));	}
	public void clear () {		collection.drop();	}	public LogDto createDTO() {		return new LogDto();	}	public static class LogDtoCursor implements Iterator<LogDto>, Iterable<LogDto>{		private DBCursor	cursor;		public LogDtoCursor(DBCursor cursor) {			this.cursor = cursor;		}		public boolean hasNext() {			return cursor.hasNext();		}		public LogDto next() {			DBObject next = cursor.next();			LogDto dto = new LogDto();			dto.fromDBObject(next);			return dto;		}		public int getCount() {			return cursor.count();		}		public void remove() {			throw new UnImplMethodException();		}		public Iterator<LogDto> iterator() {			return this;		}	}}