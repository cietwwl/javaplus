TempletName:MONGO_GEN
package PACKAGE_NAME;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cn.javaplus.exception.UnImplMethodException;

import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.MongoClient;
import java.util.regex.Pattern;

public class MongoGen {
	public static class Lists {
		public static<T> List<T> newArrayList() {
			return new ArrayList<T>();
		}
	}
	public static class Maps {
		public static<K, V> Map<K, V> newHashMap() {
			return new HashMap<K, V>();
		}
		public static<V> MongoMap<V> newMongoMap() {
			return new MongoMapImpl<V>();
		}
	}
	
	
	public static interface MongoMap<V> {
		V get(String k);
		void put(String k, V v);
		Set<String> keySet();
		Collection<V> values();
	}
	
	public static class MongoMapImpl<V> implements MongoMap<V> {

		Map<String, V> map = Maps.newHashMap();
		
		@Override
		public V get(String k) {
			return map.get(k);
		}

		@Override
		public void put(String k, V v) {
			map.put(k, v);
		}

		@Override
		public Set<String> keySet() {
			return map.keySet();
		}

		@Override
		public Collection<V> values() {
			return map.values();
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	static BasicDBObject toObjectBytes(MongoMap<byte[]> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			byte[] v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectByte(MongoMap<Byte> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Byte v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectCharacter(MongoMap<Character> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Character v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectBoolean(MongoMap<Boolean> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Boolean v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectShort(MongoMap<Short> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Short v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectInteger(MongoMap<Integer> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Integer v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectLong(MongoMap<Long> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Long v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectFloat(MongoMap<Float> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Float v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectDouble(MongoMap<Double> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			Double v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBObject toObjectString(MongoMap<String> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			String v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}

	static BasicDBList toObjectBytes(Collection<byte[]> list) {
		BasicDBList prices = new BasicDBList();
		for (byte[] o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectByte(Collection<Byte> list) {
		BasicDBList prices = new BasicDBList();
		for (Byte o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectCharacter(Collection<Character> list) {
		BasicDBList prices = new BasicDBList();
		for (Character o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectBoolean(Collection<Boolean> list) {
		BasicDBList prices = new BasicDBList();
		for (Boolean o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectShort(Collection<Short> list) {
		BasicDBList prices = new BasicDBList();
		for (Short o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectInteger(Collection<Integer> list) {
		BasicDBList prices = new BasicDBList();
		for (Integer o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectLong(Collection<Long> list) {
		BasicDBList prices = new BasicDBList();
		for (Long o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectFloat(Collection<Float> list) {
		BasicDBList prices = new BasicDBList();
		for (Float o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectDouble(Collection<Double> list) {
		BasicDBList prices = new BasicDBList();
		for (Double o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static BasicDBList toObjectString(Collection<String> list) {
		BasicDBList prices = new BasicDBList();
		for (String o : list) {
			prices.add(toObject(o));
		}
		return prices;
	}

	static byte[] toObject(byte[] value) {
		return value;
	}

	static byte toObject(byte value) {
		return value;
	}

	static char toObject(char value) {
		return value;
	}

	static boolean toObject(boolean value) {
		return value;
	}

	static short toObject(short value) {
		return value;
	}

	static int toObject(int value) {
		return value;
	}

	static long toObject(long value) {
		return value;
	}

	static float toObject(float value) {
		return value;
	}

	static double toObject(double value) {
		return value;
	}

	static String toObject(String value) {
		return value;
	}

	static DBObject toObject(MongoDto value) {
		if(value == null)
			return null;
		return value.toObject();
	}

	static <V extends MongoDto> BasicDBObject toObject(MongoMap<V> map) {
		BasicDBObject o = new BasicDBObject();
		for (String key : map.keySet()) {
			V v = map.get(key);
			o.put(key, toObject(v));
		}
		return o;
	}
	
	static <V extends MongoDto> BasicDBList toObject(List<V> ls) {
		BasicDBList o = new BasicDBList();
		for (V v : ls) {
			o.add(toObject(v));
		}
		return o;
	}

	static MongoMap<byte[]> copyBytes(MongoMap<byte[]> value) {
		MongoMap<byte[]> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, MongoGen.copy(value.get(key)));
		}
		return map;
	}

	static MongoMap<Byte> copyByte(MongoMap<Byte> value) {
		MongoMap<Byte> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<Character> copyCharacter(MongoMap<Character> value) {
		MongoMap<Character> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<Boolean> copyBoolean(MongoMap<Boolean> value) {
		MongoMap<Boolean> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<Short> copyShort(MongoMap<Short> value) {
		MongoMap<Short> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<Integer> copyInteger(MongoMap<Integer> value) {
		MongoMap<Integer> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<Long> copyLong(MongoMap<Long> value) {
		MongoMap<Long> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<Float> copyFloat(MongoMap<Float> value) {
		MongoMap<Float> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<Double> copyDouble(MongoMap<Double> value) {
		MongoMap<Double> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, value.get(key));
		}
		return map;
	}

	static MongoMap<String> copyString(MongoMap<String> value) {
		MongoMap<String> map = Maps.newMongoMap();
		for (String key : value.keySet()) {
			map.put(key, new String(value.get(key)));
		}
		return map;
	}

	static List<byte[]> copyBytes(List<byte[]> value) {
		List<byte[]> ls = Lists.newArrayList();
		for (byte[] v : value) {
			ls.add(copy(v));
		}
		return ls;
	}

	static List<Byte> copyByte(List<Byte> value) {
		List<Byte> ls = Lists.newArrayList();
		for (Byte v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<Character> copyCharacter(List<Character> value) {
		List<Character> ls = Lists.newArrayList();
		for (Character v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<Boolean> copyBoolean(List<Boolean> value) {
		List<Boolean> ls = Lists.newArrayList();
		for (Boolean v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<Short> copyShort(List<Short> value) {
		List<Short> ls = Lists.newArrayList();
		for (Short v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<Integer> copyInteger(List<Integer> value) {
		List<Integer> ls = Lists.newArrayList();
		for (Integer v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<Long> copyLong(List<Long> value) {
		List<Long> ls = Lists.newArrayList();
		for (Long v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<Float> copyFloat(List<Float> value) {
		List<Float> ls = Lists.newArrayList();
		for (Float v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<Double> copyDouble(List<Double> value) {
		List<Double> ls = Lists.newArrayList();
		for (Double v : value) {
			ls.add(v);
		}
		return ls;
	}

	static List<String> copyString(List<String> value) {
		List<String> ls = Lists.newArrayList();
		for (String v : value) {
			ls.add(new String(v));
		}
		return ls;
	}
	

	static byte[] copy(byte[] value) {
		return java.util.Arrays.copyOf(value, value.length);
	}

	static byte copy(byte value) {
		return value;
	}

	static char copy(char value) {
		return value;
	}

	static boolean copy(boolean value) {
		return value;
	}

	static short copy(short value) {
		return value;
	}

	static int copy(int value) {
		return value;
	}

	static long copy(long value) {
		return value;
	}

	static float copy(float value) {
		return value;
	}

	static double copy(double value) {
		return value;
	}

	static String copy(String value) {
		return new String(value);
	}
	
	
	
	
	
	
	
	
	
	
	
	static BasicDBList getBasicDBList(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return new BasicDBList();
		}
		return (BasicDBList) obj;
	}

	static boolean getBoolean(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return false;
		}
		return (Boolean) obj;
	}
	
	static int getInteger(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return 0;
		}
		return (Integer) obj;
	}
	
	static byte[] getBytes(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return null;
		}
		return (byte[]) obj;
	}
	

	static float getFloat(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return 0;
		}
		return (Float) obj;
	}
	
	static String getString(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return "";
		}
		return (String) obj;
	}

	static long getLong(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return 0;
		}
		return (Long) obj;
	}
	
	static double getDouble(DBObject o, String k) {
		Object obj = o.get(k);
		if(obj == null) {
			return 0;
		}
		return (Double) obj;
	}
	
	
	
REPEATED PUT_METHODS
	
REPEATED COPY_METHODS

REPEATED TO_OBJECT_METHODS



	
GEN_CLASSES
}

------------------------------------------------------------
TempletName:DAOS


	public static interface CollectionFetcher {
	
		DBCollection getCollection(String string);
		void destroy();
	}
	
	
	public static interface MongoDto {
	
		DBObject toObject();

		void fromDBObject(DBObject o);
	}
	
	
	public static interface MongoDbProperties {
	
		/**
		 * 数据库名
		 */
		String getName();
		
		/**
		 * 主机地址
		 */
		String getHost();
		
		/**
		 * 端口
		 */
		int getPort();	
	}

	public static final class Daos {
	
		private static CollectionFetcher	fetcher;
		private static MongoDbProperties	properties;
		private static Map<String, DBCollection> cache = new HashMap<String, DBCollection>();
		
		public static void destroy() {
			getCollectionFetcher().destroy();
		}
		
		public static final void setProperties(MongoDbProperties properties) {
			Daos.properties = properties;
		}
		
		public static final CollectionFetcher getCollectionFetcher() {
			if(fetcher == null)
				fetcher = new NormalFetcher();
			return fetcher;
		}
		
		private static  class NormalFetcher implements CollectionFetcher {

			@Override
			public DBCollection getCollection(String name) {
				
				Mongo m = getMongo();

				DB db = m.getDB(properties.getName());

				return db.getCollection(name);
			}
			@Override
			public void destroy() {
				if(mongo != null)
					mongo.close();
			}
			
			private static Mongo mongo;

			private static Mongo getMongo() {
				if(mongo == null) {
					try {
						if(properties == null) {
							throw new NullPointerException("请先setProperties");
						}
						mongo = new MongoClient(properties.getHost(), properties.getPort());
					} catch (UnknownHostException e) {
						throw cn.javaplus.util.Util.Exception.toRuntimeException(e);
					}
				}
				return mongo;
			}

		}

		private static DBCollection getCollection(String collectionName) {
			DBCollection c;
			try {
				c = cache.get(collectionName);
			} catch (NullPointerException e) {
				c = null;
			}
			if (c != null) {
				return c;
			}
			c = getCollectionFetcher().getCollection(collectionName);
			cache.put(collectionName, c);
			return c;
		}

REPEATED DAO_GETTER
	
	}

















--------------------------------------------

TempletName:DAO_GETTER_METHOD


		public static DAO_NAME getDAO_NAME() {
			return new DAO_NAME(getCollection(COLLECTION_NAME));
		}













--------------------------------------------

TempletName:DAO


	
	public static class CLASS_NAME IMPLEMENTS{
	
		private DBCollection	collection;
	
		public CLASS_NAME(DBCollection collection) {
			this.collection = collection;
		}
	
		public void save(DTO_CNAME u) {
			collection.save(u.toObject());
		}
	
		public void delete(DTO_CNAME u) {
			delete(KEYS_GETTERS);
		}
	
		public void delete(KEYS_DEFINE) {
			collection.remove(key(KEYS_VALUES));
		}
	
		public DTO_CNAME get(KEYS_DEFINE) {
			DBObject o = collection.findOne(key(KEYS_VALUES));
			if(o == null) {
				return null;
			}
			DTO_CNAME x = new DTO_CNAME();
			x.fromDBObject(o);
			return x;
		}
	
		private BasicDBObject key(KEYS_DEFINE) {
			BasicDBObject o = new BasicDBObject();
KEYS_PUTTS
			return o;
		}
	
		public DTO_CNAMECursor find() {
			return new DTO_CNAMECursor(collection.find());
		}
	
		public long getCount() {
			return collection.count();
		}
	
REPEATED FINDERS
	
		public void clear () {
			collection.drop();
		}
	
		public DTO_CNAME createDTO() {
			return new DTO_CNAME();
		}
	
		public static class DTO_CNAMECursor implements Iterator<DTO_CNAME>, Iterable<DTO_CNAME>{
	
			private DBCursor	cursor;
			private int pageAll;
	
			public DTO_CNAMECursor(DBCursor cursor) {
				this.cursor = cursor;
			}
	
			public boolean hasNext() {
				return cursor.hasNext();
			}
	
			public DTO_CNAME next() {
				DBObject next = cursor.next();
				DTO_CNAME dto = new DTO_CNAME();
				dto.fromDBObject(next);
				return dto;
			}
	
			public int getCount() {
				return cursor.count();
			}
	
			public void skip(int skip) {
				cursor.skip(skip);
			}
			
			public void limit(int limit) {
				cursor.limit(limit);
			}
			
			/**
			 * 分页, page从1开始 countOfEveryPage必须大于0
			 */
			public void page(int page, int countOfEveryPage) {
				if(countOfEveryPage <= 0) {
					throw new RuntimeException("countOfEveryPage must > 0");
				}
				int count = getCount();
				pageAll = count / countOfEveryPage;
				if(count % countOfEveryPage != 0) {
					pageAll ++;
				}
				
				if(page > pageAll)
					page = pageAll;
				
				if(page < 1)
					page = 1;
					
				int skip = (page - 1) * countOfEveryPage ;
				skip(skip);
				limit(countOfEveryPage);
			}
			
			public int getPageAll() {
				return pageAll;
			}
	
			public void remove() {
				throw new UnImplMethodException();
			}
	
			public Iterator<DTO_CNAME> iterator() {
				return this;
			}
		}
	}





--------------------------------------------

TempletName:DAO_FINDER


		public DTO_CNAMECursor findByUPPER_FNAME(TYPE FIELD_NAME) {
			ENSURE_INDEX
			BasicDBObject o = new BasicDBObject("FIELD_NAME", FIELD_NAME);
			return new DTO_CNAMECursor(collection.find(o));
		}




--------------------------------------------

TempletName:DAO_SCOPE_FINDER

		/**
		 * 在min和max之间, 包含min和max
		 */
		public DTO_CNAMECursor findUPPER_FNAMEBetween(TYPE min, TYPE max) {
			ENSURE_INDEX
			BasicDBObject o = new BasicDBObject();
			o.put("FIELD_NAME", new BasicDBObject("$gte", min).append("$lte", max));
			return new DTO_CNAMECursor(collection.find(o));
		}



--------------------------------------------

TempletName:DAO_FUZZY_FINDER

		/**
		 * 模糊查找
		 * 比如   pattern = *lyc*01*
		 * 匹配  alyc12370121
		 * 匹配  x123lycacbb0100 
		 */
		public DTO_CNAMECursor findByUPPER_FNAMEFuzzy(TYPE FIELD_NAME) {
			ENSURE_INDEX
			FIELD_NAME = FIELD_NAME.replaceAll("\\\\\\\\*", ".*");
			FIELD_NAME = "^" + FIELD_NAME + "$";
			BasicDBObject o = new BasicDBObject("FIELD_NAME", Pattern.compile(FIELD_NAME, Pattern.CASE_INSENSITIVE));
			return new DTO_CNAMECursor(collection.find(o));
		}











--------------------------------------------

TempletName:DTO


	
	public static class CLASS_NAME implements MongoDtoIMPLEMENTS{

REPEATED FIELDS

		public CLASS_NAME() {
		}
		
		/**
		 * Copy new one
		 */
		public CLASS_NAME(CLASS_NAME src) {
REPEATED COPY_FS
		}

REPEATED GETTER

REPEATED SETTER

		@Override
		public DBObject toObject() {
			BasicDBObject o = new BasicDBObject();

TO_DBOBJECT
			return o;
		}

		@Override
		public void fromDBObject(DBObject o) {
FROM_DBOBJECT
		}

REPEATED MAP_LOADERS

REPEATED LIST_LOADERS

COPY_MONGO_MAP_METHODS

COPY_LIST_METHODS

		@Override
		public String toString() {
			return toObject().toString();
		}
	}






--------------------------------------------

TempletName:CP_MONGO_M_METHOD

	static MongoMap<CLASS_NAME> copy(MongoMap<CLASS_NAME> map) {
		MongoMapImpl<CLASS_NAME> m = new MongoMapImpl<CLASS_NAME>();
		
		for (String key : map.keySet()) {
			CLASS_NAME v = map.get(key);
			m.put(key, MongoGen.copy(v));
		}
		return m;
	}
	
	
--------------------------------------------

TempletName:CP_LIST_METHOD

	static List<CLASS_NAME> copy(List<CLASS_NAME> list) {
		List<CLASS_NAME> ls = Lists.newArrayList();
		for (CLASS_NAME t : list) {
			ls.add(MongoGen.copy(t));
		}
		return ls;
	}



--------------------------------------------

TempletName:TO_DTO

			o.put("FIELD_NAME", MongoGen.toObjectELEMENT_TYPE(FIELD_NAME));
			
--------------------------------------------

TempletName:TO_MONGO_MAP_DTO

			o.put("FIELD_NAME", MongoGen.toObject(FIELD_NAME));
--------------------------------------------

TempletName:TO_MONGO_MAP_STRING_DTO

			o.put("FIELD_NAME", MongoGen.toObjectString(FIELD_NAME));


--------------------------------------------

TempletName:FROM_DTO

			DBObject FILED_NAME_dto = (DBObject) o.get("FILED_NAME");
			if (FILED_NAME_dto != null) {
				FILED_NAME = new TYPE();
				FILED_NAME.fromDBObject(FILED_NAME_dto);
			}
			
			
			
--------------------------------------------

TempletName:LOAD_DTO
			FIELD_NAME = loadUPPER_FNAME(o);


--------------------------------------------
TempletName:COPY_XXX
			FIELD_NAME = MongoGen.copyELEMENT_TYPE(src.FIELD_NAME);
			
--------------------------------------------
TempletName:COPY_CONLLECTION
			FIELD_NAME = ELEMENT_TYPE.copy(src.FIELD_NAME);
			
--------------------------------------------
TempletName:COPY_MTHD
						
	 static CLASS_NAME copy(CLASS_NAME value) {
		return new CLASS_NAME(value);
	 }

--------------------------------------------
TempletName:PUT_MTHD
						
	 static void put(String key, BasicDBObject o, CLASS_NAME value) {
		o.put(key, MongoGen.toObject(value));
	 }
	 
--------------------------------------------
TempletName:TOBJ_MTHD
						
	static DBObject toObject(CLASS_NAME value) {
		if(value == null) 
			return null;
		return value.toObject();
	}
	 
	static DBObject toObjectCLASS_NAME(CLASS_NAME value) {
		return value.toObject();
	}
	 
	static BasicDBList toObjectCLASS_NAME(List<CLASS_NAME> value) {
		BasicDBList o = new BasicDBList();
		for (CLASS_NAME v : value) {
			o.add(toObject(v));
		}
		return o;
	}
	 
	 

--------------------------------------------

TempletName:DTO_FIELDS
		private TYPE FIELD_NAME = DEFAULT_VALUE;


--------------------------------------------

TempletName:LIST_DTO_FIELDS
		private TYPE FIELD_NAME = Lists.newArrayList();


--------------------------------------------

TempletName:MAP_DTO_FIELDS
		private TYPE FIELD_NAME = Maps.newMongoMap();






--------------------------------------------

TempletName:DTO_GETTER


		public TYPE getUPPER_FNAME() {
			return this.FIELD_NAME;
		}






--------------------------------------------

TempletName:DTO_SETTER


		public void setUPPER_FNAME(TYPE FIELD_NAME) {
			this.FIELD_NAME = FIELD_NAME;
		}



--------------------------------------------

TempletName:LOAD_MAP

		TYPE loadUPPER_FNAME(DBObject o) {
			BasicDBObject dto = (BasicDBObject) o.get("FIELD_NAME");
			if (dto == null) {
				return null;
			}
			TYPE map = Maps.newMongoMap();
			for (String key : dto.keySet()) {
				ELEMENT_TYPE d = new ELEMENT_TYPE();
				d.fromDBObject((BasicDBObject)dto.get(key));
				map.put(key, d);
			}
			return map;
		}
		
		
		


--------------------------------------------

TempletName:LOAD_LIST

		TYPE loadUPPER_FNAME(DBObject o) {
			TYPE ls = Lists.newArrayList();
			
			BasicDBList FIELD_NAME = getBasicDBList(o, "FIELD_NAME");
			for (Object xxx : FIELD_NAME) {
				ELEMENT_TYPE tp = new ELEMENT_TYPE();
				tp.fromDBObject((DBObject) xxx);
				ls.add(tp);
			}
			return ls;
		}
		



--------------------------------------------

TempletName:LOAD_BASE_TYPE_MAP

		TYPE loadUPPER_FNAME(DBObject o) {
			BasicDBObject dto = (BasicDBObject) o.get("FIELD_NAME");
			if (dto == null) {
				return null;
			}
			TYPE map = Maps.newMongoMap();
			for (String key : dto.keySet()) {
				map.put(key, (ELEMENT_TYPE)dto.get(key));
			}
			return map;
		}
		
		
		


--------------------------------------------

TempletName:LOAD_BASE_TYPE_LIST

		TYPE loadUPPER_FNAME(DBObject o) {
			TYPE ls = Lists.newArrayList();
			
			BasicDBList FIELD_NAME = getBasicDBList(o, "FIELD_NAME");
			for (Object xxx : FIELD_NAME) {
				ls.add((ELEMENT_TYPE)xxx);
			}
			return ls;
		}
		

		
		
		
		