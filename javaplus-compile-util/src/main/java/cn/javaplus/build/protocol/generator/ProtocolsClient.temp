package cn.javaplus.crazy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

CALLBACK_IMPORTS

import com.alibaba.fastjson.JSONObject;
import com.badlogic.gdx.utils.JsonReader;
import com.badlogic.gdx.utils.JsonValue;

public class Protocols {

	private static final long TIME_OUT = 5000;
	
	public static abstract class TimeOut {
		private long startTime = System.currentTimeMillis();
		public final boolean isTimeOut() {
			return System.currentTimeMillis() - startTime >= TIME_OUT;
		}
		public abstract void timeOut();
	}
	
	private <T extends TimeOut> T checkTimeOut(T t) {
		if(t != null) {
			if(t.isTimeOut()) {
				t.timeOut();
				return null;
			} 
		}
		return t;
	}
	
	private ProtocolHandler handler;
	private MessageSender sender;

	public static interface MessageSender{
		void send(String text);
	}

	public static interface Action {
		void run(String className, String methodName, JsonValue obj);
	}
	
	public Protocols(MessageSender sender) {
		this.sender = sender;
		handler = new ProtocolHandler();
	}
	
	public void onData(String data) {
		handler.onData(data);
	}

	private TimeOutMonitor monitor;

	private void startTimeOutMonitor() {
		if(monitor == null) {
			monitor = new TimeOutMonitor();
			monitor.start();
		}
	}
	

	private class TimeOutMonitor extends Thread {
		@Override
		public void run() {
			while(true) {
				boolean isAllNull = checkTimeOut();
				if(isAllNull) {
					monitor = null;
					break;
				}
				sleep();
			}
		}

		private void sleep() {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * @return 是否全部侦听被置为空了
	 */
	private boolean checkTimeOut() {
		ArrayList<Boolean> r = new ArrayList<Boolean>();
		
CHECK_TIME_METHOD

		for (Boolean isAllNull : r) {
			if(!isAllNull) {
				return false;
			}
		}
		return true;
	}

HANDLERS

VALUE_OBJECT
PROTOCOL_CLASS
PROTOCOL_HANDLER
EVENTS
ACTIONS
CALLBACK_CLASS
}