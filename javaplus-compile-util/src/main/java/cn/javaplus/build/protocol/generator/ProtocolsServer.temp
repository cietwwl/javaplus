package cn.javaplus.crazy.protocol;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import cn.javaplus.crazy.exception.ServerException;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;


public class Protocols {

	public class ProtocolContext {

		private USER_TYPE user;
		private Channel channel;

		public ProtocolContext(Channel channel, USER_TYPE user) {
			this.channel = channel;
			this.user = user;
		}
		
		public Channel getChannel() {
			return channel;
		}
		
		public USER_TYPE getUser() {
			return user;
		}

	}

	public static interface Channel {
		void send(String data);
		int getId();
	}

	public interface ActionListener {
		 void onFinally(ProtocolContext ctx);
		 void exception(ProtocolContext ctx);
		 void after(ProtocolContext ctx);
		 void before(ProtocolContext ctx);
	}

	public Protocols() {
		actions = new HashMap<String, Action>();
		listeners = new ArrayList<ActionListener>();
PUT_ACTIONS	
	}
	
	public static interface Action {
		String excute(Request r, ProtocolContext ctx);
	}

	public Action getAction(Request r) {
		return actions.get(key(r.getClassName(), r.getMethodName()));
	}
	
ACTION_CLASSES

	private String key(String className, String methodName) {
		return className + ":" + methodName;
	}
	
	public void onData(USER_TYPE user, String data, Channel channel) {
		JSONObject object = JSON.parseObject(data);
		Request r = new Request(object);
		Action a = getAction(r);
		ProtocolContext context = new ProtocolContext(channel, user);
		String response = a.excute(r, context);
		channel.send(response);
	}
	

	public static class Request {
	
		private String className;
		private String methodName;
		private JSONObject json;
	
		public Request(JSONObject json) {
			this.json = json;
			className = json.getString("className");
			methodName = json.getString("methodName");
		}
	
		/**
		 * 子请求(方法)名
		 * @return
		 */
		public String getMethodName() {
			return methodName;
		}
	
		/**
		 * 主请求(类)名
		 * @return
		 */
		public String getClassName() {
			return className;
		}
		
		public String getString(String key) {
			return json.getString(key);
		}

		public Integer getInt(String key) {
			return json.getInteger(key);
		}

		public Boolean getBoolean(String key) {
			return json.getBoolean(key);
		}
	}
	
	
	private void onFinally(ProtocolContext ctx) {
		for (ActionListener a : listeners) {
			a.onFinally(ctx);
		}
	}

	private void exception(ProtocolContext ctx) {
		for (ActionListener a : listeners) {
			a.exception(ctx);
		}
	}

	private void after(ProtocolContext ctx) {
		for (ActionListener a : listeners) {
			a.after(ctx);
		}
	}

	private void before(ProtocolContext ctx) {
		for (ActionListener a : listeners) {
			a.before(ctx);
		}
	}
	
	private String success(Object o, Request request) {
		JSONObject json = (JSONObject) JSON.toJSON(o);
		json.put("className", request.getClassName());
		json.put("methodName", request.getMethodName());
		return json.toString();
	}
	
	private String success(Request request) {
		JSONObject json = new JSONObject();
		json.put("className", request.getClassName());
		json.put("methodName", request.getMethodName());
		return json.toString();
	}
	
	private String error(String errorMessage, Request request) {
		JSONObject json = new JSONObject();
		json.put("className", request.getClassName());
		json.put("methodName", request.getMethodName());
		json.put("error", errorMessage);
		return json.toString();
	}
	
	public void addListener(ActionListener listener) {
		listeners.add(listener);
	}
	private List<ActionListener> listeners;
	private Map<String, Action> actions;
	
MESSAGE_SENDERS
}
