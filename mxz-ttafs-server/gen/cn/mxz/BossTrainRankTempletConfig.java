//[奇遇]33[boss]培养丹奖励package cn.mxz;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.dom4j.Attribute;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;public class BossTrainRankTempletConfig {	private static Map<Integer, BossTrainRankTemplet> map;	private static List<Integer> keys;	private static List<BossTrainRankTemplet> all;	static {		load();		all = new ArrayList<BossTrainRankTemplet>();		for(Integer c : keys) {			all.add(get(c));		}	}	public static List<BossTrainRankTemplet> getAll() {		return all;	}	public static List<Integer> getKeys() {		return keys;	}	private static final String fileName = "res/properties/BossTrainRankConfig.xml";	@SuppressWarnings("unchecked")	public static void load() {		map = new HashMap<Integer, BossTrainRankTemplet>();		keys = new ArrayList<Integer>();		try {			synchronized (map) {				File inputXml = new File(fileName);				SAXReader saxReader = new SAXReader();					Document document = saxReader.read(inputXml);					Element employees = document.getRootElement();					for (Iterator<Element> i = employees.elementIterator(); i.hasNext();) {						Element e = i.next();						try {							put(e);						} catch (RuntimeException e1) {							List<Attribute> all = e.attributes();							StringBuilder sb = new StringBuilder();							for (Attribute o : all) {								sb.append("[" + o.getStringValue() + "]");							}							System.err.println("Error:" + fileName + "......" + sb);							throw e1;						}					}			}		} catch (Exception e) {			e.printStackTrace();		}		keys.addAll(map.keySet());		Collections.sort(keys);	}	private static void put(Element e) {		BossTrainRankTemplet x = new BossTrainRankTemplet();		x.setVcoin( Integer.decode( e.attributeValue("vcoin").trim() ) );		x.setTrain( Integer.decode( e.attributeValue("train").trim() ) );		x.setExplain( e.attributeValue("explain") );		map.put(x.getVcoin(), x);	}	public static BossTrainRankTemplet get(Integer x) {		synchronized (map) {			return map.get(x);		}	}	/**	 */	public static Integer getMaxKey() {		return keys.get(keys.size() - 1);	}	/**	 */	public static Integer getMinKey() {		return keys.get(0);	}	public static List<BossTrainRankTemplet> findByVcoin(int value) {		List<BossTrainRankTemplet> all = new ArrayList<BossTrainRankTemplet>();		for (BossTrainRankTemplet f : map.values()) {			if(f.getVcoin() == value) {				all.add(f);			}		}		return all;	}	public static List<BossTrainRankTemplet> findByTrain(int value) {		List<BossTrainRankTemplet> all = new ArrayList<BossTrainRankTemplet>();		for (BossTrainRankTemplet f : map.values()) {			if(f.getTrain() == value) {				all.add(f);			}		}		return all;	}	public static List<BossTrainRankTemplet> findByExplain(String value) {		List<BossTrainRankTemplet> all = new ArrayList<BossTrainRankTemplet>();		for (BossTrainRankTemplet f : map.values()) {			if(f.getExplain() == value) {				all.add(f);			}		}		return all;	}	public static int[] getArrayByVcoin() {		int[] all = new int[map.size()];		for (int i = 0; i < keys.size(); i++) {			BossTrainRankTemplet f = get(keys.get(i));			all[i] = f.getVcoin();		}		return all;	}	public static int[] getArrayByTrain() {		int[] all = new int[map.size()];		for (int i = 0; i < keys.size(); i++) {			BossTrainRankTemplet f = get(keys.get(i));			all[i] = f.getTrain();		}		return all;	}	public static String[] getArrayByExplain() {		String[] all = new String[map.size()];		for (int i = 0; i < keys.size(); i++) {			BossTrainRankTemplet f = get(keys.get(i));			all[i] = f.getExplain();		}		return all;	}	public static List<Integer> getListByVcoin() {		List<Integer> all = new ArrayList<Integer>();		for (int i = 0; i < keys.size(); i++) {			BossTrainRankTemplet f = get(keys.get(i));			all.add(f.getVcoin());		}		return all;	}	public static List<Integer> getListByTrain() {		List<Integer> all = new ArrayList<Integer>();		for (int i = 0; i < keys.size(); i++) {			BossTrainRankTemplet f = get(keys.get(i));			all.add(f.getTrain());		}		return all;	}	public static List<String> getListByExplain() {		List<String> all = new ArrayList<String>();		for (int i = 0; i < keys.size(); i++) {			BossTrainRankTemplet f = get(keys.get(i));			all.add(f.getExplain());		}		return all;	}}