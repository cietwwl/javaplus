//[奖励]新号三次元宝奖励package cn.mxz;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.dom4j.Attribute;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;public class SyceeRewardsTempletConfig {	private static Map<Integer, SyceeRewardsTemplet> map;	private static List<Integer> keys;	private static List<SyceeRewardsTemplet> all;	static {		load();		all = new ArrayList<SyceeRewardsTemplet>();		for(Integer c : keys) {			all.add(get(c));		}	}	public static List<SyceeRewardsTemplet> getAll() {		return all;	}	public static List<Integer> getKeys() {		return keys;	}	private static final String fileName = "res/properties/SyceeRewardsConfig.xml";	@SuppressWarnings("unchecked")	public static void load() {		map = new HashMap<Integer, SyceeRewardsTemplet>();		keys = new ArrayList<Integer>();		try {			synchronized (map) {				File inputXml = new File(fileName);				SAXReader saxReader = new SAXReader();					Document document = saxReader.read(inputXml);					Element employees = document.getRootElement();					for (Iterator<Element> i = employees.elementIterator(); i.hasNext();) {						Element e = i.next();						try {							put(e);						} catch (RuntimeException e1) {							List<Attribute> all = e.attributes();							StringBuilder sb = new StringBuilder();							for (Attribute o : all) {								sb.append("[" + o.getStringValue() + "]");							}							System.err.println("Error:" + fileName + "......" + sb);							throw e1;						}					}			}		} catch (Exception e) {			e.printStackTrace();		}		keys.addAll(map.keySet());		Collections.sort(keys);	}	private static void put(Element e) {		SyceeRewardsTemplet x = new SyceeRewardsTemplet();		x.setNumber( Integer.decode( e.attributeValue("number").trim() ) );		x.setAwards( e.attributeValue("awards") );		SyceeRewardsTemplet remove = map.put(x.getNumber(), x);		if(remove != null) {			throw new RuntimeException("唯一标识重复了! 不可以有重复的唯一标识");		}	}	public static SyceeRewardsTemplet get(Integer x) {		synchronized (map) {			return map.get(x);		}	}	public static Integer getMaxKey() {		return keys.get(keys.size() - 1);	}	public static Integer getMinKey() {		return keys.get(0);	}	public static List<SyceeRewardsTemplet> findByNumber(int value) {		List<SyceeRewardsTemplet> all = new ArrayList<SyceeRewardsTemplet>();		for (SyceeRewardsTemplet f : map.values()) {			if(f.getNumber() == value) {				all.add(f);			}		}		return all;	}	public static List<SyceeRewardsTemplet> findByAwards(String value) {		List<SyceeRewardsTemplet> all = new ArrayList<SyceeRewardsTemplet>();		for (SyceeRewardsTemplet f : map.values()) {			if(f.getAwards() == value) {				all.add(f);			}		}		return all;	}	public static int[] getArrayByNumber() {		int[] all = new int[map.size()];				for (int i = 0; i < keys.size(); i++) {			SyceeRewardsTemplet f = get(keys.get(i));			all[i] = f.getNumber();		}		return all;	}	public static String[] getArrayByAwards() {		String[] all = new String[map.size()];				for (int i = 0; i < keys.size(); i++) {			SyceeRewardsTemplet f = get(keys.get(i));			all[i] = f.getAwards();		}		return all;	}	public static List<Integer> getListByNumber() {		List<Integer> all = new ArrayList<Integer>();				for (int i = 0; i < keys.size(); i++) {			SyceeRewardsTemplet f = get(keys.get(i));			all.add(f.getNumber());		}		return all;	}	public static List<String> getListByAwards() {		List<String> all = new ArrayList<String>();				for (int i = 0; i < keys.size(); i++) {			SyceeRewardsTemplet f = get(keys.get(i));			all.add(f.getAwards());		}		return all;	}}