package db.dao.impl;import java.util.List;import db.domain.UserBag;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class UserBagDao3 extends UserBagDao1 {	private static Cache1<String, UserBag> cache = new Cache1Impl<String, UserBag>();	public static Cache1<String, UserBag> getCache() { return cache; }	UserBagDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(UserBag userBago) {		if(userBago == null) {			throw new NullPointerException();		}		super.add(userBago);		cache.put(userBago.getUname(), userBago);	}		public void addAll(List<UserBag> userBagos) {		for(UserBag userBago : userBagos) {			if(userBago == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(userBagos);		for(UserBag userBago : userBagos) {			cache.put(userBago.getUname(), userBago);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(UserBag userBago) {		super.delete(userBago);		cache.delete(userBago.getUname());	}	public void delete(List<UserBag> userBagos) {		for(UserBag userBago : userBagos) {			delete(userBago);		}	}	public void update(UserBag userBago) {		if(userBago == null) {			throw new NullPointerException();		}		super.update(userBago);		cache.put(userBago.getUname(), userBago);	}	public void save(UserBag userBago) {		if(userBago == null) {			throw new NullPointerException();		}		super.save(userBago);		cache.put(userBago.getUname(), userBago);	}		public void save(List<UserBag> userBagos) {		for(UserBag userBago : userBagos) {			save(userBago);		}	}	public void update(List<UserBag> userBagos) {		for(UserBag userBago : userBagos) {			update(userBago);		}	}	public UserBag get(String uname) {		UserBag ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<UserBag> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<UserBag> all = super.getAll();			for (UserBag userBago : all) {				cache.put(userBago.getUname(), userBago);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}