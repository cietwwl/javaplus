package db.dao.impl;import java.util.List;import db.domain.RechargeRecord;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class RechargeRecordDao3 extends RechargeRecordDao1 {	private static Cache1<Long, RechargeRecord> cache = new Cache1Impl<Long, RechargeRecord>();	public static Cache1<Long, RechargeRecord> getCache() { return cache; }	RechargeRecordDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(RechargeRecord rro) {		if(rro == null) {			throw new NullPointerException();		}		super.add(rro);		cache.put(rro.getIds(), rro);	}		public void addAll(List<RechargeRecord> rros) {		for(RechargeRecord rro : rros) {			if(rro == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(rros);		for(RechargeRecord rro : rros) {			cache.put(rro.getIds(), rro);		}	}		public void delete(Long ids) {		super.delete(ids);		cache.delete(ids);	}	public void delete(RechargeRecord rro) {		super.delete(rro);		cache.delete(rro.getIds());	}	public void delete(List<RechargeRecord> rros) {		for(RechargeRecord rro : rros) {			delete(rro);		}	}	public void update(RechargeRecord rro) {		if(rro == null) {			throw new NullPointerException();		}		super.update(rro);		cache.put(rro.getIds(), rro);	}	public void save(RechargeRecord rro) {		if(rro == null) {			throw new NullPointerException();		}		super.save(rro);		cache.put(rro.getIds(), rro);	}		public void save(List<RechargeRecord> rros) {		for(RechargeRecord rro : rros) {			save(rro);		}	}	public void update(List<RechargeRecord> rros) {		for(RechargeRecord rro : rros) {			update(rro);		}	}	public RechargeRecord get(Long ids) {		RechargeRecord ooo = cache.get(ids);		if(ooo == null) {			ooo = super.get(ids);			if(ooo != null) {				cache.put(ids, ooo);			}		}		return ooo;	}		public List<RechargeRecord> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<RechargeRecord> all = super.getAll();			for (RechargeRecord rro : all) {				cache.put(rro.getIds(), rro);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}