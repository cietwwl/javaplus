package db.dao.impl;import java.sql.Blob;import java.sql.Connection;import java.sql.Date;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Time;import java.util.ArrayList;import java.util.List;import cn.javaplus.exception.SQLRuntimeException;import cn.javaplus.util.Closer;import com.lemon.commons.database.ConnectionFetcher;import db.domain.ActivityScoreReward;import db.domain.ActivityScoreRewardImpl;//该文件自动生成, 禁止手动修改!public class ActivityScoreRewardDao {	private ConnectionFetcher	fetcher;	public ActivityScoreRewardDao(ConnectionFetcher fetcher) {		this.fetcher = fetcher;	}	private static boolean hasLog = db.dao.impl.DBConfig.hasLog;	public void add(ActivityScoreReward asro) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "INSERT INTO activity_score_reward (uname, scores) "					+ "VALUES (?, ?)";			ps = c.prepareStatement(sql);ps.setString(1, asro.getUname());			ps.setString(2, asro.getScores());			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public void addAll(List<ActivityScoreReward> asros) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "INSERT INTO activity_score_reward (uname, scores) "					+ "VALUES (?, ?)";			ps = c.prepareStatement(sql);			for (ActivityScoreReward asro : asros) {ps.setString(1, asro.getUname());			ps.setString(2, asro.getScores());				ps.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void delete(String uname) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM activity_score_reward WHERE uname = ?";			ps = c.prepareStatement(sql);ps.setString(1, uname);						ps.executeUpdate();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void update(ActivityScoreReward asro) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE activity_score_reward SET scores = ? WHERE uname = ?";			ps = c.prepareStatement(sql);ps.setString(1, asro.getScores());			ps.setString(2, asro.getUname());			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void update(List<ActivityScoreReward> asros) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE activity_score_reward SET scores = ? WHERE uname = ?";			ps = c.prepareStatement(sql);			for(ActivityScoreReward asro: asros) {ps.setString(1, asro.getScores());			ps.setString(2, asro.getUname());				ps.addBatch();			}			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void delete(List<ActivityScoreReward> asros) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM activity_score_reward WHERE uname = ?";			ps = c.prepareStatement(sql);			for (ActivityScoreReward asro : asros) {			ps.setString(1, asro.getUname());
				ps.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void delete(ActivityScoreReward asro) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM activity_score_reward WHERE uname = ?";			ps = c.prepareStatement(sql);			ps.setString(1, asro.getUname());
			ps.executeUpdate();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void save(ActivityScoreReward asro) {	PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "REPLACE INTO activity_score_reward (uname, scores) "					+ "VALUES (?, ?)";			ps = c.prepareStatement(sql);ps.setString(1, asro.getUname());			ps.setString(2, asro.getScores());			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void save(List<ActivityScoreReward> asros) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "REPLACE INTO activity_score_reward (uname, scores) "					+ "VALUES (?, ?)";			ps = c.prepareStatement(sql);			for (ActivityScoreReward asro : asros) {ps.setString(1, asro.getUname());			ps.setString(2, asro.getScores());				ps.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public ActivityScoreReward get(String uname) {		PreparedStatement ps = null;		ResultSet rs = null;		ActivityScoreReward asro = null;		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM activity_score_reward WHERE uname = ?";			ps = c.prepareStatement(sql);ps.setString(1, uname);						rs = ps.executeQuery();			while (rs.next()) {			asro = mapping(rs);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return asro;	}		public List<ActivityScoreReward> getAll() {		PreparedStatement ps = null;		ResultSet rs = null;		List<ActivityScoreReward> asros = new ArrayList<ActivityScoreReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM activity_score_reward";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				ActivityScoreReward asro = new ActivityScoreRewardImpl();				asro = mapping(rs);				asros.add(asro);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return asros;	}	public int getCount() {		PreparedStatement ps = null; 		ResultSet rs = null;		int count = 0;		Connection c = fetcher.getConnection(); 		try {			String sql = "SELECT COUNT(*) FROM activity_score_reward";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				count =  rs.getInt(1);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally { 			Closer.close(rs, ps, c);		} 		return count; 	}	private ActivityScoreReward mapping(ResultSet rs) throws SQLException {		ActivityScoreReward asro = new ActivityScoreRewardImpl();asro.setUname(rs.getString("uname"));		asro.setScores(rs.getString("scores"));		return asro;	}		public List<ActivityScoreReward> findBy(String field, String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ActivityScoreReward> ls = new ArrayList<ActivityScoreReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM activity_score_reward WHERE " + field + " = ?";			ps = c.prepareStatement(sql);			ps.setString(1, o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public List<ActivityScoreReward> findBy(String field, String o, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<ActivityScoreReward> ls = new ArrayList<ActivityScoreReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM activity_score_reward WHERE " + field + " = ? limit ?";			ps = c.prepareStatement(sql);			ps.setString(1, o);			ps.setInt(2, limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public ActivityScoreReward createDTO() {		return new ActivityScoreRewardImpl();	}		public void clear() {		PreparedStatement ps = null;		Connection c = fetcher.getConnection(); 		try {			String sql = "DELETE FROM activity_score_reward";			ps = c.prepareStatement(sql);			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(ps, c);		}	}	public void update(String fieldName, Object value) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE activity_score_reward SET " + fieldName + " = ?";			ps = c.prepareStatement(sql);			set(ps, value);			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public List<ActivityScoreReward> findBy(String field, String symbol, String o, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<ActivityScoreReward> ls = new ArrayList<ActivityScoreReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM activity_score_reward WHERE " + field + " " + symbol + " ? LIMIT ?";			ps = c.prepareStatement(sql);			ps.setString(1, o);			ps.setInt(2, limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public List<ActivityScoreReward> findWhere(String where){		PreparedStatement ps = null;		ResultSet rs = null;		List<ActivityScoreReward> ls = new ArrayList<ActivityScoreReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM activity_score_reward WHERE " + where + ";";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public List<ActivityScoreReward> findByScope(String field, int min, int max, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<ActivityScoreReward> ls = new ArrayList<ActivityScoreReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM activity_score_reward WHERE " + field + " >= ? AND " + field + " <= ? LIMIT ?";			ps = c.prepareStatement(sql);			ps.setInt(1, min);			ps.setInt(2, max);			ps.setInt(3, limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}	private void set(PreparedStatement ps, Object value) throws SQLException {		if (value instanceof Integer) {			ps.setInt(1, (Integer) value);		} else if (value instanceof Byte) {			ps.setByte(1, (Byte) value);		} else if (value instanceof Blob) {			ps.setBlob(1, (Blob) value);		} else if (value instanceof Short) {			ps.setShort(1, (Short) value);		} else if (value instanceof String) {			ps.setString(1, (String) value);		} else if (value instanceof Float) {			ps.setFloat(1, (Float) value);		} else if (value instanceof byte[]) {			ps.setBytes(1, (byte[]) value);		} else if (value instanceof Boolean) {			ps.setBoolean(1, (Boolean) value);		} else if (value instanceof Date) {			ps.setDate(1, (Date) value);		} else if (value instanceof Long) {			ps.setLong(1, (Long) value);		} else if (value instanceof Double) {			ps.setDouble(1, (Double) value);		} else if (value instanceof Time) {			ps.setTime(1, (Time) value);		} else {			throw new RuntimeException("无法识别的类型:" + value.getClass());		}	}}