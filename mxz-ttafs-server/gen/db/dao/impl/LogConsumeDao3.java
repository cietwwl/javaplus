package db.dao.impl;import java.util.List;import db.domain.LogConsume;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class LogConsumeDao3 extends LogConsumeDao1 {	private static Cache1<Integer, LogConsume> cache = new Cache1Impl<Integer, LogConsume>();	public static Cache1<Integer, LogConsume> getCache() { return cache; }	LogConsumeDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(LogConsume lco) {		if(lco == null) {			throw new NullPointerException();		}		super.add(lco);		cache.put(lco.getLogId(), lco);	}		public void addAll(List<LogConsume> lcos) {		for(LogConsume lco : lcos) {			if(lco == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(lcos);		for(LogConsume lco : lcos) {			cache.put(lco.getLogId(), lco);		}	}		public void delete(Integer log_id) {		super.delete(log_id);		cache.delete(log_id);	}	public void delete(LogConsume lco) {		super.delete(lco);		cache.delete(lco.getLogId());	}	public void delete(List<LogConsume> lcos) {		for(LogConsume lco : lcos) {			delete(lco);		}	}	public void update(LogConsume lco) {		if(lco == null) {			throw new NullPointerException();		}		super.update(lco);		cache.put(lco.getLogId(), lco);	}	public void save(LogConsume lco) {		if(lco == null) {			throw new NullPointerException();		}		super.save(lco);		cache.put(lco.getLogId(), lco);	}		public void save(List<LogConsume> lcos) {		for(LogConsume lco : lcos) {			save(lco);		}	}	public void update(List<LogConsume> lcos) {		for(LogConsume lco : lcos) {			update(lco);		}	}	public LogConsume get(Integer log_id) {		LogConsume ooo = cache.get(log_id);		if(ooo == null) {			ooo = super.get(log_id);			if(ooo != null) {				cache.put(log_id, ooo);			}		}		return ooo;	}		public List<LogConsume> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<LogConsume> all = super.getAll();			for (LogConsume lco : all) {				cache.put(lco.getLogId(), lco);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}