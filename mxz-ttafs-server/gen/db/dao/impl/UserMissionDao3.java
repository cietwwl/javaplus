package db.dao.impl;import java.util.List;import db.domain.UserMission;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class UserMissionDao3 extends UserMissionDao1 {	private static Cache2<Integer, String, UserMission> cache = new Cache2Impl<Integer, String, UserMission>();	public static Cache2<Integer, String, UserMission> getCache() { return cache; }	UserMissionDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(UserMission umo) {		if(umo == null) {			throw new NullPointerException();		}		super.add(umo);		cache.put(umo.getMissionId(), umo.getUname(), umo);	}		public void addAll(List<UserMission> umos) {		for(UserMission umo : umos) {			if(umo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(umos);		for(UserMission umo : umos) {			cache.put(umo.getMissionId(), umo.getUname(), umo);		}	}		public void delete(Integer mission_id, String uname) {		super.delete(mission_id, uname);		cache.delete(mission_id, uname);	}	public void delete(UserMission umo) {		super.delete(umo);		cache.delete(umo.getMissionId(),umo.getUname());	}	public void delete(List<UserMission> umos) {		for(UserMission umo : umos) {			delete(umo);		}	}	public void update(UserMission umo) {		if(umo == null) {			throw new NullPointerException();		}		super.update(umo);		cache.put(umo.getMissionId(), umo.getUname(), umo);	}	public void save(UserMission umo) {		if(umo == null) {			throw new NullPointerException();		}		super.save(umo);		cache.put(umo.getMissionId(), umo.getUname(), umo);	}		public void save(List<UserMission> umos) {		for(UserMission umo : umos) {			save(umo);		}	}	public void update(List<UserMission> umos) {		for(UserMission umo : umos) {			update(umo);		}	}	public UserMission get(Integer mission_id, String uname) {		UserMission ooo = cache.get(mission_id, uname);		if(ooo == null) {			ooo = super.get(mission_id, uname);			if(ooo != null) {				cache.put(mission_id, uname, ooo);			}		}		return ooo;	}		public List<UserMission> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<UserMission> all = super.getAll();			for (UserMission umo : all) {				cache.put(umo.getMissionId(), umo.getUname(), umo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}