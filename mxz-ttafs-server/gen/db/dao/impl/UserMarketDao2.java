package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class UserMarketDao2 implements UserMarketDao {	private UserMarketDao1 dao;		private static Cache<String, UserMarket> cache = new CacheImpl<String, UserMarket>();	UserMarketDao2(ConnectionFetcher fetcher) {		dao = new UserMarketDao1(fetcher);	}	void commitAllSafety() {			List<UserMarket> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(UserMarketDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 UserMarket 数据量: " + values.size() + " [UserMarketDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(UserMarketDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 UserMarket 失败, 重新写入缓存, 数据量: " + values.size() + " [UserMarketDao2]");			Logger.getLogger(UserMarketDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Integer trad_id) {		cache.remove(key(trad_id));		dao.delete(trad_id);	}		public void delete(List<UserMarket> umos) {		for (UserMarket umo : umos) {			cache.remove(key(umo.getTradId()));		}		dao.delete(umos);	}		public void save(UserMarket umo) {		cache.put(key(umo.getTradId()), /*new UserMarketImpl( */umo/*)*/);	}		public UserMarket get(Integer trad_id) {		UserMarket umo = cache.get(key(trad_id));		if(umo == null) {			umo = dao.get(trad_id);		}		return umo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<UserMarket> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<UserMarket> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public UserMarket createDTO() {		return new UserMarketImpl();	}		@Deprecated	public List<UserMarket> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<UserMarket> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<UserMarket> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(UserMarket umo) {		save(umo);	}		public void addAll(List<UserMarket> umos) {		save(umos);	}	public void update(UserMarket umo) {		save(umo);	}		public void update(List<UserMarket> umos) {		save(umos);	}		public void delete(UserMarket umo) {		delete(umo.getTradId());	}	public List<UserMarket> getAll() {		List<UserMarket> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<UserMarket> umos) {		for (UserMarket umo : umos) {			save(umo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<UserMarket> findByTradId(Integer o) {		List<UserMarket> all = dao.findByTradId(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTradId())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByUname(String o) {		List<UserMarket> all = dao.findByUname(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getUname())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByFighterId(Integer o) {		List<UserMarket> all = dao.findByFighterId(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getFighterId())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTypeId(Integer o) {		List<UserMarket> all = dao.findByTypeId(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTypeId())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTradNub(Integer o) {		List<UserMarket> all = dao.findByTradNub(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTradNub())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTradType(Integer o) {		List<UserMarket> all = dao.findByTradType(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTradType())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTime(Integer o) {		List<UserMarket> all = dao.findByTime(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTime())) {				all.add(umo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsumos---------------CLASS_$NAMEUserMarket---------------KS_$GETTERumo.getTradId()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMEStrad_id, uname, fighter_id, type_id, trad_nub, trad_type, time---------------COLUMN_$?S?, ?, ?, ?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(umo.getTradId());
				ss.setNext(umo.getUname());
				ss.setNext(umo.getFighterId());
				ss.setNext(umo.getTypeId());
				ss.setNext(umo.getTradNub());
				ss.setNext(umo.getTradType());
				ss.setNext(umo.getTime());
---------------PK_$PARAMETERInteger trad_id---------------PKCOLUMNS_$Strad_id = ?---------------PK_$PS_$SETS			ss.setNext(trad_id);
---------------COLUMN_$PARAMETERSuname = ?, fighter_id = ?, type_id = ?, trad_nub = ?, trad_type = ?, time = ?---------------PS_$SETS_$UPDATE			ss.setNext(umo.getUname());
			ss.setNext(umo.getFighterId());
			ss.setNext(umo.getTypeId());
			ss.setNext(umo.getTradNub());
			ss.setNext(umo.getTradType());
			ss.setNext(umo.getTime());
			ss.setNext(umo.getTradId());
---------------TABLE_$NAMEuser_market---------------PK_$COLUMNStrad_id = ?---------------DELETE_$SETS			ss.setNext(umo.getTradId());
---------------CLASS_$PARAMETERumo---------------RS_$GETS		umo.setTradId(rs.getInt("trad_id"));		
		umo.setUname(rs.getString("uname"));		
		umo.setFighterId(rs.getInt("fighter_id"));		
		umo.setTypeId(rs.getInt("type_id"));		
		umo.setTradNub(rs.getInt("trad_nub"));		
		umo.setTradType(rs.getInt("trad_type"));		
		umo.setTime(rs.getInt("time"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSInteger, ---------------KEY_$COLUMN_$NAMEtrad_id---------------CACHE_$DEFINECACHE_DEFINE---------------Integer, _$GETTERSInteger, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAtrad_id---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<UserMarket> findByTradId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE trad_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByFighterId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE fighter_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTypeId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE type_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTradNub(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE trad_nub = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTradType(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE trad_type = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<UserMarket> findByTradId(Integer o);
		public List<UserMarket> findByUname(String o);
		public List<UserMarket> findByFighterId(Integer o);
		public List<UserMarket> findByTypeId(Integer o);
		public List<UserMarket> findByTradNub(Integer o);
		public List<UserMarket> findByTradType(Integer o);
		public List<UserMarket> findByTime(Integer o);
--------------DAO2_$		public List<UserMarket> findByTradId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE trad_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByFighterId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE fighter_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTypeId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE type_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTradNub(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE trad_nub = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTradType(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE trad_type = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UserMarket> findByTime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UserMarket> ls = new ArrayList<UserMarket>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM user_market WHERE time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<UserMarket> findByTradId(Integer o) {		List<UserMarket> all = dao.findByTradId(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTradId())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByUname(String o) {		List<UserMarket> all = dao.findByUname(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getUname())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByFighterId(Integer o) {		List<UserMarket> all = dao.findByFighterId(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getFighterId())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTypeId(Integer o) {		List<UserMarket> all = dao.findByTypeId(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTypeId())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTradNub(Integer o) {		List<UserMarket> all = dao.findByTradNub(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTradNub())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTradType(Integer o) {		List<UserMarket> all = dao.findByTradType(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTradType())) {				all.add(umo);			}		}		return all;	}	
	@Override	public List<UserMarket> findByTime(Integer o) {		List<UserMarket> all = dao.findByTime(o);		for (UserMarket umo : cache.values()) {			if(equals(o, umo.getTime())) {				all.add(umo);			}		}		return all;	}	
*/