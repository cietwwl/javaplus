package db.dao.impl;import java.util.List;import db.domain.PvpExtra;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class PvpExtraDao3 extends PvpExtraDao1 {	private static Cache1<String, PvpExtra> cache = new Cache1Impl<String, PvpExtra>();	public static Cache1<String, PvpExtra> getCache() { return cache; }	PvpExtraDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(PvpExtra peo) {		if(peo == null) {			throw new NullPointerException();		}		super.add(peo);		cache.put(peo.getUname(), peo);	}		public void addAll(List<PvpExtra> peos) {		for(PvpExtra peo : peos) {			if(peo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(peos);		for(PvpExtra peo : peos) {			cache.put(peo.getUname(), peo);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(PvpExtra peo) {		super.delete(peo);		cache.delete(peo.getUname());	}	public void delete(List<PvpExtra> peos) {		for(PvpExtra peo : peos) {			delete(peo);		}	}	public void update(PvpExtra peo) {		if(peo == null) {			throw new NullPointerException();		}		super.update(peo);		cache.put(peo.getUname(), peo);	}	public void save(PvpExtra peo) {		if(peo == null) {			throw new NullPointerException();		}		super.save(peo);		cache.put(peo.getUname(), peo);	}		public void save(List<PvpExtra> peos) {		for(PvpExtra peo : peos) {			save(peo);		}	}	public void update(List<PvpExtra> peos) {		for(PvpExtra peo : peos) {			update(peo);		}	}	public PvpExtra get(String uname) {		PvpExtra ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<PvpExtra> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<PvpExtra> all = super.getAll();			for (PvpExtra peo : all) {				cache.put(peo.getUname(), peo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}