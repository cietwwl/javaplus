package db.dao.impl;import java.util.List;import db.domain.LogBossAward;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class LogBossAwardDao3 extends LogBossAwardDao1 {	private static Cache1<Integer, LogBossAward> cache = new Cache1Impl<Integer, LogBossAward>();	public static Cache1<Integer, LogBossAward> getCache() { return cache; }	LogBossAwardDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(LogBossAward lbao) {		if(lbao == null) {			throw new NullPointerException();		}		super.add(lbao);		cache.put(lbao.getLogId(), lbao);	}		public void addAll(List<LogBossAward> lbaos) {		for(LogBossAward lbao : lbaos) {			if(lbao == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(lbaos);		for(LogBossAward lbao : lbaos) {			cache.put(lbao.getLogId(), lbao);		}	}		public void delete(Integer log_id) {		super.delete(log_id);		cache.delete(log_id);	}	public void delete(LogBossAward lbao) {		super.delete(lbao);		cache.delete(lbao.getLogId());	}	public void delete(List<LogBossAward> lbaos) {		for(LogBossAward lbao : lbaos) {			delete(lbao);		}	}	public void update(LogBossAward lbao) {		if(lbao == null) {			throw new NullPointerException();		}		super.update(lbao);		cache.put(lbao.getLogId(), lbao);	}	public void save(LogBossAward lbao) {		if(lbao == null) {			throw new NullPointerException();		}		super.save(lbao);		cache.put(lbao.getLogId(), lbao);	}		public void save(List<LogBossAward> lbaos) {		for(LogBossAward lbao : lbaos) {			save(lbao);		}	}	public void update(List<LogBossAward> lbaos) {		for(LogBossAward lbao : lbaos) {			update(lbao);		}	}	public LogBossAward get(Integer log_id) {		LogBossAward ooo = cache.get(log_id);		if(ooo == null) {			ooo = super.get(log_id);			if(ooo != null) {				cache.put(log_id, ooo);			}		}		return ooo;	}		public List<LogBossAward> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<LogBossAward> all = super.getAll();			for (LogBossAward lbao : all) {				cache.put(lbao.getLogId(), lbao);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}