package db.dao.impl;import java.util.List;import db.domain.WarSituation;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class WarSituationDao3 extends WarSituationDao1 {	private static Cache1<Integer, WarSituation> cache = new Cache1Impl<Integer, WarSituation>();	public static Cache1<Integer, WarSituation> getCache() { return cache; }	WarSituationDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(WarSituation wso) {		if(wso == null) {			throw new NullPointerException();		}		super.add(wso);		cache.put(wso.getSituationId(), wso);	}		public void addAll(List<WarSituation> wsos) {		for(WarSituation wso : wsos) {			if(wso == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(wsos);		for(WarSituation wso : wsos) {			cache.put(wso.getSituationId(), wso);		}	}		public void delete(Integer situation_id) {		super.delete(situation_id);		cache.delete(situation_id);	}	public void delete(WarSituation wso) {		super.delete(wso);		cache.delete(wso.getSituationId());	}	public void delete(List<WarSituation> wsos) {		for(WarSituation wso : wsos) {			delete(wso);		}	}	public void update(WarSituation wso) {		if(wso == null) {			throw new NullPointerException();		}		super.update(wso);		cache.put(wso.getSituationId(), wso);	}	public void save(WarSituation wso) {		if(wso == null) {			throw new NullPointerException();		}		super.save(wso);		cache.put(wso.getSituationId(), wso);	}		public void save(List<WarSituation> wsos) {		for(WarSituation wso : wsos) {			save(wso);		}	}	public void update(List<WarSituation> wsos) {		for(WarSituation wso : wsos) {			update(wso);		}	}	public WarSituation get(Integer situation_id) {		WarSituation ooo = cache.get(situation_id);		if(ooo == null) {			ooo = super.get(situation_id);			if(ooo != null) {				cache.put(situation_id, ooo);			}		}		return ooo;	}		public List<WarSituation> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<WarSituation> all = super.getAll();			for (WarSituation wso : all) {				cache.put(wso.getSituationId(), wso);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}