package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class ChuangZhenDao2 implements ChuangZhenDao {	private ChuangZhenDao1 dao;		private static Cache<String, ChuangZhen> cache = new CacheImpl<String, ChuangZhen>();	ChuangZhenDao2(ConnectionFetcher fetcher) {		dao = new ChuangZhenDao1(fetcher);	}	void commitAllSafety() {			List<ChuangZhen> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(ChuangZhenDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 ChuangZhen 数据量: " + values.size() + " [ChuangZhenDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(ChuangZhenDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 ChuangZhen 失败, 重新写入缓存, 数据量: " + values.size() + " [ChuangZhenDao2]");			Logger.getLogger(ChuangZhenDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(String uname) {		cache.remove(key(uname));		dao.delete(uname);	}		public void delete(List<ChuangZhen> czos) {		for (ChuangZhen czo : czos) {			cache.remove(key(czo.getUname()));		}		dao.delete(czos);	}		public void save(ChuangZhen czo) {		cache.put(key(czo.getUname()), /*new ChuangZhenImpl( */czo/*)*/);	}		public ChuangZhen get(String uname) {		ChuangZhen czo = cache.get(key(uname));		if(czo == null) {			czo = dao.get(uname);		}		return czo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<ChuangZhen> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<ChuangZhen> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public ChuangZhen createDTO() {		return new ChuangZhenImpl();	}		@Deprecated	public List<ChuangZhen> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<ChuangZhen> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<ChuangZhen> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(ChuangZhen czo) {		save(czo);	}		public void addAll(List<ChuangZhen> czos) {		save(czos);	}	public void update(ChuangZhen czo) {		save(czo);	}		public void update(List<ChuangZhen> czos) {		save(czos);	}		public void delete(ChuangZhen czo) {		delete(czo.getUname());	}	public List<ChuangZhen> getAll() {		List<ChuangZhen> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<ChuangZhen> czos) {		for (ChuangZhen czo : czos) {			save(czo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<ChuangZhen> findByUname(String o) {		List<ChuangZhen> all = dao.findByUname(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getUname())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByStar(Integer o) {		List<ChuangZhen> all = dao.findByStar(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getStar())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByStarRemain(Integer o) {		List<ChuangZhen> all = dao.findByStarRemain(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getStarRemain())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByFloor(Integer o) {		List<ChuangZhen> all = dao.findByFloor(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getFloor())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByTimes(Integer o) {		List<ChuangZhen> all = dao.findByTimes(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getTimes())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByAttack(Float o) {		List<ChuangZhen> all = dao.findByAttack(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getAttack())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByDefend(Float o) {		List<ChuangZhen> all = dao.findByDefend(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getDefend())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByMAttack(Float o) {		List<ChuangZhen> all = dao.findByMAttack(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getMAttack())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByMDefend(Float o) {		List<ChuangZhen> all = dao.findByMDefend(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getMDefend())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByHp(Float o) {		List<ChuangZhen> all = dao.findByHp(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getHp())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findBySpeed(Float o) {		List<ChuangZhen> all = dao.findBySpeed(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getSpeed())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByStarMaxToday(Integer o) {		List<ChuangZhen> all = dao.findByStarMaxToday(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getStarMaxToday())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByFloorMaxToday(Integer o) {		List<ChuangZhen> all = dao.findByFloorMaxToday(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getFloorMaxToday())) {				all.add(czo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsczos---------------CLASS_$NAMEChuangZhen---------------KS_$GETTERczo.getUname()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESuname, star, star_remain, floor, times, attack, defend, m_attack, m_defend, hp, speed, star_max_today, floor_max_today---------------COLUMN_$?S?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(czo.getUname());
				ss.setNext(czo.getStar());
				ss.setNext(czo.getStarRemain());
				ss.setNext(czo.getFloor());
				ss.setNext(czo.getTimes());
				ss.setNext(czo.getAttack());
				ss.setNext(czo.getDefend());
				ss.setNext(czo.getMAttack());
				ss.setNext(czo.getMDefend());
				ss.setNext(czo.getHp());
				ss.setNext(czo.getSpeed());
				ss.setNext(czo.getStarMaxToday());
				ss.setNext(czo.getFloorMaxToday());
---------------PK_$PARAMETERString uname---------------PKCOLUMNS_$Suname = ?---------------PK_$PS_$SETS			ss.setNext(uname);
---------------COLUMN_$PARAMETERSstar = ?, star_remain = ?, floor = ?, times = ?, attack = ?, defend = ?, m_attack = ?, m_defend = ?, hp = ?, speed = ?, star_max_today = ?, floor_max_today = ?---------------PS_$SETS_$UPDATE			ss.setNext(czo.getStar());
			ss.setNext(czo.getStarRemain());
			ss.setNext(czo.getFloor());
			ss.setNext(czo.getTimes());
			ss.setNext(czo.getAttack());
			ss.setNext(czo.getDefend());
			ss.setNext(czo.getMAttack());
			ss.setNext(czo.getMDefend());
			ss.setNext(czo.getHp());
			ss.setNext(czo.getSpeed());
			ss.setNext(czo.getStarMaxToday());
			ss.setNext(czo.getFloorMaxToday());
			ss.setNext(czo.getUname());
---------------TABLE_$NAMEchuang_zhen---------------PK_$COLUMNSuname = ?---------------DELETE_$SETS			ss.setNext(czo.getUname());
---------------CLASS_$PARAMETERczo---------------RS_$GETS		czo.setUname(rs.getString("uname"));		
		czo.setStar(rs.getInt("star"));		
		czo.setStarRemain(rs.getInt("star_remain"));		
		czo.setFloor(rs.getInt("floor"));		
		czo.setTimes(rs.getInt("times"));		
		czo.setAttack(rs.getFloat("attack"));		
		czo.setDefend(rs.getFloat("defend"));		
		czo.setMAttack(rs.getFloat("m_attack"));		
		czo.setMDefend(rs.getFloat("m_defend"));		
		czo.setHp(rs.getFloat("hp"));		
		czo.setSpeed(rs.getFloat("speed"));		
		czo.setStarMaxToday(rs.getInt("star_max_today"));		
		czo.setFloorMaxToday(rs.getInt("floor_max_today"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSString, ---------------KEY_$COLUMN_$NAMEuname---------------CACHE_$DEFINECACHE_DEFINE---------------String, _$GETTERSString, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAuname---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<ChuangZhen> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByStarRemain(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE star_remain = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByFloor(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE floor = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByTimes(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE times = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByAttack(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE attack = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByDefend(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE defend = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByMAttack(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE m_attack = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByMDefend(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE m_defend = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByHp(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE hp = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findBySpeed(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE speed = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByStarMaxToday(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE star_max_today = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByFloorMaxToday(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE floor_max_today = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<ChuangZhen> findByUname(String o);
		public List<ChuangZhen> findByStar(Integer o);
		public List<ChuangZhen> findByStarRemain(Integer o);
		public List<ChuangZhen> findByFloor(Integer o);
		public List<ChuangZhen> findByTimes(Integer o);
		public List<ChuangZhen> findByAttack(Float o);
		public List<ChuangZhen> findByDefend(Float o);
		public List<ChuangZhen> findByMAttack(Float o);
		public List<ChuangZhen> findByMDefend(Float o);
		public List<ChuangZhen> findByHp(Float o);
		public List<ChuangZhen> findBySpeed(Float o);
		public List<ChuangZhen> findByStarMaxToday(Integer o);
		public List<ChuangZhen> findByFloorMaxToday(Integer o);
--------------DAO2_$		public List<ChuangZhen> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByStarRemain(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE star_remain = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByFloor(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE floor = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByTimes(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE times = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByAttack(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE attack = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByDefend(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE defend = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByMAttack(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE m_attack = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByMDefend(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE m_defend = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByHp(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE hp = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findBySpeed(Float o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE speed = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByStarMaxToday(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE star_max_today = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<ChuangZhen> findByFloorMaxToday(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<ChuangZhen> ls = new ArrayList<ChuangZhen>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM chuang_zhen WHERE floor_max_today = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<ChuangZhen> findByUname(String o) {		List<ChuangZhen> all = dao.findByUname(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getUname())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByStar(Integer o) {		List<ChuangZhen> all = dao.findByStar(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getStar())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByStarRemain(Integer o) {		List<ChuangZhen> all = dao.findByStarRemain(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getStarRemain())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByFloor(Integer o) {		List<ChuangZhen> all = dao.findByFloor(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getFloor())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByTimes(Integer o) {		List<ChuangZhen> all = dao.findByTimes(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getTimes())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByAttack(Float o) {		List<ChuangZhen> all = dao.findByAttack(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getAttack())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByDefend(Float o) {		List<ChuangZhen> all = dao.findByDefend(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getDefend())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByMAttack(Float o) {		List<ChuangZhen> all = dao.findByMAttack(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getMAttack())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByMDefend(Float o) {		List<ChuangZhen> all = dao.findByMDefend(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getMDefend())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByHp(Float o) {		List<ChuangZhen> all = dao.findByHp(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getHp())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findBySpeed(Float o) {		List<ChuangZhen> all = dao.findBySpeed(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getSpeed())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByStarMaxToday(Integer o) {		List<ChuangZhen> all = dao.findByStarMaxToday(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getStarMaxToday())) {				all.add(czo);			}		}		return all;	}	
	@Override	public List<ChuangZhen> findByFloorMaxToday(Integer o) {		List<ChuangZhen> all = dao.findByFloorMaxToday(o);		for (ChuangZhen czo : cache.values()) {			if(equals(o, czo.getFloorMaxToday())) {				all.add(czo);			}		}		return all;	}	
*/