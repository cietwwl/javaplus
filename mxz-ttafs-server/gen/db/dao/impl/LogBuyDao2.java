package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class LogBuyDao2 implements LogBuyDao {	private LogBuyDao1 dao;		private static Cache<String, LogBuy> cache = new CacheImpl<String, LogBuy>();	LogBuyDao2(ConnectionFetcher fetcher) {		dao = new LogBuyDao1(fetcher);	}	void commitAllSafety() {			List<LogBuy> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(LogBuyDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 LogBuy 数据量: " + values.size() + " [LogBuyDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(LogBuyDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 LogBuy 失败, 重新写入缓存, 数据量: " + values.size() + " [LogBuyDao2]");			Logger.getLogger(LogBuyDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Integer log_id) {		cache.remove(key(log_id));		dao.delete(log_id);	}		public void delete(List<LogBuy> logBuyos) {		for (LogBuy logBuyo : logBuyos) {			cache.remove(key(logBuyo.getLogId()));		}		dao.delete(logBuyos);	}		public void save(LogBuy logBuyo) {		cache.put(key(logBuyo.getLogId()), /*new LogBuyImpl( */logBuyo/*)*/);	}		public LogBuy get(Integer log_id) {		LogBuy logBuyo = cache.get(key(log_id));		if(logBuyo == null) {			logBuyo = dao.get(log_id);		}		return logBuyo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<LogBuy> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<LogBuy> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public LogBuy createDTO() {		return new LogBuyImpl();	}		@Deprecated	public List<LogBuy> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<LogBuy> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<LogBuy> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(LogBuy logBuyo) {		save(logBuyo);	}		public void addAll(List<LogBuy> logBuyos) {		save(logBuyos);	}	public void update(LogBuy logBuyo) {		save(logBuyo);	}		public void update(List<LogBuy> logBuyos) {		save(logBuyos);	}		public void delete(LogBuy logBuyo) {		delete(logBuyo.getLogId());	}	public List<LogBuy> getAll() {		List<LogBuy> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<LogBuy> logBuyos) {		for (LogBuy logBuyo : logBuyos) {			save(logBuyo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<LogBuy> findByLogId(Integer o) {		List<LogBuy> all = dao.findByLogId(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getLogId())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByUname(String o) {		List<LogBuy> all = dao.findByUname(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getUname())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByNick(String o) {		List<LogBuy> all = dao.findByNick(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getNick())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByPropId(Integer o) {		List<LogBuy> all = dao.findByPropId(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getPropId())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByTime(Integer o) {		List<LogBuy> all = dao.findByTime(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getTime())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByCount(Integer o) {		List<LogBuy> all = dao.findByCount(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getCount())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByComment(String o) {		List<LogBuy> all = dao.findByComment(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getComment())) {				all.add(logBuyo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERslogBuyos---------------CLASS_$NAMELogBuy---------------KS_$GETTERlogBuyo.getLogId()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESlog_id, uname, nick, prop_id, time, count, comment---------------COLUMN_$?S?, ?, ?, ?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(logBuyo.getLogId());
				ss.setNext(logBuyo.getUname());
				ss.setNext(logBuyo.getNick());
				ss.setNext(logBuyo.getPropId());
				ss.setNext(logBuyo.getTime());
				ss.setNext(logBuyo.getCount());
				ss.setNext(logBuyo.getComment());
---------------PK_$PARAMETERInteger log_id---------------PKCOLUMNS_$Slog_id = ?---------------PK_$PS_$SETS			ss.setNext(log_id);
---------------COLUMN_$PARAMETERSuname = ?, nick = ?, prop_id = ?, time = ?, count = ?, comment = ?---------------PS_$SETS_$UPDATE			ss.setNext(logBuyo.getUname());
			ss.setNext(logBuyo.getNick());
			ss.setNext(logBuyo.getPropId());
			ss.setNext(logBuyo.getTime());
			ss.setNext(logBuyo.getCount());
			ss.setNext(logBuyo.getComment());
			ss.setNext(logBuyo.getLogId());
---------------TABLE_$NAMElog_buy---------------PK_$COLUMNSlog_id = ?---------------DELETE_$SETS			ss.setNext(logBuyo.getLogId());
---------------CLASS_$PARAMETERlogBuyo---------------RS_$GETS		logBuyo.setLogId(rs.getInt("log_id"));		
		logBuyo.setUname(rs.getString("uname"));		
		logBuyo.setNick(rs.getString("nick"));		
		logBuyo.setPropId(rs.getInt("prop_id"));		
		logBuyo.setTime(rs.getInt("time"));		
		logBuyo.setCount(rs.getInt("count"));		
		logBuyo.setComment(rs.getString("comment"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSInteger, ---------------KEY_$COLUMN_$NAMElog_id---------------CACHE_$DEFINECACHE_DEFINE---------------Integer, _$GETTERSInteger, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAlog_id---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<LogBuy> findByLogId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByNick(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE nick = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByPropId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE prop_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByTime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByCount(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE count = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByComment(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE comment = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<LogBuy> findByLogId(Integer o);
		public List<LogBuy> findByUname(String o);
		public List<LogBuy> findByNick(String o);
		public List<LogBuy> findByPropId(Integer o);
		public List<LogBuy> findByTime(Integer o);
		public List<LogBuy> findByCount(Integer o);
		public List<LogBuy> findByComment(String o);
--------------DAO2_$		public List<LogBuy> findByLogId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByNick(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE nick = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByPropId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE prop_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByTime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByCount(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE count = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogBuy> findByComment(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogBuy> ls = new ArrayList<LogBuy>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_buy WHERE comment = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<LogBuy> findByLogId(Integer o) {		List<LogBuy> all = dao.findByLogId(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getLogId())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByUname(String o) {		List<LogBuy> all = dao.findByUname(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getUname())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByNick(String o) {		List<LogBuy> all = dao.findByNick(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getNick())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByPropId(Integer o) {		List<LogBuy> all = dao.findByPropId(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getPropId())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByTime(Integer o) {		List<LogBuy> all = dao.findByTime(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getTime())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByCount(Integer o) {		List<LogBuy> all = dao.findByCount(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getCount())) {				all.add(logBuyo);			}		}		return all;	}	
	@Override	public List<LogBuy> findByComment(String o) {		List<LogBuy> all = dao.findByComment(o);		for (LogBuy logBuyo : cache.values()) {			if(equals(o, logBuyo.getComment())) {				all.add(logBuyo);			}		}		return all;	}	
*/