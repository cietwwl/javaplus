package db.dao.impl;import java.util.List;import db.domain.UserDogz;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class UserDogzDao3 extends UserDogzDao1 {	private static Cache2<Integer, String, UserDogz> cache = new Cache2Impl<Integer, String, UserDogz>();	public static Cache2<Integer, String, UserDogz> getCache() { return cache; }	UserDogzDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(UserDogz udo) {		if(udo == null) {			throw new NullPointerException();		}		super.add(udo);		cache.put(udo.getDogzId(), udo.getUname(), udo);	}		public void addAll(List<UserDogz> udos) {		for(UserDogz udo : udos) {			if(udo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(udos);		for(UserDogz udo : udos) {			cache.put(udo.getDogzId(), udo.getUname(), udo);		}	}		public void delete(Integer dogz_id, String uname) {		super.delete(dogz_id, uname);		cache.delete(dogz_id, uname);	}	public void delete(UserDogz udo) {		super.delete(udo);		cache.delete(udo.getDogzId(),udo.getUname());	}	public void delete(List<UserDogz> udos) {		for(UserDogz udo : udos) {			delete(udo);		}	}	public void update(UserDogz udo) {		if(udo == null) {			throw new NullPointerException();		}		super.update(udo);		cache.put(udo.getDogzId(), udo.getUname(), udo);	}	public void save(UserDogz udo) {		if(udo == null) {			throw new NullPointerException();		}		super.save(udo);		cache.put(udo.getDogzId(), udo.getUname(), udo);	}		public void save(List<UserDogz> udos) {		for(UserDogz udo : udos) {			save(udo);		}	}	public void update(List<UserDogz> udos) {		for(UserDogz udo : udos) {			update(udo);		}	}	public UserDogz get(Integer dogz_id, String uname) {		UserDogz ooo = cache.get(dogz_id, uname);		if(ooo == null) {			ooo = super.get(dogz_id, uname);			if(ooo != null) {				cache.put(dogz_id, uname, ooo);			}		}		return ooo;	}		public List<UserDogz> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<UserDogz> all = super.getAll();			for (UserDogz udo : all) {				cache.put(udo.getDogzId(), udo.getUname(), udo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}