package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class RechargeRecordDao2 implements RechargeRecordDao {	private RechargeRecordDao1 dao;		private static Cache<String, RechargeRecord> cache = new CacheImpl<String, RechargeRecord>();	RechargeRecordDao2(ConnectionFetcher fetcher) {		dao = new RechargeRecordDao1(fetcher);	}	void commitAllSafety() {			List<RechargeRecord> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(RechargeRecordDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 RechargeRecord 数据量: " + values.size() + " [RechargeRecordDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(RechargeRecordDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 RechargeRecord 失败, 重新写入缓存, 数据量: " + values.size() + " [RechargeRecordDao2]");			Logger.getLogger(RechargeRecordDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Long ids) {		cache.remove(key(ids));		dao.delete(ids);	}		public void delete(List<RechargeRecord> rros) {		for (RechargeRecord rro : rros) {			cache.remove(key(rro.getIds()));		}		dao.delete(rros);	}		public void save(RechargeRecord rro) {		cache.put(key(rro.getIds()), /*new RechargeRecordImpl( */rro/*)*/);	}		public RechargeRecord get(Long ids) {		RechargeRecord rro = cache.get(key(ids));		if(rro == null) {			rro = dao.get(ids);		}		return rro;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<RechargeRecord> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<RechargeRecord> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public RechargeRecord createDTO() {		return new RechargeRecordImpl();	}		@Deprecated	public List<RechargeRecord> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<RechargeRecord> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<RechargeRecord> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(RechargeRecord rro) {		save(rro);	}		public void addAll(List<RechargeRecord> rros) {		save(rros);	}	public void update(RechargeRecord rro) {		save(rro);	}		public void update(List<RechargeRecord> rros) {		save(rros);	}		public void delete(RechargeRecord rro) {		delete(rro.getIds());	}	public List<RechargeRecord> getAll() {		List<RechargeRecord> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<RechargeRecord> rros) {		for (RechargeRecord rro : rros) {			save(rro);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<RechargeRecord> findByIds(Long o) {		List<RechargeRecord> all = dao.findByIds(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getIds())) {				all.add(rro);			}		}		return all;	}	
	@Override	public List<RechargeRecord> findByUname(String o) {		List<RechargeRecord> all = dao.findByUname(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getUname())) {				all.add(rro);			}		}		return all;	}	
	@Override	public List<RechargeRecord> findByAmount(Integer o) {		List<RechargeRecord> all = dao.findByAmount(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getAmount())) {				all.add(rro);			}		}		return all;	}	
	@Override	public List<RechargeRecord> findByCreatetime(Integer o) {		List<RechargeRecord> all = dao.findByCreatetime(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getCreatetime())) {				all.add(rro);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsrros---------------CLASS_$NAMERechargeRecord---------------KS_$GETTERrro.getIds()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESids, uname, amount, createTime---------------COLUMN_$?S?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(rro.getIds());
				ss.setNext(rro.getUname());
				ss.setNext(rro.getAmount());
				ss.setNext(rro.getCreatetime());
---------------PK_$PARAMETERLong ids---------------PKCOLUMNS_$Sids = ?---------------PK_$PS_$SETS			ss.setNext(ids);
---------------COLUMN_$PARAMETERSuname = ?, amount = ?, createTime = ?---------------PS_$SETS_$UPDATE			ss.setNext(rro.getUname());
			ss.setNext(rro.getAmount());
			ss.setNext(rro.getCreatetime());
			ss.setNext(rro.getIds());
---------------TABLE_$NAMErecharge_record---------------PK_$COLUMNSids = ?---------------DELETE_$SETS			ss.setNext(rro.getIds());
---------------CLASS_$PARAMETERrro---------------RS_$GETS		rro.setIds(rs.getLong("ids"));		
		rro.setUname(rs.getString("uname"));		
		rro.setAmount(rs.getInt("amount"));		
		rro.setCreatetime(rs.getInt("createTime"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSLong, ---------------KEY_$COLUMN_$NAMEids---------------CACHE_$DEFINECACHE_DEFINE---------------Long, _$GETTERSLong, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAids---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<RechargeRecord> findByIds(Long o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE ids = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<RechargeRecord> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<RechargeRecord> findByAmount(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE amount = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<RechargeRecord> findByCreatetime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE createTime = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<RechargeRecord> findByIds(Long o);
		public List<RechargeRecord> findByUname(String o);
		public List<RechargeRecord> findByAmount(Integer o);
		public List<RechargeRecord> findByCreatetime(Integer o);
--------------DAO2_$		public List<RechargeRecord> findByIds(Long o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE ids = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<RechargeRecord> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<RechargeRecord> findByAmount(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE amount = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<RechargeRecord> findByCreatetime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<RechargeRecord> ls = new ArrayList<RechargeRecord>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM recharge_record WHERE createTime = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<RechargeRecord> findByIds(Long o) {		List<RechargeRecord> all = dao.findByIds(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getIds())) {				all.add(rro);			}		}		return all;	}	
	@Override	public List<RechargeRecord> findByUname(String o) {		List<RechargeRecord> all = dao.findByUname(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getUname())) {				all.add(rro);			}		}		return all;	}	
	@Override	public List<RechargeRecord> findByAmount(Integer o) {		List<RechargeRecord> all = dao.findByAmount(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getAmount())) {				all.add(rro);			}		}		return all;	}	
	@Override	public List<RechargeRecord> findByCreatetime(Integer o) {		List<RechargeRecord> all = dao.findByCreatetime(o);		for (RechargeRecord rro : cache.values()) {			if(equals(o, rro.getCreatetime())) {				all.add(rro);			}		}		return all;	}	
*/