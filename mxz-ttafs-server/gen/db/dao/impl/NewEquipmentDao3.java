package db.dao.impl;import java.util.List;import db.domain.NewEquipment;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class NewEquipmentDao3 extends NewEquipmentDao1 {	private static Cache2<Integer, String, NewEquipment> cache = new Cache2Impl<Integer, String, NewEquipment>();	public static Cache2<Integer, String, NewEquipment> getCache() { return cache; }	NewEquipmentDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(NewEquipment neo) {		if(neo == null) {			throw new NullPointerException();		}		super.add(neo);		cache.put(neo.getEquipmentId(), neo.getUname(), neo);	}		public void addAll(List<NewEquipment> neos) {		for(NewEquipment neo : neos) {			if(neo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(neos);		for(NewEquipment neo : neos) {			cache.put(neo.getEquipmentId(), neo.getUname(), neo);		}	}		public void delete(Integer equipment_id, String uname) {		super.delete(equipment_id, uname);		cache.delete(equipment_id, uname);	}	public void delete(NewEquipment neo) {		super.delete(neo);		cache.delete(neo.getEquipmentId(),neo.getUname());	}	public void delete(List<NewEquipment> neos) {		for(NewEquipment neo : neos) {			delete(neo);		}	}	public void update(NewEquipment neo) {		if(neo == null) {			throw new NullPointerException();		}		super.update(neo);		cache.put(neo.getEquipmentId(), neo.getUname(), neo);	}	public void save(NewEquipment neo) {		if(neo == null) {			throw new NullPointerException();		}		super.save(neo);		cache.put(neo.getEquipmentId(), neo.getUname(), neo);	}		public void save(List<NewEquipment> neos) {		for(NewEquipment neo : neos) {			save(neo);		}	}	public void update(List<NewEquipment> neos) {		for(NewEquipment neo : neos) {			update(neo);		}	}	public NewEquipment get(Integer equipment_id, String uname) {		NewEquipment ooo = cache.get(equipment_id, uname);		if(ooo == null) {			ooo = super.get(equipment_id, uname);			if(ooo != null) {				cache.put(equipment_id, uname, ooo);			}		}		return ooo;	}		public List<NewEquipment> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<NewEquipment> all = super.getAll();			for (NewEquipment neo : all) {				cache.put(neo.getEquipmentId(), neo.getUname(), neo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}