package db.dao.impl;import java.util.List;import db.domain.Tactical;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class TacticalDao3 extends TacticalDao1 {	private static Cache2<Integer, String, Tactical> cache = new Cache2Impl<Integer, String, Tactical>();	public static Cache2<Integer, String, Tactical> getCache() { return cache; }	TacticalDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(Tactical to) {		if(to == null) {			throw new NullPointerException();		}		super.add(to);		cache.put(to.getIds(), to.getUname(), to);	}		public void addAll(List<Tactical> tos) {		for(Tactical to : tos) {			if(to == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(tos);		for(Tactical to : tos) {			cache.put(to.getIds(), to.getUname(), to);		}	}		public void delete(Integer ids, String uname) {		super.delete(ids, uname);		cache.delete(ids, uname);	}	public void delete(Tactical to) {		super.delete(to);		cache.delete(to.getIds(),to.getUname());	}	public void delete(List<Tactical> tos) {		for(Tactical to : tos) {			delete(to);		}	}	public void update(Tactical to) {		if(to == null) {			throw new NullPointerException();		}		super.update(to);		cache.put(to.getIds(), to.getUname(), to);	}	public void save(Tactical to) {		if(to == null) {			throw new NullPointerException();		}		super.save(to);		cache.put(to.getIds(), to.getUname(), to);	}		public void save(List<Tactical> tos) {		for(Tactical to : tos) {			save(to);		}	}	public void update(List<Tactical> tos) {		for(Tactical to : tos) {			update(to);		}	}	public Tactical get(Integer ids, String uname) {		Tactical ooo = cache.get(ids, uname);		if(ooo == null) {			ooo = super.get(ids, uname);			if(ooo != null) {				cache.put(ids, uname, ooo);			}		}		return ooo;	}		public List<Tactical> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<Tactical> all = super.getAll();			for (Tactical to : all) {				cache.put(to.getIds(), to.getUname(), to);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}