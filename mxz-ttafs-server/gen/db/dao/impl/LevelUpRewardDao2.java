package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class LevelUpRewardDao2 implements LevelUpRewardDao {	private LevelUpRewardDao1 dao;		private static Cache<String, LevelUpReward> cache = new CacheImpl<String, LevelUpReward>();	LevelUpRewardDao2(ConnectionFetcher fetcher) {		dao = new LevelUpRewardDao1(fetcher);	}	void commitAllSafety() {			List<LevelUpReward> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(LevelUpRewardDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 LevelUpReward 数据量: " + values.size() + " [LevelUpRewardDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(LevelUpRewardDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 LevelUpReward 失败, 重新写入缓存, 数据量: " + values.size() + " [LevelUpRewardDao2]");			Logger.getLogger(LevelUpRewardDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Integer level, String uname) {		cache.remove(key(level, uname));		dao.delete(level, uname);	}		public void delete(List<LevelUpReward> luros) {		for (LevelUpReward luro : luros) {			cache.remove(key(luro.getLevel(),luro.getUname()));		}		dao.delete(luros);	}		public void save(LevelUpReward luro) {		cache.put(key(luro.getLevel(),luro.getUname()), /*new LevelUpRewardImpl( */luro/*)*/);	}		public LevelUpReward get(Integer level, String uname) {		LevelUpReward luro = cache.get(key(level, uname));		if(luro == null) {			luro = dao.get(level, uname);		}		return luro;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<LevelUpReward> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<LevelUpReward> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public LevelUpReward createDTO() {		return new LevelUpRewardImpl();	}		@Deprecated	public List<LevelUpReward> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<LevelUpReward> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<LevelUpReward> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(LevelUpReward luro) {		save(luro);	}		public void addAll(List<LevelUpReward> luros) {		save(luros);	}	public void update(LevelUpReward luro) {		save(luro);	}		public void update(List<LevelUpReward> luros) {		save(luros);	}		public void delete(LevelUpReward luro) {		delete(luro.getLevel(),luro.getUname());	}	public List<LevelUpReward> getAll() {		List<LevelUpReward> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<LevelUpReward> luros) {		for (LevelUpReward luro : luros) {			save(luro);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<LevelUpReward> findByUname(String o) {		List<LevelUpReward> all = dao.findByUname(o);		for (LevelUpReward luro : cache.values()) {			if(equals(o, luro.getUname())) {				all.add(luro);			}		}		return all;	}	
	@Override	public List<LevelUpReward> findByLevel(Integer o) {		List<LevelUpReward> all = dao.findByLevel(o);		for (LevelUpReward luro : cache.values()) {			if(equals(o, luro.getLevel())) {				all.add(luro);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsluros---------------CLASS_$NAMELevelUpReward---------------KS_$GETTERluro.getLevel(),luro.getUname()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESuname, level---------------COLUMN_$?S?, ?---------------PS_$SETS_$ADD				ss.setNext(luro.getUname());
				ss.setNext(luro.getLevel());
---------------PK_$PARAMETERInteger level, String uname---------------PKCOLUMNS_$Slevel = ? AND uname = ?---------------PK_$PS_$SETS			ss.setNext(level);
			ss.setNext(uname);
---------------COLUMN_$PARAMETERS---------------PS_$SETS_$UPDATE			ss.setNext(luro.getLevel());
			ss.setNext(luro.getUname());
---------------TABLE_$NAMElevel_up_reward---------------PK_$COLUMNSlevel = ? AND uname = ?---------------DELETE_$SETS			ss.setNext(luro.getLevel());
			ss.setNext(luro.getUname());
---------------CLASS_$PARAMETERluro---------------RS_$GETS		luro.setUname(rs.getString("uname"));		
		luro.setLevel(rs.getInt("level"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL2---------------KE$YSInteger, String, ---------------KEY_$COLUMN_$NAMElevel---------------CACHE_$DEFINECACHE_DEFINE---------------Integer, String, _$GETTERSInteger, String, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAlevel, uname---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<LevelUpReward> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LevelUpReward> ls = new ArrayList<LevelUpReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM level_up_reward WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LevelUpReward> findByLevel(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LevelUpReward> ls = new ArrayList<LevelUpReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM level_up_reward WHERE level = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<LevelUpReward> findByUname(String o);
		public List<LevelUpReward> findByLevel(Integer o);
--------------DAO2_$		public List<LevelUpReward> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LevelUpReward> ls = new ArrayList<LevelUpReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM level_up_reward WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LevelUpReward> findByLevel(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LevelUpReward> ls = new ArrayList<LevelUpReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM level_up_reward WHERE level = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<LevelUpReward> findByUname(String o) {		List<LevelUpReward> all = dao.findByUname(o);		for (LevelUpReward luro : cache.values()) {			if(equals(o, luro.getUname())) {				all.add(luro);			}		}		return all;	}	
	@Override	public List<LevelUpReward> findByLevel(Integer o) {		List<LevelUpReward> all = dao.findByLevel(o);		for (LevelUpReward luro : cache.values()) {			if(equals(o, luro.getLevel())) {				all.add(luro);			}		}		return all;	}	
*/