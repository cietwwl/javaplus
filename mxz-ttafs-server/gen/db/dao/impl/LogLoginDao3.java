package db.dao.impl;import java.util.List;import db.domain.LogLogin;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class LogLoginDao3 extends LogLoginDao1 {	private static Cache1<Integer, LogLogin> cache = new Cache1Impl<Integer, LogLogin>();	public static Cache1<Integer, LogLogin> getCache() { return cache; }	LogLoginDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(LogLogin llo) {		if(llo == null) {			throw new NullPointerException();		}		super.add(llo);		cache.put(llo.getLogId(), llo);	}		public void addAll(List<LogLogin> llos) {		for(LogLogin llo : llos) {			if(llo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(llos);		for(LogLogin llo : llos) {			cache.put(llo.getLogId(), llo);		}	}		public void delete(Integer log_id) {		super.delete(log_id);		cache.delete(log_id);	}	public void delete(LogLogin llo) {		super.delete(llo);		cache.delete(llo.getLogId());	}	public void delete(List<LogLogin> llos) {		for(LogLogin llo : llos) {			delete(llo);		}	}	public void update(LogLogin llo) {		if(llo == null) {			throw new NullPointerException();		}		super.update(llo);		cache.put(llo.getLogId(), llo);	}	public void save(LogLogin llo) {		if(llo == null) {			throw new NullPointerException();		}		super.save(llo);		cache.put(llo.getLogId(), llo);	}		public void save(List<LogLogin> llos) {		for(LogLogin llo : llos) {			save(llo);		}	}	public void update(List<LogLogin> llos) {		for(LogLogin llo : llos) {			update(llo);		}	}	public LogLogin get(Integer log_id) {		LogLogin ooo = cache.get(log_id);		if(ooo == null) {			ooo = super.get(log_id);			if(ooo != null) {				cache.put(log_id, ooo);			}		}		return ooo;	}		public List<LogLogin> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<LogLogin> all = super.getAll();			for (LogLogin llo : all) {				cache.put(llo.getLogId(), llo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}