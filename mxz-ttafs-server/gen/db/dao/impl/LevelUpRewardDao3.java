package db.dao.impl;import java.util.List;import db.domain.LevelUpReward;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class LevelUpRewardDao3 extends LevelUpRewardDao1 {	private static Cache2<Integer, String, LevelUpReward> cache = new Cache2Impl<Integer, String, LevelUpReward>();	public static Cache2<Integer, String, LevelUpReward> getCache() { return cache; }	LevelUpRewardDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(LevelUpReward luro) {		if(luro == null) {			throw new NullPointerException();		}		super.add(luro);		cache.put(luro.getLevel(), luro.getUname(), luro);	}		public void addAll(List<LevelUpReward> luros) {		for(LevelUpReward luro : luros) {			if(luro == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(luros);		for(LevelUpReward luro : luros) {			cache.put(luro.getLevel(), luro.getUname(), luro);		}	}		public void delete(Integer level, String uname) {		super.delete(level, uname);		cache.delete(level, uname);	}	public void delete(LevelUpReward luro) {		super.delete(luro);		cache.delete(luro.getLevel(),luro.getUname());	}	public void delete(List<LevelUpReward> luros) {		for(LevelUpReward luro : luros) {			delete(luro);		}	}	public void update(LevelUpReward luro) {		if(luro == null) {			throw new NullPointerException();		}		super.update(luro);		cache.put(luro.getLevel(), luro.getUname(), luro);	}	public void save(LevelUpReward luro) {		if(luro == null) {			throw new NullPointerException();		}		super.save(luro);		cache.put(luro.getLevel(), luro.getUname(), luro);	}		public void save(List<LevelUpReward> luros) {		for(LevelUpReward luro : luros) {			save(luro);		}	}	public void update(List<LevelUpReward> luros) {		for(LevelUpReward luro : luros) {			update(luro);		}	}	public LevelUpReward get(Integer level, String uname) {		LevelUpReward ooo = cache.get(level, uname);		if(ooo == null) {			ooo = super.get(level, uname);			if(ooo != null) {				cache.put(level, uname, ooo);			}		}		return ooo;	}		public List<LevelUpReward> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<LevelUpReward> all = super.getAll();			for (LevelUpReward luro : all) {				cache.put(luro.getLevel(), luro.getUname(), luro);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}