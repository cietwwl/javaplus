package db.dao.impl;import java.util.List;import java.util.ArrayList;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.Timestamp;import java.sql.SQLException;import db.domain.MissionStar;import cn.javaplus.util.Closer;import java.sql.Connection;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.util.Util;import db.domain.*;import java.sql.Blob;import java.sql.Date;import java.sql.Time;//这一版本的Dao, 是第一版本的Dao, 不带任何缓存//该文件自动生成, 禁止手动修改!public class MissionStarDao1 implements MissionStarDao{class StatementSetter {		private PreparedStatement ps;		private int index = 1;		public StatementSetter(PreparedStatement ps) {			this.ps = ps;		}		void setNext(Integer value) throws SQLException {			ps.setInt(index++, value);		}		void setNext(Byte value) throws SQLException {			ps.setByte(index++, value);		}		void setNext(Blob value) throws SQLException {			ps.setBlob(index++, value);		}		void setNext(Short value) throws SQLException {			ps.setShort(index++, value);		}		void setNext(String value) throws SQLException {			ps.setString(index++, value);		}		void setNext(Float value) throws SQLException {			ps.setFloat(index++, value);		}		void setNext(byte[] value) throws SQLException {			ps.setBytes(index++, value);		}		void setNext(Boolean value) throws SQLException {			ps.setBoolean(index++, value);		}		void setNext(Date value) throws SQLException {			Timestamp tttt = new Timestamp(value.getTime());			ps.setTimestamp(index++, tttt);		}		void setNext(Timestamp value) throws SQLException {			ps.setTimestamp(index++, value);		}		void setNext(Long value) throws SQLException {			ps.setLong(index++, value);		}		void setNext(Double value) throws SQLException {			ps.setDouble(index++, value);		}		void setNext(Time value) throws SQLException {			ps.setTime(index++, value);		}		void setNext(Object value) throws SQLException {			if (value == null) {				throw new NullPointerException("不能为null");			}						if (value instanceof Integer) {				setNext((Integer) value);			} else if (value instanceof Byte) {				setNext((Byte) value);			} else if (value instanceof Blob) {				setNext((Blob) value);			} else if (value instanceof Short) {				setNext((Short) value);			} else if (value instanceof String) {				setNext((String) value);			} else if (value instanceof Float) {				setNext((Float) value);			} else if (value instanceof byte[]) {				setNext((byte[]) value);			} else if (value instanceof Boolean) {				setNext((Boolean) value);			} else if (value instanceof Date) {				Date date = (Date) value;				Timestamp tttt = new Timestamp(date.getTime());				setNext(tttt);			} else if (value instanceof Long) {				setNext((Long) value);			} else if (value instanceof Double) {				setNext((Double) value);			} else if (value instanceof Time) {				setNext((Time) value);			} else {				throw new RuntimeException("无法识别的类型:" + value.getClass());			}		}		public void addBatch() throws SQLException {			index = 1;			ps.addBatch();		}	}		private ConnectionFetcher	fetcher;	public MissionStarDao1(ConnectionFetcher fetcher) {		this.fetcher = fetcher;	}	private static boolean hasLog = db.dao.impl.DBConfig.hasLog;	public void add(MissionStar mso) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "INSERT INTO mission_star (uname, mission_id, demon_star_max, demon_star, main_boss_star_max, main_boss_star, branch_boss_star_1, branch_boss_star_2, branch_boss_star_3, branch_boss_star_4, branch_boss_star_5, branch_boss_star_6, branch_boss_star_max_1, branch_boss_star_max_2, branch_boss_star_max_3, branch_boss_star_max_4, branch_boss_star_max_5, branch_boss_star_max_6) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);				ss.setNext(mso.getUname());
				ss.setNext(mso.getMissionId());
				ss.setNext(mso.getDemonStarMax());
				ss.setNext(mso.getDemonStar());
				ss.setNext(mso.getMainBossStarMax());
				ss.setNext(mso.getMainBossStar());
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStar(i));
				}
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStarMax(i));
				}
			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public void addAll(List<MissionStar> msos) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "INSERT INTO mission_star (uname, mission_id, demon_star_max, demon_star, main_boss_star_max, main_boss_star, branch_boss_star_1, branch_boss_star_2, branch_boss_star_3, branch_boss_star_4, branch_boss_star_5, branch_boss_star_6, branch_boss_star_max_1, branch_boss_star_max_2, branch_boss_star_max_3, branch_boss_star_max_4, branch_boss_star_max_5, branch_boss_star_max_6) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for (MissionStar mso : msos) {				ss.setNext(mso.getUname());
				ss.setNext(mso.getMissionId());
				ss.setNext(mso.getDemonStarMax());
				ss.setNext(mso.getDemonStar());
				ss.setNext(mso.getMainBossStarMax());
				ss.setNext(mso.getMainBossStar());
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStar(i));
				}
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStarMax(i));
				}
				ss.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void delete(Integer mission_id, String uname) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM mission_star WHERE mission_id = ? AND uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(mission_id);
			ss.setNext(uname);
			ps.executeUpdate();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void update(MissionStar mso) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE mission_star SET demon_star_max = ?, demon_star = ?, main_boss_star_max = ?, main_boss_star = ?, branch_boss_star_1 = ?, branch_boss_star_2 = ?, branch_boss_star_3 = ?, branch_boss_star_4 = ?, branch_boss_star_5 = ?, branch_boss_star_6 = ?, branch_boss_star_max_1 = ?, branch_boss_star_max_2 = ?, branch_boss_star_max_3 = ?, branch_boss_star_max_4 = ?, branch_boss_star_max_5 = ?, branch_boss_star_max_6 = ? WHERE mission_id = ? AND uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(mso.getDemonStarMax());
			ss.setNext(mso.getDemonStar());
			ss.setNext(mso.getMainBossStarMax());
			ss.setNext(mso.getMainBossStar());
			for(int i = 0; i < 6; i++) {
				ss.setNext(mso.getBranchBossStar(i));
			}

			for(int i = 0; i < 6; i++) {
				ss.setNext(mso.getBranchBossStarMax(i));
			}

			ss.setNext(mso.getMissionId());
			ss.setNext(mso.getUname());
			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void update(List<MissionStar> msos) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE mission_star SET demon_star_max = ?, demon_star = ?, main_boss_star_max = ?, main_boss_star = ?, branch_boss_star_1 = ?, branch_boss_star_2 = ?, branch_boss_star_3 = ?, branch_boss_star_4 = ?, branch_boss_star_5 = ?, branch_boss_star_6 = ?, branch_boss_star_max_1 = ?, branch_boss_star_max_2 = ?, branch_boss_star_max_3 = ?, branch_boss_star_max_4 = ?, branch_boss_star_max_5 = ?, branch_boss_star_max_6 = ? WHERE mission_id = ? AND uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for(MissionStar mso: msos) {			ss.setNext(mso.getDemonStarMax());
			ss.setNext(mso.getDemonStar());
			ss.setNext(mso.getMainBossStarMax());
			ss.setNext(mso.getMainBossStar());
			for(int i = 0; i < 6; i++) {
				ss.setNext(mso.getBranchBossStar(i));
			}

			for(int i = 0; i < 6; i++) {
				ss.setNext(mso.getBranchBossStarMax(i));
			}

			ss.setNext(mso.getMissionId());
			ss.setNext(mso.getUname());
				ss.addBatch();			}			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void delete(List<MissionStar> msos) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM mission_star WHERE mission_id = ? AND uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for (MissionStar mso : msos) {			ss.setNext(mso.getMissionId());
			ss.setNext(mso.getUname());
				ss.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void delete(MissionStar mso) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM mission_star WHERE mission_id = ? AND uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(mso.getMissionId());
			ss.setNext(mso.getUname());
			ps.executeUpdate();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void save(MissionStar mso) {	PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "REPLACE INTO mission_star (uname, mission_id, demon_star_max, demon_star, main_boss_star_max, main_boss_star, branch_boss_star_1, branch_boss_star_2, branch_boss_star_3, branch_boss_star_4, branch_boss_star_5, branch_boss_star_6, branch_boss_star_max_1, branch_boss_star_max_2, branch_boss_star_max_3, branch_boss_star_max_4, branch_boss_star_max_5, branch_boss_star_max_6) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);				ss.setNext(mso.getUname());
				ss.setNext(mso.getMissionId());
				ss.setNext(mso.getDemonStarMax());
				ss.setNext(mso.getDemonStar());
				ss.setNext(mso.getMainBossStarMax());
				ss.setNext(mso.getMainBossStar());
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStar(i));
				}
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStarMax(i));
				}
			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void save(List<MissionStar> msos) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "REPLACE INTO mission_star (uname, mission_id, demon_star_max, demon_star, main_boss_star_max, main_boss_star, branch_boss_star_1, branch_boss_star_2, branch_boss_star_3, branch_boss_star_4, branch_boss_star_5, branch_boss_star_6, branch_boss_star_max_1, branch_boss_star_max_2, branch_boss_star_max_3, branch_boss_star_max_4, branch_boss_star_max_5, branch_boss_star_max_6) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for (MissionStar mso : msos) {				ss.setNext(mso.getUname());
				ss.setNext(mso.getMissionId());
				ss.setNext(mso.getDemonStarMax());
				ss.setNext(mso.getDemonStar());
				ss.setNext(mso.getMainBossStarMax());
				ss.setNext(mso.getMainBossStar());
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStar(i));
				}
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStarMax(i));
				}
				ss.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public MissionStar get(Integer mission_id, String uname) {		PreparedStatement ps = null;		ResultSet rs = null;		MissionStar mso = null;		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE mission_id = ? AND uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(mission_id);
			ss.setNext(uname);
			rs = ps.executeQuery();			while (rs.next()) {			mso = mapping(rs);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return mso;	}		public List<MissionStar> getAll() {		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> msos = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				MissionStar mso = new MissionStarImpl();				mso = mapping(rs);				msos.add(mso);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return msos;	}	public int getCount() {		PreparedStatement ps = null; 		ResultSet rs = null;		int count = 0;		Connection c = fetcher.getConnection(); 		try {			String sql = "SELECT COUNT(*) FROM mission_star";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				count =  rs.getInt(1);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally { 			Closer.close(rs, ps, c);		} 		return count; 	}	private MissionStar mapping(ResultSet rs) throws SQLException {		MissionStar mso = new MissionStarImpl();		mso.setUname(rs.getString("uname"));		
		mso.setMissionId(rs.getInt("mission_id"));		
		mso.setDemonStarMax(rs.getInt("demon_star_max"));		
		mso.setDemonStar(rs.getInt("demon_star"));		
		mso.setMainBossStarMax(rs.getInt("main_boss_star_max"));		
		mso.setMainBossStar(rs.getInt("main_boss_star"));		

		for(int i = 0; i < 6; i++) {
			mso.setBranchBossStar( i, rs.getInt("branch_boss_star_" + (i + 1)));
		}


		for(int i = 0; i < 6; i++) {
			mso.setBranchBossStarMax( i, rs.getInt("branch_boss_star_max_" + (i + 1)));
		}

		return mso;	}/*		public List<MissionStar> findBy(String field, String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE " + field + " = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}*/		public List<MissionStar> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMissionId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE mission_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByDemonStarMax(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE demon_star_max = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByDemonStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE demon_star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMainBossStarMax(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE main_boss_star_max = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMainBossStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE main_boss_star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findBy(String field, String o, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE " + field + " = ? limit ?";			ps = c.prepareStatement(sql);						StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			ss.setNext(limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public MissionStar createDTO() {		return new MissionStarImpl();	}		public void clear() {		PreparedStatement ps = null;		Connection c = fetcher.getConnection(); 		try {			String sql = "DELETE FROM mission_star";			ps = c.prepareStatement(sql);			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(ps, c);		}	}	public void update(String fieldName, Object value) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE mission_star SET " + fieldName + " = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(value);			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public List<MissionStar> findBy(String field, String symbol, String o, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE " + field + " " + symbol + " ? LIMIT ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			ss.setNext(limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public List<MissionStar> findWhere(String where){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE " + where + ";";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public List<MissionStar> findByScope(String field, int min, int max, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE " + field + " >= ? AND " + field + " <= ? LIMIT ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(min);			ss.setNext(max);			ss.setNext(limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}}