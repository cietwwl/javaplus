package db.dao.impl;import java.util.List;import db.domain.LogBuy;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class LogBuyDao3 extends LogBuyDao1 {	private static Cache1<Integer, LogBuy> cache = new Cache1Impl<Integer, LogBuy>();	public static Cache1<Integer, LogBuy> getCache() { return cache; }	LogBuyDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(LogBuy logBuyo) {		if(logBuyo == null) {			throw new NullPointerException();		}		super.add(logBuyo);		cache.put(logBuyo.getLogId(), logBuyo);	}		public void addAll(List<LogBuy> logBuyos) {		for(LogBuy logBuyo : logBuyos) {			if(logBuyo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(logBuyos);		for(LogBuy logBuyo : logBuyos) {			cache.put(logBuyo.getLogId(), logBuyo);		}	}		public void delete(Integer log_id) {		super.delete(log_id);		cache.delete(log_id);	}	public void delete(LogBuy logBuyo) {		super.delete(logBuyo);		cache.delete(logBuyo.getLogId());	}	public void delete(List<LogBuy> logBuyos) {		for(LogBuy logBuyo : logBuyos) {			delete(logBuyo);		}	}	public void update(LogBuy logBuyo) {		if(logBuyo == null) {			throw new NullPointerException();		}		super.update(logBuyo);		cache.put(logBuyo.getLogId(), logBuyo);	}	public void save(LogBuy logBuyo) {		if(logBuyo == null) {			throw new NullPointerException();		}		super.save(logBuyo);		cache.put(logBuyo.getLogId(), logBuyo);	}		public void save(List<LogBuy> logBuyos) {		for(LogBuy logBuyo : logBuyos) {			save(logBuyo);		}	}	public void update(List<LogBuy> logBuyos) {		for(LogBuy logBuyo : logBuyos) {			update(logBuyo);		}	}	public LogBuy get(Integer log_id) {		LogBuy ooo = cache.get(log_id);		if(ooo == null) {			ooo = super.get(log_id);			if(ooo != null) {				cache.put(log_id, ooo);			}		}		return ooo;	}		public List<LogBuy> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<LogBuy> all = super.getAll();			for (LogBuy logBuyo : all) {				cache.put(logBuyo.getLogId(), logBuyo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}