package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;import cn.mxz.city.PlayerProperty;import cn.mxz.util.debuger.Debuger;//该文件自动生成, 禁止手动修改!public class UserDataDao2 implements UserDataDao {	private UserDataDao1 dao;	private static Cache<String, UserData> cache = new CacheImpl<String, UserData>();	UserDataDao2(ConnectionFetcher fetcher) {		dao = new UserDataDao1(fetcher);	}	void commitAllSafety() {		List<UserData> values;		synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}		if (values.isEmpty()) {			return;		}		try {			long time = System.currentTimeMillis();			dao.save(values);			if (!values.isEmpty()) {				// Logger.getLogger(UserDataDao2.class).debug("线程:" +				// Thread.currentThread().getId() + " 批量提交 UserData 数据量: " +				// values.size() + " [UserDataDao2] [time = " +				// (System.currentTimeMillis() - time) + "]");			}		} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(UserDataDao2.class).debug(					"线程:" + Thread.currentThread().getId()							+ " 批量提交 UserData 失败, 重新写入缓存, 数据量: "							+ values.size() + " [UserDataDao2]");			Logger.getLogger(UserDataDao2.class).error(					e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(String uname) {		cache.remove(key(uname));		dao.delete(uname);	}	public void delete(List<UserData> udos) {		for (UserData udo : udos) {			cache.remove(key(udo.getUname()));		}		dao.delete(udos);	}	public void save(UserData udo) {		cache.put(key(udo.getUname()), /* new UserDataImpl( */udo/* ) */);		try {			Debuger.debug("UserDataDao2.save() " + udo.getNick() + ","					+ udo.getV(PlayerProperty.CASH.getValue()) + ","					+ udo.getV(PlayerProperty.RONG_YU.getValue()) + ","					+ udo.getV(PlayerProperty.REPUTATION.getValue()));		} catch (Exception e) {			e.printStackTrace();		}	}	public UserData get(String uname) {		UserData udo = cache.get(key(uname));		if (udo == null) {			udo = dao.get(uname);		}		return udo;	}	public int getCount() {		return dao.getCount() + cache.size();	}	public void clear() {		cache.clear();		dao.clear();	}	/*	 * @Deprecated public List<UserData> findBy(String field, String o) { return	 * dao.findBy(field, o); }	 */	@Deprecated	public List<UserData> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public UserData createDTO() {		return new UserDataImpl();	}	@Deprecated	public List<UserData> findBy(String field, String symbol, String o,			int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<UserData> findWhere(String where) {		return dao.findWhere(where);	}	@Deprecated	public List<UserData> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(UserData udo) {		save(udo);	}	public void addAll(List<UserData> udos) {		save(udos);	}	public void update(UserData udo) {		save(udo);	}	public void update(List<UserData> udos) {		save(udos);	}	public void delete(UserData udo) {		delete(udo.getUname());	}	public List<UserData> getAll() {		List<UserData> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<UserData> udos) {		for (UserData udo : udos) {			save(udo);		}	}	@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}	@Override	public List<UserData> findByUname(String o) {		List<UserData> all = dao.findByUname(o);		for (UserData udo : cache.values()) {			if (equals(o, udo.getUname())) {				all.add(udo);			}		}		return all;	}	@Override	public List<UserData> findByNick(String o) {		List<UserData> all = dao.findByNick(o);		for (UserData udo : cache.values()) {			if (equals(o, udo.getNick())) {				all.add(udo);			}		}		return all;	}	@Override	public List<UserData> findByCoupon(Integer o) {		List<UserData> all = dao.findByCoupon(o);		for (UserData udo : cache.values()) {			if (equals(o, udo.getCoupon())) {				all.add(udo);			}		}		return all;	}	@Override	public List<UserData> findByGold(Integer o) {		List<UserData> all = dao.findByGold(o);		for (UserData udo : cache.values()) {			if (equals(o, udo.getGold())) {				all.add(udo);			}		}		return all;	}	@Override	public List<UserData> findByInvitationCode(String o) {		List<UserData> all = dao.findByInvitationCode(o);		for (UserData udo : cache.values()) {			if (equals(o, udo.getInvitationCode())) {				all.add(udo);			}		}		return all;	}	private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/* *  * CLASS_$PARAMETERs udos --------------- *  * CLASS_$NAME UserData --------------- *  * KS_$GETTER udo.getUname() --------------- *  * PACKAGE_$NAME db --------------- *  * COLUMN_$NAMES uname, nick, coupon, gold, invitation_code, v1, v2, v3, v4, v5, * v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, * v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, * v37, v38, v39, v40 --------------- *  * COLUMN_$?S ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, * ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? * --------------- *  * PS_$SETS_$ADD ss.setNext(udo.getUname()); ss.setNext(udo.getNick()); * ss.setNext(udo.getCoupon()); ss.setNext(udo.getGold()); * ss.setNext(udo.getInvitationCode()); for(int i = 0; i < 40; i++) { * ss.setNext(udo.getV(i)); } *  * --------------- *  * PK_$PARAMETER String uname --------------- *  * PKCOLUMNS_$S uname = ? --------------- *  * PK_$PS_$SETS ss.setNext(uname); *  * --------------- *  * COLUMN_$PARAMETERS nick = ?, coupon = ?, gold = ?, invitation_code = ?, v1 = * ?, v2 = ?, v3 = ?, v4 = ?, v5 = ?, v6 = ?, v7 = ?, v8 = ?, v9 = ?, v10 = ?, * v11 = ?, v12 = ?, v13 = ?, v14 = ?, v15 = ?, v16 = ?, v17 = ?, v18 = ?, v19 = * ?, v20 = ?, v21 = ?, v22 = ?, v23 = ?, v24 = ?, v25 = ?, v26 = ?, v27 = ?, * v28 = ?, v29 = ?, v30 = ?, v31 = ?, v32 = ?, v33 = ?, v34 = ?, v35 = ?, v36 = * ?, v37 = ?, v38 = ?, v39 = ?, v40 = ? --------------- *  * PS_$SETS_$UPDATE ss.setNext(udo.getNick()); ss.setNext(udo.getCoupon()); * ss.setNext(udo.getGold()); ss.setNext(udo.getInvitationCode()); for(int i = * 0; i < 40; i++) { ss.setNext(udo.getV(i)); } *  * ss.setNext(udo.getUname()); *  * --------------- *  * TABLE_$NAME user_data --------------- *  * PK_$COLUMNS uname = ? --------------- *  * DELETE_$SETS ss.setNext(udo.getUname()); *  * --------------- *  * CLASS_$PARAMETER udo --------------- *  * RS_$GETS udo.setUname(rs.getString("uname")); * udo.setNick(rs.getString("nick")); udo.setCoupon(rs.getInt("coupon")); * udo.setGold(rs.getInt("gold")); * udo.setInvitationCode(rs.getString("invitation_code")); *  * for(int i = 0; i < 40; i++) { udo.setV( i, rs.getInt("v" + (i + 1))); } *  *  *  * --------------- *  * PAGE_$SETS ps.setInt(1, (pageNo - 1) * pageSize); ps.setInt(2, pageSize); *  * --------------- *  * TA$IL *  * --------------- *  * KE$YS String, --------------- *  * KEY_$COLUMN_$NAME uname --------------- *  * CACHE_$DEFINE CACHE_DEFINE --------------- *  * String, _$GETTERS String, _GETTERS --------------- *  * KEY$NAMES_LINK_BY_COMMA uname --------------- *  * KEY_$TYPE_1 KEY_TYPE_1 --------------- *  * KEY_$TYPE_2 KEY_TYPE_2 --------------- *  * FIN&DERS *  * public List<UserData> findByUname(String o){ PreparedStatement ps = null; * ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE uname = ?"; ps = c.prepareStatement(sql); * StatementSetter ss = new StatementSetter(ps); ss.setNext(o); rs = * ps.executeQuery(); while (rs.next()) { ls.add(mapping(rs)); } if(hasLog) * System.out.println(sql); } catch (SQLException e) { throw * Util.Exception.toRuntimeException(e); } finally { Closer.close(rs, ps, c); } * return ls; } *  *  * public List<UserData> findByNick(String o){ PreparedStatement ps = null; * ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE nick = ?"; ps = c.prepareStatement(sql); * StatementSetter ss = new StatementSetter(ps); ss.setNext(o); rs = * ps.executeQuery(); while (rs.next()) { ls.add(mapping(rs)); } if(hasLog) * System.out.println(sql); } catch (SQLException e) { throw * Util.Exception.toRuntimeException(e); } finally { Closer.close(rs, ps, c); } * return ls; } *  *  * public List<UserData> findByCoupon(Integer o){ PreparedStatement ps = null; * ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE coupon = ?"; ps = c.prepareStatement(sql); * StatementSetter ss = new StatementSetter(ps); ss.setNext(o); rs = * ps.executeQuery(); while (rs.next()) { ls.add(mapping(rs)); } if(hasLog) * System.out.println(sql); } catch (SQLException e) { throw * Util.Exception.toRuntimeException(e); } finally { Closer.close(rs, ps, c); } * return ls; } *  *  * public List<UserData> findByGold(Integer o){ PreparedStatement ps = null; * ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE gold = ?"; ps = c.prepareStatement(sql); * StatementSetter ss = new StatementSetter(ps); ss.setNext(o); rs = * ps.executeQuery(); while (rs.next()) { ls.add(mapping(rs)); } if(hasLog) * System.out.println(sql); } catch (SQLException e) { throw * Util.Exception.toRuntimeException(e); } finally { Closer.close(rs, ps, c); } * return ls; } *  *  * public List<UserData> findByInvitationCode(String o){ PreparedStatement ps = * null; ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE invitation_code = ?"; ps = * c.prepareStatement(sql); StatementSetter ss = new StatementSetter(ps); * ss.setNext(o); rs = ps.executeQuery(); while (rs.next()) { * ls.add(mapping(rs)); } if(hasLog) System.out.println(sql); } catch * (SQLException e) { throw Util.Exception.toRuntimeException(e); } finally { * Closer.close(rs, ps, c); } return ls; } *  *  *  * -------------- UPPER_$FNAME UPPER_FNAME *  * -------------- FILED_&NAME_IN_TABLE FILED_NAME_IN_TABLE *  * -------------- PACKAGE_$FTYPE PACKAGE_FTYPE *  * -------------- UPPER_$FTYPE UPPER_FTYPE *  * -------------- INTERFAC_$FINDS *  * public List<UserData> findByUname(String o); *  *  * public List<UserData> findByNick(String o); *  *  * public List<UserData> findByCoupon(Integer o); *  *  * public List<UserData> findByGold(Integer o); *  *  * public List<UserData> findByInvitationCode(String o); *  *  *  *  * -------------- DAO2_$ public List<UserData> findByUname(String o){ * PreparedStatement ps = null; ResultSet rs = null; List<UserData> ls = new * ArrayList<UserData>(); Connection c = fetcher.getConnection(); try { String * sql = "SELECT * FROM user_data WHERE uname = ?"; ps = * c.prepareStatement(sql); StatementSetter ss = new StatementSetter(ps); * ss.setNext(o); rs = ps.executeQuery(); while (rs.next()) { * ls.add(mapping(rs)); } if(hasLog) System.out.println(sql); } catch * (SQLException e) { throw Util.Exception.toRuntimeException(e); } finally { * Closer.close(rs, ps, c); } return ls; } *  *  * public List<UserData> findByNick(String o){ PreparedStatement ps = null; * ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE nick = ?"; ps = c.prepareStatement(sql); * StatementSetter ss = new StatementSetter(ps); ss.setNext(o); rs = * ps.executeQuery(); while (rs.next()) { ls.add(mapping(rs)); } if(hasLog) * System.out.println(sql); } catch (SQLException e) { throw * Util.Exception.toRuntimeException(e); } finally { Closer.close(rs, ps, c); } * return ls; } *  *  * public List<UserData> findByCoupon(Integer o){ PreparedStatement ps = null; * ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE coupon = ?"; ps = c.prepareStatement(sql); * StatementSetter ss = new StatementSetter(ps); ss.setNext(o); rs = * ps.executeQuery(); while (rs.next()) { ls.add(mapping(rs)); } if(hasLog) * System.out.println(sql); } catch (SQLException e) { throw * Util.Exception.toRuntimeException(e); } finally { Closer.close(rs, ps, c); } * return ls; } *  *  * public List<UserData> findByGold(Integer o){ PreparedStatement ps = null; * ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE gold = ?"; ps = c.prepareStatement(sql); * StatementSetter ss = new StatementSetter(ps); ss.setNext(o); rs = * ps.executeQuery(); while (rs.next()) { ls.add(mapping(rs)); } if(hasLog) * System.out.println(sql); } catch (SQLException e) { throw * Util.Exception.toRuntimeException(e); } finally { Closer.close(rs, ps, c); } * return ls; } *  *  * public List<UserData> findByInvitationCode(String o){ PreparedStatement ps = * null; ResultSet rs = null; List<UserData> ls = new ArrayList<UserData>(); * Connection c = fetcher.getConnection(); try { String sql = * "SELECT * FROM user_data WHERE invitation_code = ?"; ps = * c.prepareStatement(sql); StatementSetter ss = new StatementSetter(ps); * ss.setNext(o); rs = ps.executeQuery(); while (rs.next()) { * ls.add(mapping(rs)); } if(hasLog) System.out.println(sql); } catch * (SQLException e) { throw Util.Exception.toRuntimeException(e); } finally { * Closer.close(rs, ps, c); } return ls; } *  *  * @Override public List<UserData> findByUname(String o) { List<UserData> all = * dao.findByUname(o); for (UserData udo : cache.values()) { if(equals(o, * udo.getUname())) { all.add(udo); } } return all; } *  *  *  * @Override public List<UserData> findByNick(String o) { List<UserData> all = * dao.findByNick(o); for (UserData udo : cache.values()) { if(equals(o, * udo.getNick())) { all.add(udo); } } return all; } *  *  *  * @Override public List<UserData> findByCoupon(Integer o) { List<UserData> all * = dao.findByCoupon(o); for (UserData udo : cache.values()) { if(equals(o, * udo.getCoupon())) { all.add(udo); } } return all; } *  *  *  * @Override public List<UserData> findByGold(Integer o) { List<UserData> all = * dao.findByGold(o); for (UserData udo : cache.values()) { if(equals(o, * udo.getGold())) { all.add(udo); } } return all; } *  *  *  * @Override public List<UserData> findByInvitationCode(String o) { * List<UserData> all = dao.findByInvitationCode(o); for (UserData udo : * cache.values()) { if(equals(o, udo.getInvitationCode())) { all.add(udo); } } * return all; } */