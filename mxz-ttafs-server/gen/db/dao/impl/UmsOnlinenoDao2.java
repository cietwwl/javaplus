package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class UmsOnlinenoDao2 implements UmsOnlinenoDao {	private UmsOnlinenoDao1 dao;		private static Cache<String, UmsOnlineno> cache = new CacheImpl<String, UmsOnlineno>();	UmsOnlinenoDao2(ConnectionFetcher fetcher) {		dao = new UmsOnlinenoDao1(fetcher);	}	void commitAllSafety() {			List<UmsOnlineno> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(UmsOnlinenoDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 UmsOnlineno 数据量: " + values.size() + " [UmsOnlinenoDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(UmsOnlinenoDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 UmsOnlineno 失败, 重新写入缓存, 数据量: " + values.size() + " [UmsOnlinenoDao2]");			Logger.getLogger(UmsOnlinenoDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Integer server_id) {		cache.remove(key(server_id));		dao.delete(server_id);	}		public void delete(List<UmsOnlineno> uoos) {		for (UmsOnlineno uoo : uoos) {			cache.remove(key(uoo.getServerId()));		}		dao.delete(uoos);	}		public void save(UmsOnlineno uoo) {		cache.put(key(uoo.getServerId()), /*new UmsOnlinenoImpl( */uoo/*)*/);	}		public UmsOnlineno get(Integer server_id) {		UmsOnlineno uoo = cache.get(key(server_id));		if(uoo == null) {			uoo = dao.get(server_id);		}		return uoo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<UmsOnlineno> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<UmsOnlineno> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public UmsOnlineno createDTO() {		return new UmsOnlinenoImpl();	}		@Deprecated	public List<UmsOnlineno> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<UmsOnlineno> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<UmsOnlineno> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(UmsOnlineno uoo) {		save(uoo);	}		public void addAll(List<UmsOnlineno> uoos) {		save(uoos);	}	public void update(UmsOnlineno uoo) {		save(uoo);	}		public void update(List<UmsOnlineno> uoos) {		save(uoos);	}		public void delete(UmsOnlineno uoo) {		delete(uoo.getServerId());	}	public List<UmsOnlineno> getAll() {		List<UmsOnlineno> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<UmsOnlineno> uoos) {		for (UmsOnlineno uoo : uoos) {			save(uoo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<UmsOnlineno> findByServerId(Integer o) {		List<UmsOnlineno> all = dao.findByServerId(o);		for (UmsOnlineno uoo : cache.values()) {			if(equals(o, uoo.getServerId())) {				all.add(uoo);			}		}		return all;	}	
	@Override	public List<UmsOnlineno> findByOnlineNumber(Integer o) {		List<UmsOnlineno> all = dao.findByOnlineNumber(o);		for (UmsOnlineno uoo : cache.values()) {			if(equals(o, uoo.getOnlineNumber())) {				all.add(uoo);			}		}		return all;	}	
	@Override	public List<UmsOnlineno> findByUpdateTime(Date o) {		List<UmsOnlineno> all = dao.findByUpdateTime(o);		for (UmsOnlineno uoo : cache.values()) {			if(equals(o, uoo.getUpdateTime())) {				all.add(uoo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsuoos---------------CLASS_$NAMEUmsOnlineno---------------KS_$GETTERuoo.getServerId()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESserver_id, online_number, update_time---------------COLUMN_$?S?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(uoo.getServerId());
				ss.setNext(uoo.getOnlineNumber());
				ss.setNext(new java.sql.Date(uoo.getUpdateTime().getTime()));
---------------PK_$PARAMETERInteger server_id---------------PKCOLUMNS_$Sserver_id = ?---------------PK_$PS_$SETS			ss.setNext(server_id);
---------------COLUMN_$PARAMETERSonline_number = ?, update_time = ?---------------PS_$SETS_$UPDATE			ss.setNext(uoo.getOnlineNumber());
			ss.setNext(new java.sql.Date(uoo.getUpdateTime().getTime()));
			ss.setNext(uoo.getServerId());
---------------TABLE_$NAMEums_onlineno---------------PK_$COLUMNSserver_id = ?---------------DELETE_$SETS			ss.setNext(uoo.getServerId());
---------------CLASS_$PARAMETERuoo---------------RS_$GETS		uoo.setServerId(rs.getInt("server_id"));		
		uoo.setOnlineNumber(rs.getInt("online_number"));		
		uoo.setUpdateTime(rs.getDate("update_time"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSInteger, ---------------KEY_$COLUMN_$NAMEserver_id---------------CACHE_$DEFINECACHE_DEFINE---------------Integer, _$GETTERSInteger, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAserver_id---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<UmsOnlineno> findByServerId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UmsOnlineno> ls = new ArrayList<UmsOnlineno>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM ums_onlineno WHERE server_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UmsOnlineno> findByOnlineNumber(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UmsOnlineno> ls = new ArrayList<UmsOnlineno>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM ums_onlineno WHERE online_number = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UmsOnlineno> findByUpdateTime(Date o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UmsOnlineno> ls = new ArrayList<UmsOnlineno>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM ums_onlineno WHERE update_time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<UmsOnlineno> findByServerId(Integer o);
		public List<UmsOnlineno> findByOnlineNumber(Integer o);
		public List<UmsOnlineno> findByUpdateTime(Date o);
--------------DAO2_$		public List<UmsOnlineno> findByServerId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UmsOnlineno> ls = new ArrayList<UmsOnlineno>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM ums_onlineno WHERE server_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UmsOnlineno> findByOnlineNumber(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UmsOnlineno> ls = new ArrayList<UmsOnlineno>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM ums_onlineno WHERE online_number = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<UmsOnlineno> findByUpdateTime(Date o){		PreparedStatement ps = null;		ResultSet rs = null;		List<UmsOnlineno> ls = new ArrayList<UmsOnlineno>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM ums_onlineno WHERE update_time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<UmsOnlineno> findByServerId(Integer o) {		List<UmsOnlineno> all = dao.findByServerId(o);		for (UmsOnlineno uoo : cache.values()) {			if(equals(o, uoo.getServerId())) {				all.add(uoo);			}		}		return all;	}	
	@Override	public List<UmsOnlineno> findByOnlineNumber(Integer o) {		List<UmsOnlineno> all = dao.findByOnlineNumber(o);		for (UmsOnlineno uoo : cache.values()) {			if(equals(o, uoo.getOnlineNumber())) {				all.add(uoo);			}		}		return all;	}	
	@Override	public List<UmsOnlineno> findByUpdateTime(Date o) {		List<UmsOnlineno> all = dao.findByUpdateTime(o);		for (UmsOnlineno uoo : cache.values()) {			if(equals(o, uoo.getUpdateTime())) {				all.add(uoo);			}		}		return all;	}	
*/