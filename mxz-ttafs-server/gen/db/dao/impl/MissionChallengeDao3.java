package db.dao.impl;import java.util.List;import db.domain.MissionChallenge;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class MissionChallengeDao3 extends MissionChallengeDao1 {	private static Cache2<Integer, String, MissionChallenge> cache = new Cache2Impl<Integer, String, MissionChallenge>();	public static Cache2<Integer, String, MissionChallenge> getCache() { return cache; }	MissionChallengeDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(MissionChallenge mco) {		if(mco == null) {			throw new NullPointerException();		}		super.add(mco);		cache.put(mco.getMissionId(), mco.getUname(), mco);	}		public void addAll(List<MissionChallenge> mcos) {		for(MissionChallenge mco : mcos) {			if(mco == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(mcos);		for(MissionChallenge mco : mcos) {			cache.put(mco.getMissionId(), mco.getUname(), mco);		}	}		public void delete(Integer mission_id, String uname) {		super.delete(mission_id, uname);		cache.delete(mission_id, uname);	}	public void delete(MissionChallenge mco) {		super.delete(mco);		cache.delete(mco.getMissionId(),mco.getUname());	}	public void delete(List<MissionChallenge> mcos) {		for(MissionChallenge mco : mcos) {			delete(mco);		}	}	public void update(MissionChallenge mco) {		if(mco == null) {			throw new NullPointerException();		}		super.update(mco);		cache.put(mco.getMissionId(), mco.getUname(), mco);	}	public void save(MissionChallenge mco) {		if(mco == null) {			throw new NullPointerException();		}		super.save(mco);		cache.put(mco.getMissionId(), mco.getUname(), mco);	}		public void save(List<MissionChallenge> mcos) {		for(MissionChallenge mco : mcos) {			save(mco);		}	}	public void update(List<MissionChallenge> mcos) {		for(MissionChallenge mco : mcos) {			update(mco);		}	}	public MissionChallenge get(Integer mission_id, String uname) {		MissionChallenge ooo = cache.get(mission_id, uname);		if(ooo == null) {			ooo = super.get(mission_id, uname);			if(ooo != null) {				cache.put(mission_id, uname, ooo);			}		}		return ooo;	}		public List<MissionChallenge> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<MissionChallenge> all = super.getAll();			for (MissionChallenge mco : all) {				cache.put(mco.getMissionId(), mco.getUname(), mco);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}