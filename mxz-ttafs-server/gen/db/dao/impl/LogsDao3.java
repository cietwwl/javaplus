package db.dao.impl;import java.util.List;import db.domain.Logs;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class LogsDao3 extends LogsDao1 {	private static Cache1<Integer, Logs> cache = new Cache1Impl<Integer, Logs>();	public static Cache1<Integer, Logs> getCache() { return cache; }	LogsDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(Logs logso) {		if(logso == null) {			throw new NullPointerException();		}		super.add(logso);		cache.put(logso.getLogId(), logso);	}		public void addAll(List<Logs> logsos) {		for(Logs logso : logsos) {			if(logso == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(logsos);		for(Logs logso : logsos) {			cache.put(logso.getLogId(), logso);		}	}		public void delete(Integer log_id) {		super.delete(log_id);		cache.delete(log_id);	}	public void delete(Logs logso) {		super.delete(logso);		cache.delete(logso.getLogId());	}	public void delete(List<Logs> logsos) {		for(Logs logso : logsos) {			delete(logso);		}	}	public void update(Logs logso) {		if(logso == null) {			throw new NullPointerException();		}		super.update(logso);		cache.put(logso.getLogId(), logso);	}	public void save(Logs logso) {		if(logso == null) {			throw new NullPointerException();		}		super.save(logso);		cache.put(logso.getLogId(), logso);	}		public void save(List<Logs> logsos) {		for(Logs logso : logsos) {			save(logso);		}	}	public void update(List<Logs> logsos) {		for(Logs logso : logsos) {			update(logso);		}	}	public Logs get(Integer log_id) {		Logs ooo = cache.get(log_id);		if(ooo == null) {			ooo = super.get(log_id);			if(ooo != null) {				cache.put(log_id, ooo);			}		}		return ooo;	}		public List<Logs> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<Logs> all = super.getAll();			for (Logs logso : all) {				cache.put(logso.getLogId(), logso);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}