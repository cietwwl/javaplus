package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class NewEquipmentDao2 implements NewEquipmentDao {	private NewEquipmentDao1 dao;		private static Cache<String, NewEquipment> cache = new CacheImpl<String, NewEquipment>();	NewEquipmentDao2(ConnectionFetcher fetcher) {		dao = new NewEquipmentDao1(fetcher);	}	void commitAllSafety() {			List<NewEquipment> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(NewEquipmentDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 NewEquipment 数据量: " + values.size() + " [NewEquipmentDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(NewEquipmentDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 NewEquipment 失败, 重新写入缓存, 数据量: " + values.size() + " [NewEquipmentDao2]");			Logger.getLogger(NewEquipmentDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Integer equipment_id, String uname) {		cache.remove(key(equipment_id, uname));		dao.delete(equipment_id, uname);	}		public void delete(List<NewEquipment> neos) {		for (NewEquipment neo : neos) {			cache.remove(key(neo.getEquipmentId(),neo.getUname()));		}		dao.delete(neos);	}		public void save(NewEquipment neo) {		cache.put(key(neo.getEquipmentId(),neo.getUname()), /*new NewEquipmentImpl( */neo/*)*/);	}		public NewEquipment get(Integer equipment_id, String uname) {		NewEquipment neo = cache.get(key(equipment_id, uname));		if(neo == null) {			neo = dao.get(equipment_id, uname);		}		return neo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<NewEquipment> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<NewEquipment> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public NewEquipment createDTO() {		return new NewEquipmentImpl();	}		@Deprecated	public List<NewEquipment> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<NewEquipment> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<NewEquipment> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(NewEquipment neo) {		save(neo);	}		public void addAll(List<NewEquipment> neos) {		save(neos);	}	public void update(NewEquipment neo) {		save(neo);	}		public void update(List<NewEquipment> neos) {		save(neos);	}		public void delete(NewEquipment neo) {		delete(neo.getEquipmentId(),neo.getUname());	}	public List<NewEquipment> getAll() {		List<NewEquipment> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<NewEquipment> neos) {		for (NewEquipment neo : neos) {			save(neo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<NewEquipment> findByUname(String o) {		List<NewEquipment> all = dao.findByUname(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getUname())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByEquipmentId(Integer o) {		List<NewEquipment> all = dao.findByEquipmentId(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getEquipmentId())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByTempletId(Integer o) {		List<NewEquipment> all = dao.findByTempletId(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getTempletId())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByLevel(Integer o) {		List<NewEquipment> all = dao.findByLevel(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getLevel())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByFighterTypeId(Integer o) {		List<NewEquipment> all = dao.findByFighterTypeId(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getFighterTypeId())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByPrice(Integer o) {		List<NewEquipment> all = dao.findByPrice(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getPrice())) {				all.add(neo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsneos---------------CLASS_$NAMENewEquipment---------------KS_$GETTERneo.getEquipmentId(),neo.getUname()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESuname, equipment_id, templet_id, level, fighter_type_id, price---------------COLUMN_$?S?, ?, ?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(neo.getUname());
				ss.setNext(neo.getEquipmentId());
				ss.setNext(neo.getTempletId());
				ss.setNext(neo.getLevel());
				ss.setNext(neo.getFighterTypeId());
				ss.setNext(neo.getPrice());
---------------PK_$PARAMETERInteger equipment_id, String uname---------------PKCOLUMNS_$Sequipment_id = ? AND uname = ?---------------PK_$PS_$SETS			ss.setNext(equipment_id);
			ss.setNext(uname);
---------------COLUMN_$PARAMETERStemplet_id = ?, level = ?, fighter_type_id = ?, price = ?---------------PS_$SETS_$UPDATE			ss.setNext(neo.getTempletId());
			ss.setNext(neo.getLevel());
			ss.setNext(neo.getFighterTypeId());
			ss.setNext(neo.getPrice());
			ss.setNext(neo.getEquipmentId());
			ss.setNext(neo.getUname());
---------------TABLE_$NAMEnew_equipment---------------PK_$COLUMNSequipment_id = ? AND uname = ?---------------DELETE_$SETS			ss.setNext(neo.getEquipmentId());
			ss.setNext(neo.getUname());
---------------CLASS_$PARAMETERneo---------------RS_$GETS		neo.setUname(rs.getString("uname"));		
		neo.setEquipmentId(rs.getInt("equipment_id"));		
		neo.setTempletId(rs.getInt("templet_id"));		
		neo.setLevel(rs.getInt("level"));		
		neo.setFighterTypeId(rs.getInt("fighter_type_id"));		
		neo.setPrice(rs.getInt("price"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL2---------------KE$YSInteger, String, ---------------KEY_$COLUMN_$NAMEequipment_id---------------CACHE_$DEFINECACHE_DEFINE---------------Integer, String, _$GETTERSInteger, String, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAequipment_id, uname---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<NewEquipment> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByEquipmentId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE equipment_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByTempletId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE templet_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByLevel(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE level = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByFighterTypeId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE fighter_type_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByPrice(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE price = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<NewEquipment> findByUname(String o);
		public List<NewEquipment> findByEquipmentId(Integer o);
		public List<NewEquipment> findByTempletId(Integer o);
		public List<NewEquipment> findByLevel(Integer o);
		public List<NewEquipment> findByFighterTypeId(Integer o);
		public List<NewEquipment> findByPrice(Integer o);
--------------DAO2_$		public List<NewEquipment> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByEquipmentId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE equipment_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByTempletId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE templet_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByLevel(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE level = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByFighterTypeId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE fighter_type_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<NewEquipment> findByPrice(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<NewEquipment> ls = new ArrayList<NewEquipment>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM new_equipment WHERE price = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<NewEquipment> findByUname(String o) {		List<NewEquipment> all = dao.findByUname(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getUname())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByEquipmentId(Integer o) {		List<NewEquipment> all = dao.findByEquipmentId(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getEquipmentId())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByTempletId(Integer o) {		List<NewEquipment> all = dao.findByTempletId(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getTempletId())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByLevel(Integer o) {		List<NewEquipment> all = dao.findByLevel(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getLevel())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByFighterTypeId(Integer o) {		List<NewEquipment> all = dao.findByFighterTypeId(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getFighterTypeId())) {				all.add(neo);			}		}		return all;	}	
	@Override	public List<NewEquipment> findByPrice(Integer o) {		List<NewEquipment> all = dao.findByPrice(o);		for (NewEquipment neo : cache.values()) {			if(equals(o, neo.getPrice())) {				all.add(neo);			}		}		return all;	}	
*/