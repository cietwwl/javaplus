package db.dao.impl;import java.util.List;import db.domain.AvoidFighter;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class AvoidFighterDao3 extends AvoidFighterDao1 {	private static Cache1<String, AvoidFighter> cache = new Cache1Impl<String, AvoidFighter>();	public static Cache1<String, AvoidFighter> getCache() { return cache; }	AvoidFighterDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(AvoidFighter afo) {		if(afo == null) {			throw new NullPointerException();		}		super.add(afo);		cache.put(afo.getUname(), afo);	}		public void addAll(List<AvoidFighter> afos) {		for(AvoidFighter afo : afos) {			if(afo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(afos);		for(AvoidFighter afo : afos) {			cache.put(afo.getUname(), afo);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(AvoidFighter afo) {		super.delete(afo);		cache.delete(afo.getUname());	}	public void delete(List<AvoidFighter> afos) {		for(AvoidFighter afo : afos) {			delete(afo);		}	}	public void update(AvoidFighter afo) {		if(afo == null) {			throw new NullPointerException();		}		super.update(afo);		cache.put(afo.getUname(), afo);	}	public void save(AvoidFighter afo) {		if(afo == null) {			throw new NullPointerException();		}		super.save(afo);		cache.put(afo.getUname(), afo);	}		public void save(List<AvoidFighter> afos) {		for(AvoidFighter afo : afos) {			save(afo);		}	}	public void update(List<AvoidFighter> afos) {		for(AvoidFighter afo : afos) {			update(afo);		}	}	public AvoidFighter get(String uname) {		AvoidFighter ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<AvoidFighter> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<AvoidFighter> all = super.getAll();			for (AvoidFighter afo : all) {				cache.put(afo.getUname(), afo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}