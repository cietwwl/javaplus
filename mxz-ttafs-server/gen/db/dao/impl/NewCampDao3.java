package db.dao.impl;import java.util.List;import db.domain.NewCamp;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class NewCampDao3 extends NewCampDao1 {	private static Cache1<String, NewCamp> cache = new Cache1Impl<String, NewCamp>();	public static Cache1<String, NewCamp> getCache() { return cache; }	NewCampDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(NewCamp newCampo) {		if(newCampo == null) {			throw new NullPointerException();		}		super.add(newCampo);		cache.put(newCampo.getUname(), newCampo);	}		public void addAll(List<NewCamp> newCampos) {		for(NewCamp newCampo : newCampos) {			if(newCampo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(newCampos);		for(NewCamp newCampo : newCampos) {			cache.put(newCampo.getUname(), newCampo);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(NewCamp newCampo) {		super.delete(newCampo);		cache.delete(newCampo.getUname());	}	public void delete(List<NewCamp> newCampos) {		for(NewCamp newCampo : newCampos) {			delete(newCampo);		}	}	public void update(NewCamp newCampo) {		if(newCampo == null) {			throw new NullPointerException();		}		super.update(newCampo);		cache.put(newCampo.getUname(), newCampo);	}	public void save(NewCamp newCampo) {		if(newCampo == null) {			throw new NullPointerException();		}		super.save(newCampo);		cache.put(newCampo.getUname(), newCampo);	}		public void save(List<NewCamp> newCampos) {		for(NewCamp newCampo : newCampos) {			save(newCampo);		}	}	public void update(List<NewCamp> newCampos) {		for(NewCamp newCampo : newCampos) {			update(newCampo);		}	}	public NewCamp get(String uname) {		NewCamp ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<NewCamp> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<NewCamp> all = super.getAll();			for (NewCamp newCampo : all) {				cache.put(newCampo.getUname(), newCampo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}