package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class MissionStarDao2 implements MissionStarDao {	private MissionStarDao1 dao;		private static Cache<String, MissionStar> cache = new CacheImpl<String, MissionStar>();	MissionStarDao2(ConnectionFetcher fetcher) {		dao = new MissionStarDao1(fetcher);	}	void commitAllSafety() {			List<MissionStar> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(MissionStarDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 MissionStar 数据量: " + values.size() + " [MissionStarDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(MissionStarDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 MissionStar 失败, 重新写入缓存, 数据量: " + values.size() + " [MissionStarDao2]");			Logger.getLogger(MissionStarDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Integer mission_id, String uname) {		cache.remove(key(mission_id, uname));		dao.delete(mission_id, uname);	}		public void delete(List<MissionStar> msos) {		for (MissionStar mso : msos) {			cache.remove(key(mso.getMissionId(),mso.getUname()));		}		dao.delete(msos);	}		public void save(MissionStar mso) {		cache.put(key(mso.getMissionId(),mso.getUname()), /*new MissionStarImpl( */mso/*)*/);	}		public MissionStar get(Integer mission_id, String uname) {		MissionStar mso = cache.get(key(mission_id, uname));		if(mso == null) {			mso = dao.get(mission_id, uname);		}		return mso;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<MissionStar> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<MissionStar> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public MissionStar createDTO() {		return new MissionStarImpl();	}		@Deprecated	public List<MissionStar> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<MissionStar> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<MissionStar> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(MissionStar mso) {		save(mso);	}		public void addAll(List<MissionStar> msos) {		save(msos);	}	public void update(MissionStar mso) {		save(mso);	}		public void update(List<MissionStar> msos) {		save(msos);	}		public void delete(MissionStar mso) {		delete(mso.getMissionId(),mso.getUname());	}	public List<MissionStar> getAll() {		List<MissionStar> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<MissionStar> msos) {		for (MissionStar mso : msos) {			save(mso);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<MissionStar> findByUname(String o) {		List<MissionStar> all = dao.findByUname(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getUname())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByMissionId(Integer o) {		List<MissionStar> all = dao.findByMissionId(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getMissionId())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByDemonStarMax(Integer o) {		List<MissionStar> all = dao.findByDemonStarMax(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getDemonStarMax())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByDemonStar(Integer o) {		List<MissionStar> all = dao.findByDemonStar(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getDemonStar())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByMainBossStarMax(Integer o) {		List<MissionStar> all = dao.findByMainBossStarMax(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getMainBossStarMax())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByMainBossStar(Integer o) {		List<MissionStar> all = dao.findByMainBossStar(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getMainBossStar())) {				all.add(mso);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsmsos---------------CLASS_$NAMEMissionStar---------------KS_$GETTERmso.getMissionId(),mso.getUname()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESuname, mission_id, demon_star_max, demon_star, main_boss_star_max, main_boss_star, branch_boss_star_1, branch_boss_star_2, branch_boss_star_3, branch_boss_star_4, branch_boss_star_5, branch_boss_star_6, branch_boss_star_max_1, branch_boss_star_max_2, branch_boss_star_max_3, branch_boss_star_max_4, branch_boss_star_max_5, branch_boss_star_max_6---------------COLUMN_$?S?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(mso.getUname());
				ss.setNext(mso.getMissionId());
				ss.setNext(mso.getDemonStarMax());
				ss.setNext(mso.getDemonStar());
				ss.setNext(mso.getMainBossStarMax());
				ss.setNext(mso.getMainBossStar());
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStar(i));
				}
				for(int i = 0; i < 6; i++) {
					ss.setNext(mso.getBranchBossStarMax(i));
				}
---------------PK_$PARAMETERInteger mission_id, String uname---------------PKCOLUMNS_$Smission_id = ? AND uname = ?---------------PK_$PS_$SETS			ss.setNext(mission_id);
			ss.setNext(uname);
---------------COLUMN_$PARAMETERSdemon_star_max = ?, demon_star = ?, main_boss_star_max = ?, main_boss_star = ?, branch_boss_star_1 = ?, branch_boss_star_2 = ?, branch_boss_star_3 = ?, branch_boss_star_4 = ?, branch_boss_star_5 = ?, branch_boss_star_6 = ?, branch_boss_star_max_1 = ?, branch_boss_star_max_2 = ?, branch_boss_star_max_3 = ?, branch_boss_star_max_4 = ?, branch_boss_star_max_5 = ?, branch_boss_star_max_6 = ?---------------PS_$SETS_$UPDATE			ss.setNext(mso.getDemonStarMax());
			ss.setNext(mso.getDemonStar());
			ss.setNext(mso.getMainBossStarMax());
			ss.setNext(mso.getMainBossStar());
			for(int i = 0; i < 6; i++) {
				ss.setNext(mso.getBranchBossStar(i));
			}

			for(int i = 0; i < 6; i++) {
				ss.setNext(mso.getBranchBossStarMax(i));
			}

			ss.setNext(mso.getMissionId());
			ss.setNext(mso.getUname());
---------------TABLE_$NAMEmission_star---------------PK_$COLUMNSmission_id = ? AND uname = ?---------------DELETE_$SETS			ss.setNext(mso.getMissionId());
			ss.setNext(mso.getUname());
---------------CLASS_$PARAMETERmso---------------RS_$GETS		mso.setUname(rs.getString("uname"));		
		mso.setMissionId(rs.getInt("mission_id"));		
		mso.setDemonStarMax(rs.getInt("demon_star_max"));		
		mso.setDemonStar(rs.getInt("demon_star"));		
		mso.setMainBossStarMax(rs.getInt("main_boss_star_max"));		
		mso.setMainBossStar(rs.getInt("main_boss_star"));		

		for(int i = 0; i < 6; i++) {
			mso.setBranchBossStar( i, rs.getInt("branch_boss_star_" + (i + 1)));
		}


		for(int i = 0; i < 6; i++) {
			mso.setBranchBossStarMax( i, rs.getInt("branch_boss_star_max_" + (i + 1)));
		}

---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL2---------------KE$YSInteger, String, ---------------KEY_$COLUMN_$NAMEmission_id---------------CACHE_$DEFINECACHE_DEFINE---------------Integer, String, _$GETTERSInteger, String, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAmission_id, uname---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<MissionStar> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMissionId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE mission_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByDemonStarMax(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE demon_star_max = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByDemonStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE demon_star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMainBossStarMax(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE main_boss_star_max = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMainBossStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE main_boss_star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<MissionStar> findByUname(String o);
		public List<MissionStar> findByMissionId(Integer o);
		public List<MissionStar> findByDemonStarMax(Integer o);
		public List<MissionStar> findByDemonStar(Integer o);
		public List<MissionStar> findByMainBossStarMax(Integer o);
		public List<MissionStar> findByMainBossStar(Integer o);
--------------DAO2_$		public List<MissionStar> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMissionId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE mission_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByDemonStarMax(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE demon_star_max = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByDemonStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE demon_star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMainBossStarMax(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE main_boss_star_max = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionStar> findByMainBossStar(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionStar> ls = new ArrayList<MissionStar>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_star WHERE main_boss_star = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<MissionStar> findByUname(String o) {		List<MissionStar> all = dao.findByUname(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getUname())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByMissionId(Integer o) {		List<MissionStar> all = dao.findByMissionId(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getMissionId())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByDemonStarMax(Integer o) {		List<MissionStar> all = dao.findByDemonStarMax(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getDemonStarMax())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByDemonStar(Integer o) {		List<MissionStar> all = dao.findByDemonStar(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getDemonStar())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByMainBossStarMax(Integer o) {		List<MissionStar> all = dao.findByMainBossStarMax(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getMainBossStarMax())) {				all.add(mso);			}		}		return all;	}	
	@Override	public List<MissionStar> findByMainBossStar(Integer o) {		List<MissionStar> all = dao.findByMainBossStar(o);		for (MissionStar mso : cache.values()) {			if(equals(o, mso.getMainBossStar())) {				all.add(mso);			}		}		return all;	}	
*/