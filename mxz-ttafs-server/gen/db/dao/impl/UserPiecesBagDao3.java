package db.dao.impl;import java.util.List;import db.domain.UserPiecesBag;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class UserPiecesBagDao3 extends UserPiecesBagDao1 {	private static Cache1<String, UserPiecesBag> cache = new Cache1Impl<String, UserPiecesBag>();	public static Cache1<String, UserPiecesBag> getCache() { return cache; }	UserPiecesBagDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(UserPiecesBag upbo) {		if(upbo == null) {			throw new NullPointerException();		}		super.add(upbo);		cache.put(upbo.getUname(), upbo);	}		public void addAll(List<UserPiecesBag> upbos) {		for(UserPiecesBag upbo : upbos) {			if(upbo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(upbos);		for(UserPiecesBag upbo : upbos) {			cache.put(upbo.getUname(), upbo);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(UserPiecesBag upbo) {		super.delete(upbo);		cache.delete(upbo.getUname());	}	public void delete(List<UserPiecesBag> upbos) {		for(UserPiecesBag upbo : upbos) {			delete(upbo);		}	}	public void update(UserPiecesBag upbo) {		if(upbo == null) {			throw new NullPointerException();		}		super.update(upbo);		cache.put(upbo.getUname(), upbo);	}	public void save(UserPiecesBag upbo) {		if(upbo == null) {			throw new NullPointerException();		}		super.save(upbo);		cache.put(upbo.getUname(), upbo);	}		public void save(List<UserPiecesBag> upbos) {		for(UserPiecesBag upbo : upbos) {			save(upbo);		}	}	public void update(List<UserPiecesBag> upbos) {		for(UserPiecesBag upbo : upbos) {			update(upbo);		}	}	public UserPiecesBag get(String uname) {		UserPiecesBag ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<UserPiecesBag> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<UserPiecesBag> all = super.getAll();			for (UserPiecesBag upbo : all) {				cache.put(upbo.getUname(), upbo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}