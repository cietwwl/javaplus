package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class PvpDao2 implements PvpDao {	private PvpDao1 dao;		private static Cache<String, Pvp> cache = new CacheImpl<String, Pvp>();	PvpDao2(ConnectionFetcher fetcher) {		dao = new PvpDao1(fetcher);	}	void commitAllSafety() {			List<Pvp> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(PvpDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 Pvp 数据量: " + values.size() + " [PvpDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(PvpDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 Pvp 失败, 重新写入缓存, 数据量: " + values.size() + " [PvpDao2]");			Logger.getLogger(PvpDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(String uname) {		cache.remove(key(uname));		dao.delete(uname);	}		public void delete(List<Pvp> pvpos) {		for (Pvp pvpo : pvpos) {			cache.remove(key(pvpo.getUname()));		}		dao.delete(pvpos);	}		public void save(Pvp pvpo) {		cache.put(key(pvpo.getUname()), /*new PvpImpl( */pvpo/*)*/);	}		public Pvp get(String uname) {		Pvp pvpo = cache.get(key(uname));		if(pvpo == null) {			pvpo = dao.get(uname);		}		return pvpo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<Pvp> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<Pvp> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public Pvp createDTO() {		return new PvpImpl();	}		@Deprecated	public List<Pvp> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<Pvp> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<Pvp> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(Pvp pvpo) {		save(pvpo);	}		public void addAll(List<Pvp> pvpos) {		save(pvpos);	}	public void update(Pvp pvpo) {		save(pvpo);	}		public void update(List<Pvp> pvpos) {		save(pvpos);	}		public void delete(Pvp pvpo) {		delete(pvpo.getUname());	}	public List<Pvp> getAll() {		List<Pvp> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<Pvp> pvpos) {		for (Pvp pvpo : pvpos) {			save(pvpo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<Pvp> findByUname(String o) {		List<Pvp> all = dao.findByUname(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getUname())) {				all.add(pvpo);			}		}		return all;	}	
	@Override	public List<Pvp> findByDanId(Integer o) {		List<Pvp> all = dao.findByDanId(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getDanId())) {				all.add(pvpo);			}		}		return all;	}	
	@Override	public List<Pvp> findByPractice(Integer o) {		List<Pvp> all = dao.findByPractice(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getPractice())) {				all.add(pvpo);			}		}		return all;	}	
	@Override	public List<Pvp> findByShenJia(Integer o) {		List<Pvp> all = dao.findByShenJia(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getShenJia())) {				all.add(pvpo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERspvpos---------------CLASS_$NAMEPvp---------------KS_$GETTERpvpo.getUname()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESuname, dan_id, practice, shen_jia---------------COLUMN_$?S?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(pvpo.getUname());
				ss.setNext(pvpo.getDanId());
				ss.setNext(pvpo.getPractice());
				ss.setNext(pvpo.getShenJia());
---------------PK_$PARAMETERString uname---------------PKCOLUMNS_$Suname = ?---------------PK_$PS_$SETS			ss.setNext(uname);
---------------COLUMN_$PARAMETERSdan_id = ?, practice = ?, shen_jia = ?---------------PS_$SETS_$UPDATE			ss.setNext(pvpo.getDanId());
			ss.setNext(pvpo.getPractice());
			ss.setNext(pvpo.getShenJia());
			ss.setNext(pvpo.getUname());
---------------TABLE_$NAMEpvp---------------PK_$COLUMNSuname = ?---------------DELETE_$SETS			ss.setNext(pvpo.getUname());
---------------CLASS_$PARAMETERpvpo---------------RS_$GETS		pvpo.setUname(rs.getString("uname"));		
		pvpo.setDanId(rs.getInt("dan_id"));		
		pvpo.setPractice(rs.getInt("practice"));		
		pvpo.setShenJia(rs.getInt("shen_jia"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSString, ---------------KEY_$COLUMN_$NAMEuname---------------CACHE_$DEFINECACHE_DEFINE---------------String, _$GETTERSString, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAuname---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<Pvp> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<Pvp> findByDanId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE dan_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<Pvp> findByPractice(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE practice = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<Pvp> findByShenJia(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE shen_jia = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<Pvp> findByUname(String o);
		public List<Pvp> findByDanId(Integer o);
		public List<Pvp> findByPractice(Integer o);
		public List<Pvp> findByShenJia(Integer o);
--------------DAO2_$		public List<Pvp> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<Pvp> findByDanId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE dan_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<Pvp> findByPractice(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE practice = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<Pvp> findByShenJia(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<Pvp> ls = new ArrayList<Pvp>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp WHERE shen_jia = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<Pvp> findByUname(String o) {		List<Pvp> all = dao.findByUname(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getUname())) {				all.add(pvpo);			}		}		return all;	}	
	@Override	public List<Pvp> findByDanId(Integer o) {		List<Pvp> all = dao.findByDanId(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getDanId())) {				all.add(pvpo);			}		}		return all;	}	
	@Override	public List<Pvp> findByPractice(Integer o) {		List<Pvp> all = dao.findByPractice(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getPractice())) {				all.add(pvpo);			}		}		return all;	}	
	@Override	public List<Pvp> findByShenJia(Integer o) {		List<Pvp> all = dao.findByShenJia(o);		for (Pvp pvpo : cache.values()) {			if(equals(o, pvpo.getShenJia())) {				all.add(pvpo);			}		}		return all;	}	
*/