package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class MissionMapDao2 implements MissionMapDao {	private MissionMapDao1 dao;		private static Cache<String, MissionMap> cache = new CacheImpl<String, MissionMap>();	MissionMapDao2(ConnectionFetcher fetcher) {		dao = new MissionMapDao1(fetcher);	}	void commitAllSafety() {			List<MissionMap> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(MissionMapDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 MissionMap 数据量: " + values.size() + " [MissionMapDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(MissionMapDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 MissionMap 失败, 重新写入缓存, 数据量: " + values.size() + " [MissionMapDao2]");			Logger.getLogger(MissionMapDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(String ids, Integer templet_id) {		cache.remove(key(ids, templet_id));		dao.delete(ids, templet_id);	}		public void delete(List<MissionMap> mmos) {		for (MissionMap mmo : mmos) {			cache.remove(key(mmo.getIds(),mmo.getTempletId()));		}		dao.delete(mmos);	}		public void save(MissionMap mmo) {		cache.put(key(mmo.getIds(),mmo.getTempletId()), /*new MissionMapImpl( */mmo/*)*/);	}		public MissionMap get(String ids, Integer templet_id) {		MissionMap mmo = cache.get(key(ids, templet_id));		if(mmo == null) {			mmo = dao.get(ids, templet_id);		}		return mmo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<MissionMap> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<MissionMap> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public MissionMap createDTO() {		return new MissionMapImpl();	}		@Deprecated	public List<MissionMap> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<MissionMap> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<MissionMap> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(MissionMap mmo) {		save(mmo);	}		public void addAll(List<MissionMap> mmos) {		save(mmos);	}	public void update(MissionMap mmo) {		save(mmo);	}		public void update(List<MissionMap> mmos) {		save(mmos);	}		public void delete(MissionMap mmo) {		delete(mmo.getIds(),mmo.getTempletId());	}	public List<MissionMap> getAll() {		List<MissionMap> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<MissionMap> mmos) {		for (MissionMap mmo : mmos) {			save(mmo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<MissionMap> findByIds(String o) {		List<MissionMap> all = dao.findByIds(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getIds())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByTempletId(Integer o) {		List<MissionMap> all = dao.findByTempletId(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getTempletId())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByIsFinish(Boolean o) {		List<MissionMap> all = dao.findByIsFinish(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getIsFinish())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByArgs(String o) {		List<MissionMap> all = dao.findByArgs(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getArgs())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByType(Integer o) {		List<MissionMap> all = dao.findByType(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getType())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByPaths(Integer o) {		List<MissionMap> all = dao.findByPaths(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getPaths())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByIndexs(Integer o) {		List<MissionMap> all = dao.findByIndexs(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getIndexs())) {				all.add(mmo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsmmos---------------CLASS_$NAMEMissionMap---------------KS_$GETTERmmo.getIds(),mmo.getTempletId()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESids, templet_id, is_finish, args, type, paths, indexs---------------COLUMN_$?S?, ?, ?, ?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(mmo.getIds());
				ss.setNext(mmo.getTempletId());
				ss.setNext(mmo.getIsFinish());
				ss.setNext(mmo.getArgs());
				ss.setNext(mmo.getType());
				ss.setNext(mmo.getPaths());
				ss.setNext(mmo.getIndexs());
---------------PK_$PARAMETERString ids, Integer templet_id---------------PKCOLUMNS_$Sids = ? AND templet_id = ?---------------PK_$PS_$SETS			ss.setNext(ids);
			ss.setNext(templet_id);
---------------COLUMN_$PARAMETERSis_finish = ?, args = ?, type = ?, paths = ?, indexs = ?---------------PS_$SETS_$UPDATE			ss.setNext(mmo.getIsFinish());
			ss.setNext(mmo.getArgs());
			ss.setNext(mmo.getType());
			ss.setNext(mmo.getPaths());
			ss.setNext(mmo.getIndexs());
			ss.setNext(mmo.getIds());
			ss.setNext(mmo.getTempletId());
---------------TABLE_$NAMEmission_map---------------PK_$COLUMNSids = ? AND templet_id = ?---------------DELETE_$SETS			ss.setNext(mmo.getIds());
			ss.setNext(mmo.getTempletId());
---------------CLASS_$PARAMETERmmo---------------RS_$GETS		mmo.setIds(rs.getString("ids"));		
		mmo.setTempletId(rs.getInt("templet_id"));		
		mmo.setIsFinish(rs.getBoolean("is_finish"));		
		mmo.setArgs(rs.getString("args"));		
		mmo.setType(rs.getInt("type"));		
		mmo.setPaths(rs.getInt("paths"));		
		mmo.setIndexs(rs.getInt("indexs"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL2---------------KE$YSString, Integer, ---------------KEY_$COLUMN_$NAMEids---------------CACHE_$DEFINECACHE_DEFINE---------------String, Integer, _$GETTERSString, Integer, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAids, templet_id---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<MissionMap> findByIds(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE ids = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByTempletId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE templet_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByIsFinish(Boolean o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE is_finish = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByArgs(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE args = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByType(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE type = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByPaths(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE paths = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByIndexs(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE indexs = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<MissionMap> findByIds(String o);
		public List<MissionMap> findByTempletId(Integer o);
		public List<MissionMap> findByIsFinish(Boolean o);
		public List<MissionMap> findByArgs(String o);
		public List<MissionMap> findByType(Integer o);
		public List<MissionMap> findByPaths(Integer o);
		public List<MissionMap> findByIndexs(Integer o);
--------------DAO2_$		public List<MissionMap> findByIds(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE ids = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByTempletId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE templet_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByIsFinish(Boolean o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE is_finish = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByArgs(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE args = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByType(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE type = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByPaths(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE paths = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<MissionMap> findByIndexs(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<MissionMap> ls = new ArrayList<MissionMap>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM mission_map WHERE indexs = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<MissionMap> findByIds(String o) {		List<MissionMap> all = dao.findByIds(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getIds())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByTempletId(Integer o) {		List<MissionMap> all = dao.findByTempletId(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getTempletId())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByIsFinish(Boolean o) {		List<MissionMap> all = dao.findByIsFinish(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getIsFinish())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByArgs(String o) {		List<MissionMap> all = dao.findByArgs(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getArgs())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByType(Integer o) {		List<MissionMap> all = dao.findByType(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getType())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByPaths(Integer o) {		List<MissionMap> all = dao.findByPaths(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getPaths())) {				all.add(mmo);			}		}		return all;	}	
	@Override	public List<MissionMap> findByIndexs(Integer o) {		List<MissionMap> all = dao.findByIndexs(o);		for (MissionMap mmo : cache.values()) {			if(equals(o, mmo.getIndexs())) {				all.add(mmo);			}		}		return all;	}	
*/