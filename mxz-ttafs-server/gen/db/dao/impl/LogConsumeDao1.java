package db.dao.impl;import java.util.List;import java.util.ArrayList;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.Timestamp;import java.sql.SQLException;import db.domain.LogConsume;import cn.javaplus.util.Closer;import java.sql.Connection;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.util.Util;import db.domain.*;import java.sql.Blob;import java.sql.Date;import java.sql.Time;//这一版本的Dao, 是第一版本的Dao, 不带任何缓存//该文件自动生成, 禁止手动修改!public class LogConsumeDao1 implements LogConsumeDao{class StatementSetter {		private PreparedStatement ps;		private int index = 1;		public StatementSetter(PreparedStatement ps) {			this.ps = ps;		}		void setNext(Integer value) throws SQLException {			ps.setInt(index++, value);		}		void setNext(Byte value) throws SQLException {			ps.setByte(index++, value);		}		void setNext(Blob value) throws SQLException {			ps.setBlob(index++, value);		}		void setNext(Short value) throws SQLException {			ps.setShort(index++, value);		}		void setNext(String value) throws SQLException {			ps.setString(index++, value);		}		void setNext(Float value) throws SQLException {			ps.setFloat(index++, value);		}		void setNext(byte[] value) throws SQLException {			ps.setBytes(index++, value);		}		void setNext(Boolean value) throws SQLException {			ps.setBoolean(index++, value);		}		void setNext(Date value) throws SQLException {			Timestamp tttt = new Timestamp(value.getTime());			ps.setTimestamp(index++, tttt);		}		void setNext(Timestamp value) throws SQLException {			ps.setTimestamp(index++, value);		}		void setNext(Long value) throws SQLException {			ps.setLong(index++, value);		}		void setNext(Double value) throws SQLException {			ps.setDouble(index++, value);		}		void setNext(Time value) throws SQLException {			ps.setTime(index++, value);		}		void setNext(Object value) throws SQLException {			if (value == null) {				throw new NullPointerException("不能为null");			}						if (value instanceof Integer) {				setNext((Integer) value);			} else if (value instanceof Byte) {				setNext((Byte) value);			} else if (value instanceof Blob) {				setNext((Blob) value);			} else if (value instanceof Short) {				setNext((Short) value);			} else if (value instanceof String) {				setNext((String) value);			} else if (value instanceof Float) {				setNext((Float) value);			} else if (value instanceof byte[]) {				setNext((byte[]) value);			} else if (value instanceof Boolean) {				setNext((Boolean) value);			} else if (value instanceof Date) {				Date date = (Date) value;				Timestamp tttt = new Timestamp(date.getTime());				setNext(tttt);			} else if (value instanceof Long) {				setNext((Long) value);			} else if (value instanceof Double) {				setNext((Double) value);			} else if (value instanceof Time) {				setNext((Time) value);			} else {				throw new RuntimeException("无法识别的类型:" + value.getClass());			}		}		public void addBatch() throws SQLException {			index = 1;			ps.addBatch();		}	}		private ConnectionFetcher	fetcher;	public LogConsumeDao1(ConnectionFetcher fetcher) {		this.fetcher = fetcher;	}	private static boolean hasLog = db.dao.impl.DBConfig.hasLog;	public void add(LogConsume lco) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "INSERT INTO log_consume (log_id, uname, nick, time, cash_count, jin_bei_ke_count, gold_count, comment) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);				ss.setNext(lco.getLogId());
				ss.setNext(lco.getUname());
				ss.setNext(lco.getNick());
				ss.setNext(lco.getTime());
				ss.setNext(lco.getCashCount());
				ss.setNext(lco.getJinBeiKeCount());
				ss.setNext(lco.getGoldCount());
				ss.setNext(lco.getComment());
			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public void addAll(List<LogConsume> lcos) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "INSERT INTO log_consume (log_id, uname, nick, time, cash_count, jin_bei_ke_count, gold_count, comment) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for (LogConsume lco : lcos) {				ss.setNext(lco.getLogId());
				ss.setNext(lco.getUname());
				ss.setNext(lco.getNick());
				ss.setNext(lco.getTime());
				ss.setNext(lco.getCashCount());
				ss.setNext(lco.getJinBeiKeCount());
				ss.setNext(lco.getGoldCount());
				ss.setNext(lco.getComment());
				ss.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void delete(Integer log_id) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM log_consume WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(log_id);
			ps.executeUpdate();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void update(LogConsume lco) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE log_consume SET uname = ?, nick = ?, time = ?, cash_count = ?, jin_bei_ke_count = ?, gold_count = ?, comment = ? WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(lco.getUname());
			ss.setNext(lco.getNick());
			ss.setNext(lco.getTime());
			ss.setNext(lco.getCashCount());
			ss.setNext(lco.getJinBeiKeCount());
			ss.setNext(lco.getGoldCount());
			ss.setNext(lco.getComment());
			ss.setNext(lco.getLogId());
			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void update(List<LogConsume> lcos) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE log_consume SET uname = ?, nick = ?, time = ?, cash_count = ?, jin_bei_ke_count = ?, gold_count = ?, comment = ? WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for(LogConsume lco: lcos) {			ss.setNext(lco.getUname());
			ss.setNext(lco.getNick());
			ss.setNext(lco.getTime());
			ss.setNext(lco.getCashCount());
			ss.setNext(lco.getJinBeiKeCount());
			ss.setNext(lco.getGoldCount());
			ss.setNext(lco.getComment());
			ss.setNext(lco.getLogId());
				ss.addBatch();			}			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void delete(List<LogConsume> lcos) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM log_consume WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for (LogConsume lco : lcos) {			ss.setNext(lco.getLogId());
				ss.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void delete(LogConsume lco) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection c = fetcher.getConnection();		try {			String sql = "DELETE FROM log_consume WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(lco.getLogId());
			ps.executeUpdate();			if(hasLog)				System.out.println(sql); 		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}			public void save(LogConsume lco) {	PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "REPLACE INTO log_consume (log_id, uname, nick, time, cash_count, jin_bei_ke_count, gold_count, comment) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);				ss.setNext(lco.getLogId());
				ss.setNext(lco.getUname());
				ss.setNext(lco.getNick());
				ss.setNext(lco.getTime());
				ss.setNext(lco.getCashCount());
				ss.setNext(lco.getJinBeiKeCount());
				ss.setNext(lco.getGoldCount());
				ss.setNext(lco.getComment());
			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}	public void save(List<LogConsume> lcos) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "REPLACE INTO log_consume (log_id, uname, nick, time, cash_count, jin_bei_ke_count, gold_count, comment) "					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			for (LogConsume lco : lcos) {				ss.setNext(lco.getLogId());
				ss.setNext(lco.getUname());
				ss.setNext(lco.getNick());
				ss.setNext(lco.getTime());
				ss.setNext(lco.getCashCount());
				ss.setNext(lco.getJinBeiKeCount());
				ss.setNext(lco.getGoldCount());
				ss.setNext(lco.getComment());
				ss.addBatch();			}			ps.executeBatch();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public LogConsume get(Integer log_id) {		PreparedStatement ps = null;		ResultSet rs = null;		LogConsume lco = null;		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(log_id);
			rs = ps.executeQuery();			while (rs.next()) {			lco = mapping(rs);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return lco;	}		public List<LogConsume> getAll() {		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> lcos = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				LogConsume lco = new LogConsumeImpl();				lco = mapping(rs);				lcos.add(lco);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return lcos;	}	public int getCount() {		PreparedStatement ps = null; 		ResultSet rs = null;		int count = 0;		Connection c = fetcher.getConnection(); 		try {			String sql = "SELECT COUNT(*) FROM log_consume";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				count =  rs.getInt(1);			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally { 			Closer.close(rs, ps, c);		} 		return count; 	}	private LogConsume mapping(ResultSet rs) throws SQLException {		LogConsume lco = new LogConsumeImpl();		lco.setLogId(rs.getInt("log_id"));		
		lco.setUname(rs.getString("uname"));		
		lco.setNick(rs.getString("nick"));		
		lco.setTime(rs.getInt("time"));		
		lco.setCashCount(rs.getInt("cash_count"));		
		lco.setJinBeiKeCount(rs.getInt("jin_bei_ke_count"));		
		lco.setGoldCount(rs.getInt("gold_count"));		
		lco.setComment(rs.getString("comment"));		return lco;	}/*		public List<LogConsume> findBy(String field, String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE " + field + " = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}*/		public List<LogConsume> findByLogId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE log_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findByNick(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE nick = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findByTime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findByCashCount(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE cash_count = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findByJinBeiKeCount(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE jin_bei_ke_count = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findByGoldCount(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE gold_count = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findByComment(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE comment = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<LogConsume> findBy(String field, String o, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE " + field + " = ? limit ?";			ps = c.prepareStatement(sql);						StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			ss.setNext(limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public LogConsume createDTO() {		return new LogConsumeImpl();	}		public void clear() {		PreparedStatement ps = null;		Connection c = fetcher.getConnection(); 		try {			String sql = "DELETE FROM log_consume";			ps = c.prepareStatement(sql);			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(ps, c);		}	}	public void update(String fieldName, Object value) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection c = fetcher.getConnection();		try {			String sql = "UPDATE log_consume SET " + fieldName + " = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(value);			ps.executeUpdate();			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}	}		public List<LogConsume> findBy(String field, String symbol, String o, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE " + field + " " + symbol + " ? LIMIT ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			ss.setNext(limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public List<LogConsume> findWhere(String where){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE " + where + ";";			ps = c.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}		public List<LogConsume> findByScope(String field, int min, int max, int limit){		PreparedStatement ps = null;		ResultSet rs = null;		List<LogConsume> ls = new ArrayList<LogConsume>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM log_consume WHERE " + field + " >= ? AND " + field + " <= ? LIMIT ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(min);			ss.setNext(max);			ss.setNext(limit);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}}