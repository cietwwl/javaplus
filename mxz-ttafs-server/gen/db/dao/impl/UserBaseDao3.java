package db.dao.impl;import java.util.List;import db.domain.UserBase;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class UserBaseDao3 extends UserBaseDao1 {	private static Cache1<String, UserBase> cache = new Cache1Impl<String, UserBase>();	public static Cache1<String, UserBase> getCache() { return cache; }	UserBaseDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(UserBase ubo) {		if(ubo == null) {			throw new NullPointerException();		}		super.add(ubo);		cache.put(ubo.getUname(), ubo);	}		public void addAll(List<UserBase> ubos) {		for(UserBase ubo : ubos) {			if(ubo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(ubos);		for(UserBase ubo : ubos) {			cache.put(ubo.getUname(), ubo);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(UserBase ubo) {		super.delete(ubo);		cache.delete(ubo.getUname());	}	public void delete(List<UserBase> ubos) {		for(UserBase ubo : ubos) {			delete(ubo);		}	}	public void update(UserBase ubo) {		if(ubo == null) {			throw new NullPointerException();		}		super.update(ubo);		cache.put(ubo.getUname(), ubo);	}	public void save(UserBase ubo) {		if(ubo == null) {			throw new NullPointerException();		}		super.save(ubo);		cache.put(ubo.getUname(), ubo);	}		public void save(List<UserBase> ubos) {		for(UserBase ubo : ubos) {			save(ubo);		}	}	public void update(List<UserBase> ubos) {		for(UserBase ubo : ubos) {			update(ubo);		}	}	public UserBase get(String uname) {		UserBase ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<UserBase> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<UserBase> all = super.getAll();			for (UserBase ubo : all) {				cache.put(ubo.getUname(), ubo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}