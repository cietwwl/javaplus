package db.dao.impl;import java.util.List;import db.domain.Presents;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class PresentsDao3 extends PresentsDao1 {	private static Cache1<String, Presents> cache = new Cache1Impl<String, Presents>();	public static Cache1<String, Presents> getCache() { return cache; }	PresentsDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(Presents po) {		if(po == null) {			throw new NullPointerException();		}		super.add(po);		cache.put(po.getUname(), po);	}		public void addAll(List<Presents> pos) {		for(Presents po : pos) {			if(po == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(pos);		for(Presents po : pos) {			cache.put(po.getUname(), po);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(Presents po) {		super.delete(po);		cache.delete(po.getUname());	}	public void delete(List<Presents> pos) {		for(Presents po : pos) {			delete(po);		}	}	public void update(Presents po) {		if(po == null) {			throw new NullPointerException();		}		super.update(po);		cache.put(po.getUname(), po);	}	public void save(Presents po) {		if(po == null) {			throw new NullPointerException();		}		super.save(po);		cache.put(po.getUname(), po);	}		public void save(List<Presents> pos) {		for(Presents po : pos) {			save(po);		}	}	public void update(List<Presents> pos) {		for(Presents po : pos) {			update(po);		}	}	public Presents get(String uname) {		Presents ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<Presents> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<Presents> all = super.getAll();			for (Presents po : all) {				cache.put(po.getUname(), po);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}