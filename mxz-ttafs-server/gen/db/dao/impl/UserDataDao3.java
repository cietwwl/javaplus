package db.dao.impl;import java.util.List;import db.domain.UserData;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class UserDataDao3 extends UserDataDao1 {	private static Cache1<String, UserData> cache = new Cache1Impl<String, UserData>();	public static Cache1<String, UserData> getCache() { return cache; }	UserDataDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(UserData udo) {		if(udo == null) {			throw new NullPointerException();		}		super.add(udo);		cache.put(udo.getUname(), udo);	}		public void addAll(List<UserData> udos) {		for(UserData udo : udos) {			if(udo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(udos);		for(UserData udo : udos) {			cache.put(udo.getUname(), udo);		}	}		public void delete(String uname) {		super.delete(uname);		cache.delete(uname);	}	public void delete(UserData udo) {		super.delete(udo);		cache.delete(udo.getUname());	}	public void delete(List<UserData> udos) {		for(UserData udo : udos) {			delete(udo);		}	}	public void update(UserData udo) {		if(udo == null) {			throw new NullPointerException();		}		super.update(udo);		cache.put(udo.getUname(), udo);	}	public void save(UserData udo) {		if(udo == null) {			throw new NullPointerException();		}		super.save(udo);		cache.put(udo.getUname(), udo);	}		public void save(List<UserData> udos) {		for(UserData udo : udos) {			save(udo);		}	}	public void update(List<UserData> udos) {		for(UserData udo : udos) {			update(udo);		}	}	public UserData get(String uname) {		UserData ooo = cache.get(uname);		if(ooo == null) {			ooo = super.get(uname);			if(ooo != null) {				cache.put(uname, ooo);			}		}		return ooo;	}		public List<UserData> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<UserData> all = super.getAll();			for (UserData udo : all) {				cache.put(udo.getUname(), udo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}