package db.dao.impl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import cn.javaplus.exception.SQLRuntimeException;import cn.javaplus.exception.UnrealizedFunctionException;import cn.javaplus.util.Closer;import com.lemon.commons.database.ConnectionFetcher;import db.domain.TServerStartTime;/** * 该文件自动生成, 禁止手动修改! */public class TServerStartTimeDAOImpl  {	private ConnectionFetcher	fetcher;	public TServerStartTimeDAOImpl(ConnectionFetcher fetcher) {		this.fetcher = fetcher;	}	public void add(TServerStartTime tssto) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection connection = null;		try {			String sql = "insert into t_server_start_time (server_id, start_server_time) "					+ "values (?, ?)";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			ps.setString(1, tssto.getServerId());			ps.setString(2, tssto.getStartServerTime());			ps.executeUpdate();		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps);			Closer.close(connection);		}	}		public void addAll(List<TServerStartTime> tsstos) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection connection = null;		try {			String sql = "insert into t_server_start_time (server_id, start_server_time) "					+ "values (?, ?)";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			for (TServerStartTime tssto : tsstos) {				ps.setString(1, tssto.getServerId());			ps.setString(2, tssto.getStartServerTime());				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps);			Closer.close(connection);		}	}		public void delete(String server_id) {		ResultSet rs = null;		PreparedStatement ps = null;		Connection connection = null;		try {			String sql = "delete from t_server_start_time where server_id = ?";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			ps.setString(1, server_id);			ps.executeUpdate(); 		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps);			Closer.close(connection);		}	}		public void update(TServerStartTime tssto) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection connection = null;		try {			String sql = "update t_server_start_time set start_server_time = ? where server_id = ?";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			ps.setString(1, tssto.getStartServerTime());			ps.setString(2, tssto.getServerId());			ps.executeUpdate();		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps);			Closer.close(connection);		}	}		public TServerStartTime get(String server_id) {		PreparedStatement ps = null;		ResultSet rs = null;		Connection connection = null;		TServerStartTime tssto = null;		try {			String sql = "select * from t_server_start_time where server_id = ?";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			ps.setString(1, server_id);			rs = ps.executeQuery();			while (rs.next()) {			tssto = mapping(rs);			}		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps);			Closer.close(connection);		}		return tssto;	}		public List<TServerStartTime> getAll() {		PreparedStatement ps = null;		ResultSet rs = null;		Connection connection = null;		List<TServerStartTime> tsstos = new ArrayList<TServerStartTime>();		try {			String sql = "select * from t_server_start_time";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				TServerStartTime tssto = new TServerStartTime();				tssto = mapping(rs);				tsstos.add(tssto);			}		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps);			Closer.close(connection);		}		return tsstos;	}		public int getCount() {		PreparedStatement ps = null; 		ResultSet rs = null;		Connection connection = null;		int count = 0; 		try {			String sql = "select count(*) from t_server_start_time";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				count =  rs.getInt(1);			}		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally { 			Closer.close(rs, ps);			Closer.close(connection);		} 		return count; 	}	private TServerStartTime mapping(ResultSet rs) throws SQLException {		TServerStartTime tssto = new TServerStartTime();		tssto.setServerId(rs.getString("server_id"));		tssto.setStartServerTime(rs.getString("start_server_time"));		return tssto;	}		public List<TServerStartTime> findBy(String field, String o){		PreparedStatement ps = null;		ResultSet rs = null;		Connection connection = null;		List<TServerStartTime> ls = new ArrayList<TServerStartTime>();		try {			String sql = "select * from t_server_start_time where " + field + " = ?";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			ps.setString(1, o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(rs, ps);			Closer.close(connection);		}		return ls;	}		public TServerStartTime createDTO() {		return new TServerStartTime();	}		public void clear() {		PreparedStatement ps = null;		Connection connection = null; 		try {			String sql = "delete from t_server_start_time";			connection = fetcher.getConnection();			ps = connection.prepareStatement(sql);			ps.executeUpdate();		} catch (SQLException e) {			throw new SQLRuntimeException(e);		} finally {			Closer.close(ps);			Closer.close(connection);		}	}		public List<TServerStartTime> findBy(String field, String o, int limit) {		throw new UnrealizedFunctionException();	}		public void update(String fieldName, Object value) {		throw new UnrealizedFunctionException();	}		public List<TServerStartTime> findBy(String field, String symbol, String o, int limit) {		throw new UnrealizedFunctionException();	}		public List<TServerStartTime> findWhere(String where) {		throw new UnrealizedFunctionException();	}		public List<TServerStartTime> findByScope(String field, int min, int max, int limit) {		throw new UnrealizedFunctionException();	}}