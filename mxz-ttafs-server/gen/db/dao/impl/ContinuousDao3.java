package db.dao.impl;import java.util.List;import db.domain.Continuous;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class ContinuousDao3 extends ContinuousDao1 {	private static Cache2<Integer, String, Continuous> cache = new Cache2Impl<Integer, String, Continuous>();	public static Cache2<Integer, String, Continuous> getCache() { return cache; }	ContinuousDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(Continuous co) {		if(co == null) {			throw new NullPointerException();		}		super.add(co);		cache.put(co.getType(), co.getUname(), co);	}		public void addAll(List<Continuous> cos) {		for(Continuous co : cos) {			if(co == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(cos);		for(Continuous co : cos) {			cache.put(co.getType(), co.getUname(), co);		}	}		public void delete(Integer type, String uname) {		super.delete(type, uname);		cache.delete(type, uname);	}	public void delete(Continuous co) {		super.delete(co);		cache.delete(co.getType(),co.getUname());	}	public void delete(List<Continuous> cos) {		for(Continuous co : cos) {			delete(co);		}	}	public void update(Continuous co) {		if(co == null) {			throw new NullPointerException();		}		super.update(co);		cache.put(co.getType(), co.getUname(), co);	}	public void save(Continuous co) {		if(co == null) {			throw new NullPointerException();		}		super.save(co);		cache.put(co.getType(), co.getUname(), co);	}		public void save(List<Continuous> cos) {		for(Continuous co : cos) {			save(co);		}	}	public void update(List<Continuous> cos) {		for(Continuous co : cos) {			update(co);		}	}	public Continuous get(Integer type, String uname) {		Continuous ooo = cache.get(type, uname);		if(ooo == null) {			ooo = super.get(type, uname);			if(ooo != null) {				cache.put(type, uname, ooo);			}		}		return ooo;	}		public List<Continuous> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<Continuous> all = super.getAll();			for (Continuous co : all) {				cache.put(co.getType(), co.getUname(), co);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}