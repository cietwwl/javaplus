package db.dao.impl;import java.util.List;import db.domain.LogFindFighter;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class LogFindFighterDao3 extends LogFindFighterDao1 {	private static Cache1<Integer, LogFindFighter> cache = new Cache1Impl<Integer, LogFindFighter>();	public static Cache1<Integer, LogFindFighter> getCache() { return cache; }	LogFindFighterDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(LogFindFighter lffo) {		if(lffo == null) {			throw new NullPointerException();		}		super.add(lffo);		cache.put(lffo.getLogId(), lffo);	}		public void addAll(List<LogFindFighter> lffos) {		for(LogFindFighter lffo : lffos) {			if(lffo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(lffos);		for(LogFindFighter lffo : lffos) {			cache.put(lffo.getLogId(), lffo);		}	}		public void delete(Integer log_id) {		super.delete(log_id);		cache.delete(log_id);	}	public void delete(LogFindFighter lffo) {		super.delete(lffo);		cache.delete(lffo.getLogId());	}	public void delete(List<LogFindFighter> lffos) {		for(LogFindFighter lffo : lffos) {			delete(lffo);		}	}	public void update(LogFindFighter lffo) {		if(lffo == null) {			throw new NullPointerException();		}		super.update(lffo);		cache.put(lffo.getLogId(), lffo);	}	public void save(LogFindFighter lffo) {		if(lffo == null) {			throw new NullPointerException();		}		super.save(lffo);		cache.put(lffo.getLogId(), lffo);	}		public void save(List<LogFindFighter> lffos) {		for(LogFindFighter lffo : lffos) {			save(lffo);		}	}	public void update(List<LogFindFighter> lffos) {		for(LogFindFighter lffo : lffos) {			update(lffo);		}	}	public LogFindFighter get(Integer log_id) {		LogFindFighter ooo = cache.get(log_id);		if(ooo == null) {			ooo = super.get(log_id);			if(ooo != null) {				cache.put(log_id, ooo);			}		}		return ooo;	}		public List<LogFindFighter> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<LogFindFighter> all = super.getAll();			for (LogFindFighter lffo : all) {				cache.put(lffo.getLogId(), lffo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}