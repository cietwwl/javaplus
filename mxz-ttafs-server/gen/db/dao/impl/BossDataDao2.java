package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class BossDataDao2 implements BossDataDao {	private BossDataDao1 dao;		private static Cache<String, BossData> cache = new CacheImpl<String, BossData>();	BossDataDao2(ConnectionFetcher fetcher) {		dao = new BossDataDao1(fetcher);	}	void commitAllSafety() {			List<BossData> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(BossDataDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 BossData 数据量: " + values.size() + " [BossDataDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(BossDataDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 BossData 失败, 重新写入缓存, 数据量: " + values.size() + " [BossDataDao2]");			Logger.getLogger(BossDataDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(Integer boss_id) {		cache.remove(key(boss_id));		dao.delete(boss_id);	}		public void delete(List<BossData> bdos) {		for (BossData bdo : bdos) {			cache.remove(key(bdo.getBossId()));		}		dao.delete(bdos);	}		public void save(BossData bdo) {		cache.put(key(bdo.getBossId()), /*new BossDataImpl( */bdo/*)*/);	}		public BossData get(Integer boss_id) {		BossData bdo = cache.get(key(boss_id));		if(bdo == null) {			bdo = dao.get(boss_id);		}		return bdo;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<BossData> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<BossData> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public BossData createDTO() {		return new BossDataImpl();	}		@Deprecated	public List<BossData> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<BossData> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<BossData> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(BossData bdo) {		save(bdo);	}		public void addAll(List<BossData> bdos) {		save(bdos);	}	public void update(BossData bdo) {		save(bdo);	}		public void update(List<BossData> bdos) {		save(bdos);	}		public void delete(BossData bdo) {		delete(bdo.getBossId());	}	public List<BossData> getAll() {		List<BossData> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<BossData> bdos) {		for (BossData bdo : bdos) {			save(bdo);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<BossData> findByBossId(Integer o) {		List<BossData> all = dao.findByBossId(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getBossId())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByUname(String o) {		List<BossData> all = dao.findByUname(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getUname())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByBossTempletId(Integer o) {		List<BossData> all = dao.findByBossTempletId(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getBossTempletId())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByHp(Integer o) {		List<BossData> all = dao.findByHp(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getHp())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByLevel(Integer o) {		List<BossData> all = dao.findByLevel(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getLevel())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByMapId(Integer o) {		List<BossData> all = dao.findByMapId(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getMapId())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByKiller(String o) {		List<BossData> all = dao.findByKiller(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getKiller())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByFoundTime(Integer o) {		List<BossData> all = dao.findByFoundTime(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getFoundTime())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByIsShared(Boolean o) {		List<BossData> all = dao.findByIsShared(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getIsShared())) {				all.add(bdo);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsbdos---------------CLASS_$NAMEBossData---------------KS_$GETTERbdo.getBossId()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESboss_id, uname, boss_templet_id, hp, level, map_id, killer, found_time, is_shared---------------COLUMN_$?S?, ?, ?, ?, ?, ?, ?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(bdo.getBossId());
				ss.setNext(bdo.getUname());
				ss.setNext(bdo.getBossTempletId());
				ss.setNext(bdo.getHp());
				ss.setNext(bdo.getLevel());
				ss.setNext(bdo.getMapId());
				ss.setNext(bdo.getKiller());
				ss.setNext(bdo.getFoundTime());
				ss.setNext(bdo.getIsShared());
---------------PK_$PARAMETERInteger boss_id---------------PKCOLUMNS_$Sboss_id = ?---------------PK_$PS_$SETS			ss.setNext(boss_id);
---------------COLUMN_$PARAMETERSuname = ?, boss_templet_id = ?, hp = ?, level = ?, map_id = ?, killer = ?, found_time = ?, is_shared = ?---------------PS_$SETS_$UPDATE			ss.setNext(bdo.getUname());
			ss.setNext(bdo.getBossTempletId());
			ss.setNext(bdo.getHp());
			ss.setNext(bdo.getLevel());
			ss.setNext(bdo.getMapId());
			ss.setNext(bdo.getKiller());
			ss.setNext(bdo.getFoundTime());
			ss.setNext(bdo.getIsShared());
			ss.setNext(bdo.getBossId());
---------------TABLE_$NAMEboss_data---------------PK_$COLUMNSboss_id = ?---------------DELETE_$SETS			ss.setNext(bdo.getBossId());
---------------CLASS_$PARAMETERbdo---------------RS_$GETS		bdo.setBossId(rs.getInt("boss_id"));		
		bdo.setUname(rs.getString("uname"));		
		bdo.setBossTempletId(rs.getInt("boss_templet_id"));		
		bdo.setHp(rs.getInt("hp"));		
		bdo.setLevel(rs.getInt("level"));		
		bdo.setMapId(rs.getInt("map_id"));		
		bdo.setKiller(rs.getString("killer"));		
		bdo.setFoundTime(rs.getInt("found_time"));		
		bdo.setIsShared(rs.getBoolean("is_shared"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSInteger, ---------------KEY_$COLUMN_$NAMEboss_id---------------CACHE_$DEFINECACHE_DEFINE---------------Integer, _$GETTERSInteger, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAboss_id---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<BossData> findByBossId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE boss_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByBossTempletId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE boss_templet_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByHp(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE hp = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByLevel(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE level = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByMapId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE map_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByKiller(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE killer = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByFoundTime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE found_time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByIsShared(Boolean o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE is_shared = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<BossData> findByBossId(Integer o);
		public List<BossData> findByUname(String o);
		public List<BossData> findByBossTempletId(Integer o);
		public List<BossData> findByHp(Integer o);
		public List<BossData> findByLevel(Integer o);
		public List<BossData> findByMapId(Integer o);
		public List<BossData> findByKiller(String o);
		public List<BossData> findByFoundTime(Integer o);
		public List<BossData> findByIsShared(Boolean o);
--------------DAO2_$		public List<BossData> findByBossId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE boss_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByBossTempletId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE boss_templet_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByHp(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE hp = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByLevel(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE level = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByMapId(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE map_id = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByKiller(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE killer = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByFoundTime(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE found_time = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<BossData> findByIsShared(Boolean o){		PreparedStatement ps = null;		ResultSet rs = null;		List<BossData> ls = new ArrayList<BossData>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM boss_data WHERE is_shared = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<BossData> findByBossId(Integer o) {		List<BossData> all = dao.findByBossId(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getBossId())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByUname(String o) {		List<BossData> all = dao.findByUname(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getUname())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByBossTempletId(Integer o) {		List<BossData> all = dao.findByBossTempletId(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getBossTempletId())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByHp(Integer o) {		List<BossData> all = dao.findByHp(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getHp())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByLevel(Integer o) {		List<BossData> all = dao.findByLevel(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getLevel())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByMapId(Integer o) {		List<BossData> all = dao.findByMapId(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getMapId())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByKiller(String o) {		List<BossData> all = dao.findByKiller(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getKiller())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByFoundTime(Integer o) {		List<BossData> all = dao.findByFoundTime(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getFoundTime())) {				all.add(bdo);			}		}		return all;	}	
	@Override	public List<BossData> findByIsShared(Boolean o) {		List<BossData> all = dao.findByIsShared(o);		for (BossData bdo : cache.values()) {			if(equals(o, bdo.getIsShared())) {				all.add(bdo);			}		}		return all;	}	
*/