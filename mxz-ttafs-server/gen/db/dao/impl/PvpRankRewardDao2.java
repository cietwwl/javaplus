package db.dao.impl;//该类自动生成, 禁止手动修改//这一版本的Dao, 带写缓存import com.google.common.collect.Maps;import com.google.common.collect.Lists;import java.util.Map;import java.sql.Date;import java.util.List;import com.lemon.commons.database.ConnectionFetcher;import cn.javaplus.exception.MySQLNonTransientConnectionRuntimeExceptionJDBC4;import db.domain.*;import cn.javaplus.exception.SQLRuntimeException;import org.apache.log4j.Logger;import cn.javaplus.util.Util;import cn.javaplus.cache.Cache;import cn.javaplus.cache.CacheImpl;//该文件自动生成, 禁止手动修改!public class PvpRankRewardDao2 implements PvpRankRewardDao {	private PvpRankRewardDao1 dao;		private static Cache<String, PvpRankReward> cache = new CacheImpl<String, PvpRankReward>();	PvpRankRewardDao2(ConnectionFetcher fetcher) {		dao = new PvpRankRewardDao1(fetcher);	}	void commitAllSafety() {			List<PvpRankReward> values;				synchronized (cache) {			values = Lists.newArrayList(cache.values());			cache.clear();		}				if(values.isEmpty()) {			return;		}				try {			long time = System.currentTimeMillis();			dao.save(values);			if(!values.isEmpty()) {//				Logger.getLogger(PvpRankRewardDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 PvpRankReward 数据量: " + values.size() + " [PvpRankRewardDao2] [time = " + (System.currentTimeMillis() - time) + "]");			}				} catch (MySQLNonTransientConnectionRuntimeExceptionJDBC4 e) {			save(values);			Logger.getLogger(PvpRankRewardDao2.class).debug("线程:" + Thread.currentThread().getId() + " 批量提交 PvpRankReward 失败, 重新写入缓存, 数据量: " + values.size() + " [PvpRankRewardDao2]");			Logger.getLogger(PvpRankRewardDao2.class).error(e.getClass().getName() + ":" + e.getMessage());		} catch (Throwable e) {			e.printStackTrace();		}	}	private String key(Object... keys) {		return Util.Collection.linkWith(",", keys);	}	public void delete(String uname) {		cache.remove(key(uname));		dao.delete(uname);	}		public void delete(List<PvpRankReward> prros) {		for (PvpRankReward prro : prros) {			cache.remove(key(prro.getUname()));		}		dao.delete(prros);	}		public void save(PvpRankReward prro) {		cache.put(key(prro.getUname()), /*new PvpRankRewardImpl( */prro/*)*/);	}		public PvpRankReward get(String uname) {		PvpRankReward prro = cache.get(key(uname));		if(prro == null) {			prro = dao.get(uname);		}		return prro;	}	public int getCount() {		return dao.getCount() + cache.size(); 	}		public void clear() {		cache.clear();		dao.clear();	}	/*	@Deprecated 	public List<PvpRankReward> findBy(String field, String o) {		return dao.findBy(field, o);	}*/	@Deprecated	public List<PvpRankReward> findBy(String field, String o, int limit) {		return dao.findBy(field, o, limit);	}	public PvpRankReward createDTO() {		return new PvpRankRewardImpl();	}		@Deprecated	public List<PvpRankReward> findBy(String field, String symbol, String o, int limit) {		return dao.findBy(field, symbol, o, limit);	}	@Deprecated	public List<PvpRankReward> findWhere(String where) {		return dao.findWhere(where);	}		@Deprecated	public List<PvpRankReward> findByScope(String field, int min, int max, int limit) {		return dao.findByScope(field, min, max, limit);	}	public void add(PvpRankReward prro) {		save(prro);	}		public void addAll(List<PvpRankReward> prros) {		save(prros);	}	public void update(PvpRankReward prro) {		save(prro);	}		public void update(List<PvpRankReward> prros) {		save(prros);	}		public void delete(PvpRankReward prro) {		delete(prro.getUname());	}	public List<PvpRankReward> getAll() {		List<PvpRankReward> all = Lists.newArrayList(cache.values());		all.addAll(dao.getAll());		return all;	}	public void save(List<PvpRankReward> prros) {		for (PvpRankReward prro : prros) {			save(prro);		}	}		@Deprecated	public void update(String fieldName, Object value) {		dao.update(fieldName, value);	}		@Override	public List<PvpRankReward> findByUname(String o) {		List<PvpRankReward> all = dao.findByUname(o);		for (PvpRankReward prro : cache.values()) {			if(equals(o, prro.getUname())) {				all.add(prro);			}		}		return all;	}	
	@Override	public List<PvpRankReward> findByRank(Integer o) {		List<PvpRankReward> all = dao.findByRank(o);		for (PvpRankReward prro : cache.values()) {			if(equals(o, prro.getRank())) {				all.add(prro);			}		}		return all;	}	
	@Override	public List<PvpRankReward> findByHasReceive(Boolean o) {		List<PvpRankReward> all = dao.findByHasReceive(o);		for (PvpRankReward prro : cache.values()) {			if(equals(o, prro.getHasReceive())) {				all.add(prro);			}		}		return all;	}	
		private boolean equals(Object o1, Object o2) {		return o1.equals(o2);	}}/*CLASS_$PARAMETERsprros---------------CLASS_$NAMEPvpRankReward---------------KS_$GETTERprro.getUname()---------------PACKAGE_$NAMEdb---------------COLUMN_$NAMESuname, rank, has_receive---------------COLUMN_$?S?, ?, ?---------------PS_$SETS_$ADD				ss.setNext(prro.getUname());
				ss.setNext(prro.getRank());
				ss.setNext(prro.getHasReceive());
---------------PK_$PARAMETERString uname---------------PKCOLUMNS_$Suname = ?---------------PK_$PS_$SETS			ss.setNext(uname);
---------------COLUMN_$PARAMETERSrank = ?, has_receive = ?---------------PS_$SETS_$UPDATE			ss.setNext(prro.getRank());
			ss.setNext(prro.getHasReceive());
			ss.setNext(prro.getUname());
---------------TABLE_$NAMEpvp_rank_reward---------------PK_$COLUMNSuname = ?---------------DELETE_$SETS			ss.setNext(prro.getUname());
---------------CLASS_$PARAMETERprro---------------RS_$GETS		prro.setUname(rs.getString("uname"));		
		prro.setRank(rs.getInt("rank"));		
		prro.setHasReceive(rs.getBoolean("has_receive"));---------------PAGE_$SETS			ps.setInt(1, (pageNo - 1) * pageSize);
			ps.setInt(2, pageSize);
---------------TA$IL---------------KE$YSString, ---------------KEY_$COLUMN_$NAMEuname---------------CACHE_$DEFINECACHE_DEFINE---------------String, _$GETTERSString, _GETTERS---------------KEY$NAMES_LINK_BY_COMMAuname---------------KEY_$TYPE_1KEY_TYPE_1---------------KEY_$TYPE_2KEY_TYPE_2---------------FIN&DERS		public List<PvpRankReward> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<PvpRankReward> ls = new ArrayList<PvpRankReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp_rank_reward WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<PvpRankReward> findByRank(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<PvpRankReward> ls = new ArrayList<PvpRankReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp_rank_reward WHERE rank = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<PvpRankReward> findByHasReceive(Boolean o){		PreparedStatement ps = null;		ResultSet rs = null;		List<PvpRankReward> ls = new ArrayList<PvpRankReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp_rank_reward WHERE has_receive = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
--------------UPPER_$FNAMEUPPER_FNAME--------------FILED_&NAME_IN_TABLEFILED_NAME_IN_TABLE--------------PACKAGE_$FTYPEPACKAGE_FTYPE--------------UPPER_$FTYPEUPPER_FTYPE--------------INTERFAC_$FINDS		public List<PvpRankReward> findByUname(String o);
		public List<PvpRankReward> findByRank(Integer o);
		public List<PvpRankReward> findByHasReceive(Boolean o);
--------------DAO2_$		public List<PvpRankReward> findByUname(String o){		PreparedStatement ps = null;		ResultSet rs = null;		List<PvpRankReward> ls = new ArrayList<PvpRankReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp_rank_reward WHERE uname = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<PvpRankReward> findByRank(Integer o){		PreparedStatement ps = null;		ResultSet rs = null;		List<PvpRankReward> ls = new ArrayList<PvpRankReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp_rank_reward WHERE rank = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
		public List<PvpRankReward> findByHasReceive(Boolean o){		PreparedStatement ps = null;		ResultSet rs = null;		List<PvpRankReward> ls = new ArrayList<PvpRankReward>();		Connection c = fetcher.getConnection();		try {			String sql = "SELECT * FROM pvp_rank_reward WHERE has_receive = ?";			ps = c.prepareStatement(sql);			StatementSetter ss = new StatementSetter(ps);			ss.setNext(o);			rs = ps.executeQuery();			while (rs.next()) {				ls.add(mapping(rs));			}			if(hasLog)				System.out.println(sql);		} catch (SQLException e) {			throw Util.Exception.toRuntimeException(e);		} finally {			Closer.close(rs, ps, c);		}		return ls;	}
	@Override	public List<PvpRankReward> findByUname(String o) {		List<PvpRankReward> all = dao.findByUname(o);		for (PvpRankReward prro : cache.values()) {			if(equals(o, prro.getUname())) {				all.add(prro);			}		}		return all;	}	
	@Override	public List<PvpRankReward> findByRank(Integer o) {		List<PvpRankReward> all = dao.findByRank(o);		for (PvpRankReward prro : cache.values()) {			if(equals(o, prro.getRank())) {				all.add(prro);			}		}		return all;	}	
	@Override	public List<PvpRankReward> findByHasReceive(Boolean o) {		List<PvpRankReward> all = dao.findByHasReceive(o);		for (PvpRankReward prro : cache.values()) {			if(equals(o, prro.getHasReceive())) {				all.add(prro);			}		}		return all;	}	
*/