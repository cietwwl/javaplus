package db.dao.impl;import java.util.List;import db.domain.BossData;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class BossDataDao3 extends BossDataDao1 {	private static Cache1<Integer, BossData> cache = new Cache1Impl<Integer, BossData>();	public static Cache1<Integer, BossData> getCache() { return cache; }	BossDataDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(BossData bdo) {		if(bdo == null) {			throw new NullPointerException();		}		super.add(bdo);		cache.put(bdo.getBossId(), bdo);	}		public void addAll(List<BossData> bdos) {		for(BossData bdo : bdos) {			if(bdo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(bdos);		for(BossData bdo : bdos) {			cache.put(bdo.getBossId(), bdo);		}	}		public void delete(Integer boss_id) {		super.delete(boss_id);		cache.delete(boss_id);	}	public void delete(BossData bdo) {		super.delete(bdo);		cache.delete(bdo.getBossId());	}	public void delete(List<BossData> bdos) {		for(BossData bdo : bdos) {			delete(bdo);		}	}	public void update(BossData bdo) {		if(bdo == null) {			throw new NullPointerException();		}		super.update(bdo);		cache.put(bdo.getBossId(), bdo);	}	public void save(BossData bdo) {		if(bdo == null) {			throw new NullPointerException();		}		super.save(bdo);		cache.put(bdo.getBossId(), bdo);	}		public void save(List<BossData> bdos) {		for(BossData bdo : bdos) {			save(bdo);		}	}	public void update(List<BossData> bdos) {		for(BossData bdo : bdos) {			update(bdo);		}	}	public BossData get(Integer boss_id) {		BossData ooo = cache.get(boss_id);		if(ooo == null) {			ooo = super.get(boss_id);			if(ooo != null) {				cache.put(boss_id, ooo);			}		}		return ooo;	}		public List<BossData> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<BossData> all = super.getAll();			for (BossData bdo : all) {				cache.put(bdo.getBossId(), bdo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}