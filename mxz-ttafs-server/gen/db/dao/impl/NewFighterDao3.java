package db.dao.impl;import java.util.List;import db.domain.NewFighter;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class NewFighterDao3 extends NewFighterDao1 {	private static Cache2<Integer, String, NewFighter> cache = new Cache2Impl<Integer, String, NewFighter>();	public static Cache2<Integer, String, NewFighter> getCache() { return cache; }	NewFighterDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(NewFighter nfo) {		if(nfo == null) {			throw new NullPointerException();		}		super.add(nfo);		cache.put(nfo.getTypeId(), nfo.getUname(), nfo);	}		public void addAll(List<NewFighter> nfos) {		for(NewFighter nfo : nfos) {			if(nfo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(nfos);		for(NewFighter nfo : nfos) {			cache.put(nfo.getTypeId(), nfo.getUname(), nfo);		}	}		public void delete(Integer type_id, String uname) {		super.delete(type_id, uname);		cache.delete(type_id, uname);	}	public void delete(NewFighter nfo) {		super.delete(nfo);		cache.delete(nfo.getTypeId(),nfo.getUname());	}	public void delete(List<NewFighter> nfos) {		for(NewFighter nfo : nfos) {			delete(nfo);		}	}	public void update(NewFighter nfo) {		if(nfo == null) {			throw new NullPointerException();		}		super.update(nfo);		cache.put(nfo.getTypeId(), nfo.getUname(), nfo);	}	public void save(NewFighter nfo) {		if(nfo == null) {			throw new NullPointerException();		}		super.save(nfo);		cache.put(nfo.getTypeId(), nfo.getUname(), nfo);	}		public void save(List<NewFighter> nfos) {		for(NewFighter nfo : nfos) {			save(nfo);		}	}	public void update(List<NewFighter> nfos) {		for(NewFighter nfo : nfos) {			update(nfo);		}	}	public NewFighter get(Integer type_id, String uname) {		NewFighter ooo = cache.get(type_id, uname);		if(ooo == null) {			ooo = super.get(type_id, uname);			if(ooo != null) {				cache.put(type_id, uname, ooo);			}		}		return ooo;	}		public List<NewFighter> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<NewFighter> all = super.getAll();			for (NewFighter nfo : all) {				cache.put(nfo.getTypeId(), nfo.getUname(), nfo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}