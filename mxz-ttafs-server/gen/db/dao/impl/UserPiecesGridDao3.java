package db.dao.impl;import java.util.List;import db.domain.UserPiecesGrid;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class UserPiecesGridDao3 extends UserPiecesGridDao1 {	private static Cache2<Integer, String, UserPiecesGrid> cache = new Cache2Impl<Integer, String, UserPiecesGrid>();	public static Cache2<Integer, String, UserPiecesGrid> getCache() { return cache; }	UserPiecesGridDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(UserPiecesGrid upgo) {		if(upgo == null) {			throw new NullPointerException();		}		super.add(upgo);		cache.put(upgo.getGridId(), upgo.getUname(), upgo);	}		public void addAll(List<UserPiecesGrid> upgos) {		for(UserPiecesGrid upgo : upgos) {			if(upgo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(upgos);		for(UserPiecesGrid upgo : upgos) {			cache.put(upgo.getGridId(), upgo.getUname(), upgo);		}	}		public void delete(Integer grid_id, String uname) {		super.delete(grid_id, uname);		cache.delete(grid_id, uname);	}	public void delete(UserPiecesGrid upgo) {		super.delete(upgo);		cache.delete(upgo.getGridId(),upgo.getUname());	}	public void delete(List<UserPiecesGrid> upgos) {		for(UserPiecesGrid upgo : upgos) {			delete(upgo);		}	}	public void update(UserPiecesGrid upgo) {		if(upgo == null) {			throw new NullPointerException();		}		super.update(upgo);		cache.put(upgo.getGridId(), upgo.getUname(), upgo);	}	public void save(UserPiecesGrid upgo) {		if(upgo == null) {			throw new NullPointerException();		}		super.save(upgo);		cache.put(upgo.getGridId(), upgo.getUname(), upgo);	}		public void save(List<UserPiecesGrid> upgos) {		for(UserPiecesGrid upgo : upgos) {			save(upgo);		}	}	public void update(List<UserPiecesGrid> upgos) {		for(UserPiecesGrid upgo : upgos) {			update(upgo);		}	}	public UserPiecesGrid get(Integer grid_id, String uname) {		UserPiecesGrid ooo = cache.get(grid_id, uname);		if(ooo == null) {			ooo = super.get(grid_id, uname);			if(ooo != null) {				cache.put(grid_id, uname, ooo);			}		}		return ooo;	}		public List<UserPiecesGrid> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<UserPiecesGrid> all = super.getAll();			for (UserPiecesGrid upgo : all) {				cache.put(upgo.getGridId(), upgo.getUname(), upgo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}