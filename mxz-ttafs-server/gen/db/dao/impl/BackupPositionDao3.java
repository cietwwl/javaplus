package db.dao.impl;import java.util.List;import db.domain.BackupPosition;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class BackupPositionDao3 extends BackupPositionDao1 {	private static Cache2<Integer, String, BackupPosition> cache = new Cache2Impl<Integer, String, BackupPosition>();	public static Cache2<Integer, String, BackupPosition> getCache() { return cache; }	BackupPositionDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(BackupPosition bpo) {		if(bpo == null) {			throw new NullPointerException();		}		super.add(bpo);		cache.put(bpo.getPosition(), bpo.getUname(), bpo);	}		public void addAll(List<BackupPosition> bpos) {		for(BackupPosition bpo : bpos) {			if(bpo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(bpos);		for(BackupPosition bpo : bpos) {			cache.put(bpo.getPosition(), bpo.getUname(), bpo);		}	}		public void delete(Integer position, String uname) {		super.delete(position, uname);		cache.delete(position, uname);	}	public void delete(BackupPosition bpo) {		super.delete(bpo);		cache.delete(bpo.getPosition(),bpo.getUname());	}	public void delete(List<BackupPosition> bpos) {		for(BackupPosition bpo : bpos) {			delete(bpo);		}	}	public void update(BackupPosition bpo) {		if(bpo == null) {			throw new NullPointerException();		}		super.update(bpo);		cache.put(bpo.getPosition(), bpo.getUname(), bpo);	}	public void save(BackupPosition bpo) {		if(bpo == null) {			throw new NullPointerException();		}		super.save(bpo);		cache.put(bpo.getPosition(), bpo.getUname(), bpo);	}		public void save(List<BackupPosition> bpos) {		for(BackupPosition bpo : bpos) {			save(bpo);		}	}	public void update(List<BackupPosition> bpos) {		for(BackupPosition bpo : bpos) {			update(bpo);		}	}	public BackupPosition get(Integer position, String uname) {		BackupPosition ooo = cache.get(position, uname);		if(ooo == null) {			ooo = super.get(position, uname);			if(ooo != null) {				cache.put(position, uname, ooo);			}		}		return ooo;	}		public List<BackupPosition> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<BackupPosition> all = super.getAll();			for (BackupPosition bpo : all) {				cache.put(bpo.getPosition(), bpo.getUname(), bpo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}