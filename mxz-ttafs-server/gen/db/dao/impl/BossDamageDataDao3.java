package db.dao.impl;import java.util.List;import db.domain.BossDamageData;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class BossDamageDataDao3 extends BossDamageDataDao1 {	private static Cache2<Integer, String, BossDamageData> cache = new Cache2Impl<Integer, String, BossDamageData>();	public static Cache2<Integer, String, BossDamageData> getCache() { return cache; }	BossDamageDataDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(BossDamageData bddo) {		if(bddo == null) {			throw new NullPointerException();		}		super.add(bddo);		cache.put(bddo.getBossId(), bddo.getChallengerId(), bddo);	}		public void addAll(List<BossDamageData> bddos) {		for(BossDamageData bddo : bddos) {			if(bddo == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(bddos);		for(BossDamageData bddo : bddos) {			cache.put(bddo.getBossId(), bddo.getChallengerId(), bddo);		}	}		public void delete(Integer boss_id, String challenger_id) {		super.delete(boss_id, challenger_id);		cache.delete(boss_id, challenger_id);	}	public void delete(BossDamageData bddo) {		super.delete(bddo);		cache.delete(bddo.getBossId(),bddo.getChallengerId());	}	public void delete(List<BossDamageData> bddos) {		for(BossDamageData bddo : bddos) {			delete(bddo);		}	}	public void update(BossDamageData bddo) {		if(bddo == null) {			throw new NullPointerException();		}		super.update(bddo);		cache.put(bddo.getBossId(), bddo.getChallengerId(), bddo);	}	public void save(BossDamageData bddo) {		if(bddo == null) {			throw new NullPointerException();		}		super.save(bddo);		cache.put(bddo.getBossId(), bddo.getChallengerId(), bddo);	}		public void save(List<BossDamageData> bddos) {		for(BossDamageData bddo : bddos) {			save(bddo);		}	}	public void update(List<BossDamageData> bddos) {		for(BossDamageData bddo : bddos) {			update(bddo);		}	}	public BossDamageData get(Integer boss_id, String challenger_id) {		BossDamageData ooo = cache.get(boss_id, challenger_id);		if(ooo == null) {			ooo = super.get(boss_id, challenger_id);			if(ooo != null) {				cache.put(boss_id, challenger_id, ooo);			}		}		return ooo;	}		public List<BossDamageData> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<BossDamageData> all = super.getAll();			for (BossDamageData bddo : all) {				cache.put(bddo.getBossId(), bddo.getChallengerId(), bddo);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}