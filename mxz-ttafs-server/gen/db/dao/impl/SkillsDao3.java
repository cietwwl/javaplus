package db.dao.impl;import java.util.List;import db.domain.Skills;import com.lemon.commons.database.ConnectionFetcher;import java.sql.Connection;import db.domain.*;//带读缓存public class SkillsDao3 extends SkillsDao1 {	private static Cache2<Integer, String, Skills> cache = new Cache2Impl<Integer, String, Skills>();	public static Cache2<Integer, String, Skills> getCache() { return cache; }	SkillsDao3(ConnectionFetcher fetcher) {		super(fetcher);	}	public void add(Skills skillso) {		if(skillso == null) {			throw new NullPointerException();		}		super.add(skillso);		cache.put(skillso.getIds(), skillso.getUname(), skillso);	}		public void addAll(List<Skills> skillsos) {		for(Skills skillso : skillsos) {			if(skillso == null) {				throw new NullPointerException("列表中包含空元素!");			}		}		super.addAll(skillsos);		for(Skills skillso : skillsos) {			cache.put(skillso.getIds(), skillso.getUname(), skillso);		}	}		public void delete(Integer ids, String uname) {		super.delete(ids, uname);		cache.delete(ids, uname);	}	public void delete(Skills skillso) {		super.delete(skillso);		cache.delete(skillso.getIds(),skillso.getUname());	}	public void delete(List<Skills> skillsos) {		for(Skills skillso : skillsos) {			delete(skillso);		}	}	public void update(Skills skillso) {		if(skillso == null) {			throw new NullPointerException();		}		super.update(skillso);		cache.put(skillso.getIds(), skillso.getUname(), skillso);	}	public void save(Skills skillso) {		if(skillso == null) {			throw new NullPointerException();		}		super.save(skillso);		cache.put(skillso.getIds(), skillso.getUname(), skillso);	}		public void save(List<Skills> skillsos) {		for(Skills skillso : skillsos) {			save(skillso);		}	}	public void update(List<Skills> skillsos) {		for(Skills skillso : skillsos) {			update(skillso);		}	}	public Skills get(Integer ids, String uname) {		Skills ooo = cache.get(ids, uname);		if(ooo == null) {			ooo = super.get(ids, uname);			if(ooo != null) {				cache.put(ids, uname, ooo);			}		}		return ooo;	}		public List<Skills> getAll() {		if(cache.getAll().size() < getCount()) {			cache.clear();			List<Skills> all = super.getAll();			for (Skills skillso : all) {				cache.put(skillso.getIds(), skillso.getUname(), skillso);			}		}		return cache.getAll();	}		public void clear() {		cache.clear();		super.clear();	}}