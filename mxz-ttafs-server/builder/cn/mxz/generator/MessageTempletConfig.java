//[消息提示]package cn.mxz.generator;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.dom4j.Attribute;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;import cn.mxz.generator.loader.PropertiesLoader;//by: 代码自动生成public class MessageTempletConfig {	private static Map<Integer, MessageTemplet> map;	private static List<Integer> keys;	private static List<MessageTemplet> all;	static {		load();		all = new ArrayList<MessageTemplet>();		for(Integer c : keys) {			all.add(get(c));		}	}	public static List<MessageTemplet> getAll() {		return all;	}	public static List<Integer> getKeys() {		return keys;	}	@SuppressWarnings("unchecked")	public static void load() {		map = new HashMap<Integer, MessageTemplet>();		keys = new ArrayList<Integer>();		try {			synchronized (map) {				Element root = PropertiesLoader.getRoot();				Element mess = root.element("MESSAGE");				String messageFile =mess.attributeValue("messageFile");				File inputXml = new File(messageFile);				SAXReader saxReader = new SAXReader();				Document document = saxReader.read(inputXml);				Element employees = document.getRootElement();				for (Iterator<Element> i = employees.elementIterator(); i.hasNext();) {					Element e = i.next();					try {						put(e);					} catch (RuntimeException e1) {						List<Attribute> all = e.attributes();						StringBuilder sb = new StringBuilder();						for (Attribute o : all) {							sb.append("[" + o.getStringValue() + "]");						}						System.err.println("出错的节点:" + sb);						throw e1;					}				}			}		} catch (Exception e) {			e.printStackTrace();		}		keys.addAll(map.keySet());		Collections.sort(keys);	}	private static void put(Element e) {		MessageTemplet x = new MessageTemplet();		x.setId( Integer.parseInt( e.attributeValue("id").trim() ) );		x.setContent( e.attributeValue("content") );		x.setExplain( e.attributeValue("explain") );		map.put(x.getId(), x);	}	public static MessageTemplet get(Integer x) {		synchronized (map) {			return map.get(x);		}	}	/**	 * 最大键值(按自然顺序排列的最大键值)	 */	public static Integer getMaxKey() {		return keys.get(keys.size() - 1);	}	/**	 * 最小键值(按自然顺序排列的最小键值)	 */	public static Integer getMinKey() {		return keys.get(0);	}}