//[常量定义]package cn.javaplus.generator;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.dom4j.Attribute;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;import cn.javaplus.generator.loader.PropertiesLoader;//by: 代码自动生成public class DefineTempletConfig {	private static Map<String, DefineTemplet> map;	private static List<String> keys;	private static List<DefineTemplet> all;	static {		load();		all = new ArrayList<DefineTemplet>();		for(String c : keys) {			all.add(get(c));		}	}	public static List<DefineTemplet> getAll() {		return all;	}	public static List<String> getKeys() {		return keys;	}	@SuppressWarnings("unchecked")	public static void load() {		map = new HashMap<String, DefineTemplet>();		keys = new ArrayList<String>();		try {			synchronized (map) {				Element root = PropertiesLoader.getRoot();				Element mess = root.element("define");				String fileName =mess.attributeValue("defineFile");				File inputXml = new File(fileName);				SAXReader saxReader = new SAXReader();					Document document = saxReader.read(inputXml);					Element employees = document.getRootElement();					for (Iterator<Element> i = employees.elementIterator(); i.hasNext();) {						Element e = i.next();						try {							put(e);						} catch (RuntimeException e1) {							List<Attribute> all = e.attributes();							StringBuilder sb = new StringBuilder();							for (Attribute o : all) {								sb.append("[" + o.getStringValue() + "]");							}							System.err.println("出错的节点:" + sb);							throw e1;						}					}			}		} catch (Exception e) {			e.printStackTrace();		}		keys.addAll(map.keySet());		Collections.sort(keys);	}	private static void put(Element e) {		DefineTemplet x = new DefineTemplet();		x.setName( e.attributeValue("name") );		x.setType( e.attributeValue("type") );		x.setValue( e.attributeValue("value") );		x.setExplain( e.attributeValue("explain") );		map.put(x.getName(), x);	}	public static DefineTemplet get(String x) {		synchronized (map) {			return map.get(x);		}	}	/**	 * 最大键值(按自然顺序排列的最大键值)	 */	public static String getMaxKey() {		return keys.get(keys.size() - 1);	}	/**	 * 最小键值(按自然顺序排列的最小键值)	 */	public static String getMinKey() {		return keys.get(0);	}	public static List<DefineTemplet> findByName(String value) {		List<DefineTemplet> all = new ArrayList<DefineTemplet>();		for (DefineTemplet f : map.values()) {			if(f.getName() == value) {				all.add(f);			}		}		return all;	}	public static List<DefineTemplet> findByType(String value) {		List<DefineTemplet> all = new ArrayList<DefineTemplet>();		for (DefineTemplet f : map.values()) {			if(f.getType() == value) {				all.add(f);			}		}		return all;	}	public static List<DefineTemplet> findByValue(String value) {		List<DefineTemplet> all = new ArrayList<DefineTemplet>();		for (DefineTemplet f : map.values()) {			if(f.getValue() == value) {				all.add(f);			}		}		return all;	}	public static List<DefineTemplet> findByExplain(String value) {		List<DefineTemplet> all = new ArrayList<DefineTemplet>();		for (DefineTemplet f : map.values()) {			if(f.getExplain() == value) {				all.add(f);			}		}		return all;	}}