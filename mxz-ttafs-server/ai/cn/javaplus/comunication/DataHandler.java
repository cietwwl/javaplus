package cn.javaplus.comunication;import java.lang.reflect.Method;import java.util.List;import cn.javaplus.buffer.InBuffer;import cn.javaplus.buffer.LemonByteBuffer;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Lists;public class DataHandler<U extends ProtocolUser> extends OnDataEventDispatcher<U> {	private List<SuccessListener>	slisteners	= Lists.newArrayList();	private List<ExceptionListener>	elisteners	= Lists.newArrayList();	public void onData(U user, Request rq) throws Throwable {		dispatchBefore(user, rq);		Object ins = ProtocolsLoader.getBindUserIdObject(rq, user);		Method interfac = ProtocolsLoader.getMethod(rq);		Method impl = ProtocolsLoader.getMethodImpl(rq, ins);		Responser r = new Responser(user);		try {			Object result = impl.invoke(ins, rq.getArgsArray());			if (result == null) {				r.response(interfac);			} else {				r.response(interfac, result);			}			for (SuccessListener l : slisteners) {				l.onSuccess(user, rq);			}		} catch (java.lang.reflect.InvocationTargetException e) {			responseException(user, rq, interfac, r, e.getTargetException());			throw e.getTargetException();		} catch (Exception e) {			e.printStackTrace();			responseException(user, rq, interfac, r, e);			throw e;		}		dispatchAfter(user, rq);	}	private void responseException(U user, Request rq, Method interfac, Responser r, Throwable e) {		r.responseError(interfac, e);		for (ExceptionListener l : elisteners) {			l.onException(user, rq);		}	}	public void addSuccessListener(SuccessListener l) {		slisteners.add(l);	}	public void addExceptionListener(ExceptionListener l) {		elisteners.add(l);	}	public void onData(U user, byte[] data) throws Throwable {		InBuffer bf = new LemonByteBuffer(data, 3);		bf.getInt();		String string = bf.getString();		JSONObject obj = (JSONObject) JSON.parse(string);		Request request = new RequestImpl(obj);		onData(user, request);	}}