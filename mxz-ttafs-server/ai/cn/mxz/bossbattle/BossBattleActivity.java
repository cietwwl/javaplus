package cn.mxz.bossbattle;import message.S;import org.joda.time.DateTime;import cn.javaplus.util.Util;import cn.mxz.ActivityTemplet;import cn.mxz.ActivityTempletConfig;import cn.mxz.activity.ActivityIds;import cn.mxz.base.exception.OperationFaildException;import cn.mxz.base.exception.SureIllegalOperationException;import cn.mxz.bossbattle.battle.BossFighter;import cn.mxz.bossbattle.ui.AwardInfoImpl;import cn.mxz.bossbattle.ui.RankInfoImpl;import cn.mxz.city.City;import cn.mxz.util.counter.CounterKey;import cn.mxz.util.debuger.Debuger;/** * boss挑战活动 * * @author Administrator * */public enum BossBattleActivity {	INSTANCE;	/**	 * 不可能为null，即使战斗结束了，也要快速生成下一场战斗的boss等信息	 */	private BattleInfo			battleInfo;	/**	 * 上一场战斗信息，用于发奖	 */	private BattleInfo			preBattleInfo;	private boolean				isRunning	= false;	private BossBattleHistory	history		= new BossBattleHistory(0);	public final String			start1, end1, start2, end2;;	public boolean				isGenBoss;	/**	 * 当前boss战类型	 */	// private int activityType;	BossBattleActivity() {		ActivityTemplet temp = ActivityTempletConfig.get(ActivityIds.Zhan_9);		String time = temp.getTime();		start1 = time.split(" or ")[0].split(" to ")[0];		end1 = time.split(" or ")[0].split(" to ")[1];		start2 = time.split(" or ")[1].split(" to ")[0];		end2 = time.split(" or ")[1].split(" to ")[1];		battleInfo = new BattleInfo(calcActivityType());	}	/**	 * 根据当前时间，判断下一场boss战的类型	 *	 */	private int calcActivityType() {		DateTime dt = new DateTime();		int morningHour = Integer.parseInt(start1.substring(0, 2));// 13		int noonHour = Integer.parseInt(start2.substring(0, 2));// 21		if (dt.getHourOfDay() >= morningHour && dt.getHourOfDay() < noonHour) {			return BossType.NOON;		}		return BossType.MORING;	}	/**	 * 活动开始	 */	synchronized public void start() {		Debuger.debug("boss战活动开始了");		isRunning = true;		if (battleInfo.getBoss() == null) {			Debuger.debug("晚上八点没有调genBoss()函数，这里自动生成");			genBoss();		}		battleInfo.genBossHpMax();	}	/**	 * boss被击杀，活动结束,或者被serverTask调用	 *	 * @param type	 */	synchronized public void end() {		Debuger.debug("boss战活动结束了");		if (!isRunning) {			return;		}		// battleInfo.end();		// history.saveHistory(challengerManager.getTopTen(), killer);		battleInfo.calcAward();		history = battleInfo.getHistory();		preBattleInfo = battleInfo;		battleInfo = new BattleInfo(calcActivityType());// 必须等本场战斗信息被保存之后才能重新生成新的战斗场景		isRunning = false;	}	/**	 * 开始boss战	 */	synchronized public BossBattleResult doBattle(City user) {		if (!isRunning) {			throw new OperationFaildException(S.S10219);		}		BossBattleResult result = battleInfo.doBattle(user);		if (battleInfo.bossIsDeath()) {			end();		}		user.getUserCounter().add(CounterKey.BOSS_BATTLE_TIMES, 1);		return result;	}	/**	 * 不可能为null，即使战斗结束了，也要快速生成下一场战斗的boss等信息	 *	 * @return battleInfo	 */	synchronized public BattleInfo getBattleInfo() {		return battleInfo;	}	/**	 * 离活动结束时间 秒	 *	 * @return	 */	synchronized public int getEndRemainSec() {		int result = 0;		if (isRunning) {			int s1 = Util.Time.getRemainSec(end1);			int s2 = Util.Time.getRemainSec(end2);			result = Math.min(s1, s2);		}		//System.err.println("活动结束时间 " + result);		return result;	}	/**	 * 离活动开始的时间	 *	 * @return	 */	synchronized public int getStartRemainSec() {		if (isRunning) {			return 0;		}		int s1 = Util.Time.getRemainSec(start1);		int s2 = Util.Time.getRemainSec(start2);		return Math.min(s1, s2);	}	/**	 * @return history 整个服务器第一次战斗的时候不存在信息， 有可能为null	 */	synchronized public IRankInfoWithKiller getHistory() {		return history.get();	}	/**	 * 玩家报名参加活动	 *	 * @param user	 */	synchronized public void joinActivity(City user) {		if (!isRunning) {			throw new OperationFaildException(S.S10245);		}		battleInfo.joinActivity(user);	}	/**	 * 显示用户的奖励	 *	 * @param user	 * @return	 */	synchronized public IAwardInfo showAward(City user) {		if (preBattleInfo == null) {			throw new SureIllegalOperationException("上一场boss战的奖励为null");		}		Challenger me = preBattleInfo.getChallenger(user);		if (me == null) {			throw new SureIllegalOperationException(user.getId() + "的boss战奖品不存在");		}		IRankInfo rankList = new RankInfoImpl(preBattleInfo.getChallengerManager().getTopTen(), preBattleInfo.getKiller(), me, me.getRank());		// IAwardInfo awardInfo =		// preBattleInfo.getChallengerManager().getAwards().get( user.getId() );		// if( awardInfo == null ){		// throw new IllegalOperationException( "的boss战奖品不存在" );		// }		BossFighter boss = preBattleInfo.getBoss();		AwardInfoImpl awardInfo = new AwardInfoImpl();		awardInfo.setRankinfo(rankList);		awardInfo.setBossHpMax(boss.getHpMax());		awardInfo.setBossIsDie(boss.isDeath());		awardInfo.setPrize(me.getAward().getPrizes());		awardInfo.setIdInPrizeCenter( me.getAward().getId() );		return awardInfo;	}	synchronized public boolean isRunning() {		return isRunning;	}	synchronized public void genBoss() {		battleInfo.genBoss();	}}