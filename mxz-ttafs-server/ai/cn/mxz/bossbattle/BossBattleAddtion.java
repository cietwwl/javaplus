package cn.mxz.bossbattle;import message.S;import cn.mxz.BossBuffTemplet;import cn.mxz.BossBuffTempletConfig;import cn.mxz.BossTrainRankTemplet;import cn.mxz.BossTrainRankTempletConfig;import cn.mxz.base.exception.OperationFaildException;import cn.mxz.city.City;/** * boss战的加成 * @author Administrator * */public class BossBattleAddtion {	private static final BossBuffTemplet	INSPIRE_TEMPLET = BossBuffTempletConfig.get(1);	private static final BossBuffTemplet	MAX_INSPIRE_TEMPLET = BossBuffTempletConfig.get(2);	private static final BossBuffTemplet	REBIRTH_TEMPLET = BossBuffTempletConfig.get(3);	/**	 * 极限鼓舞所需要的最大元宝数	 */	private static final int				MAX_INSPIRE_GOLD	= MAX_INSPIRE_TEMPLET.getSycee();	private final City						user;	/**	 * 鼓舞次数	 */	private int								inspireCount;	/**	 * 浴火重生次数	 */	private int								rebirthCount;	/**	 * 鼓舞已经使用的元宝数量，方便计算极限鼓舞，每次战斗后要清空	 */	private int								curUseInspireGold;	/**	 * 战斗的各种加成，包括，鼓舞，浴火重生	 */	private float							addtionPercent;	/**	 * 已经使用的元宝数	 */	private int								allUseGold;	/**	 * 本回合是否已经浴火重生了	 */	private boolean							isRebirthInTurn;	BossBattleAddtion( City user){		this.user = user;	}	/**	 * 重置相关数据	 */	void reInit(){//		addtionPercent = 0;//		curUseInspireGold = 0;		isRebirthInTurn = false;//		inspireCount = 0;	}	/**	 * 鼓舞所需要的金币，如果达到鼓舞次数上限，则返回0	 * @return  0 无法鼓舞	 */	public int calcInspireGold() {		if( inspireCount >= INSPIRE_TEMPLET.getNumber() ){			//throw new IllegalOperationException( "鼓舞次数已达上限" );			return 0;		}		int gold = INSPIRE_TEMPLET.getSycee();		gold = (int) (gold + inspireCount * INSPIRE_TEMPLET.getAddSycee());		return gold;	}	/**	 * 极限鼓舞所需要的元宝数,	 * @return	0 无法鼓舞	 */	public int calcMaxInspireGold() {		return MAX_INSPIRE_GOLD - curUseInspireGold;	}	public float getAddtionPercent(){		if( user.isTester() ){			return addtionPercent;// * 20;		}		return addtionPercent;	}	/**	 * 鼓舞	 */	public void inspire( boolean isMax ){		if( inspireCount >= INSPIRE_TEMPLET.getNumber() ){			throw new OperationFaildException(S.S10251 );		}		int addCount;		int needGold = 0;		if( isMax ){//极限鼓舞			needGold = calcMaxInspireGold();			addCount = INSPIRE_TEMPLET.getNumber() - inspireCount;		}		else{			needGold = calcInspireGold();			addCount = 1;		}		user.getPlayer().reduceGoldOrJinDing( needGold );		curUseInspireGold += needGold;		addtionPercent += INSPIRE_TEMPLET.getFrontPar() * addCount;		inspireCount += addCount;		allUseGold += needGold;	}	/**	 * 浴火重生,必须扣除元宝	 */	void rebirth(){		if( isRebirthInTurn ){			throw new OperationFaildException(S.S10258);		}		int needGold = calcRebirthGold();		user.getPlayer().reduceGold(needGold);		rebirthCount++;		addtionPercent += REBIRTH_TEMPLET.getFrontPar();		allUseGold += needGold;		isRebirthInTurn = true;	}	/**	 * 计算欲火重生所需要的元宝	 * @return	 */	public int calcRebirthGold() {		int needGold = REBIRTH_TEMPLET.getSycee();		needGold = (int) (needGold + REBIRTH_TEMPLET.getAddSycee() * rebirthCount);		return needGold;	}	/**	 * @return allUseGold	 */	public int getAllUseGold() {		return allUseGold;	}	public int getPeiyangdanFromGold() {		int id = Math.min( allUseGold, BossTrainRankTempletConfig.getMaxKey() );		if( id == 0 ){			return 0;		}		BossTrainRankTemplet templet =  BossTrainRankTempletConfig.get( id );		return templet.getTrain();	}	public boolean isRebirthInTurn() {		return isRebirthInTurn;	}		public int getCurUseInspireGold(){		int gold = 0;//本回合所使用的元宝数		if( isRebirthInTurn ){			gold = calcRebirthGold();		}		return curUseInspireGold + gold;	}}