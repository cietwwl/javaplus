package cn.mxz.fighter;import java.util.Collection;import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.List;import message.S;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Component;import cn.javaplus.math.Fraction;import cn.javaplus.util.Util;import cn.mxz.FighterTemplet;import cn.mxz.FighterTempletConfig;import cn.mxz.ISkillTemplet;import cn.mxz.JuHunRecruitTemplet;import cn.mxz.JuHunRecruitTempletConfig;import cn.mxz.SkillHostTemplet;import cn.mxz.SkillHostTempletConfig;import cn.mxz.SkillTempletConfig;import cn.mxz.base.exception.IllegalOperationException;import cn.mxz.base.exception.OperationFaildException;import cn.mxz.base.exception.SureIllegalOperationException;import cn.mxz.base.service.AbstractService;import cn.mxz.battle.FighterSkillBuilder;import cn.mxz.city.City;import cn.mxz.city.CityFactory;import cn.mxz.city.PlayerProperty;import cn.mxz.equipment.MessageAttributeChange;import cn.mxz.equipment.TianMingSnapsort;import cn.mxz.events.AttributeChangeEvent;import cn.mxz.events.Events;import cn.mxz.events.SkillLevelUpFaildEvent;import cn.mxz.events.SkillLevelUpSuccessEvent;import cn.mxz.formation.PlayerCamp;import cn.mxz.handler.FighterService;import cn.mxz.log.Logs;import cn.mxz.messagesender.FighterMessageSender;import cn.mxz.messagesender.MessageFactory;import cn.mxz.newpvp.PvpFightUser;import cn.mxz.prompt.PromptManager;import cn.mxz.protocols.user.god.FighterP.FighterPro;import cn.mxz.protocols.user.god.FighterP.FighterSkillPro;import cn.mxz.protocols.user.god.FighterP.FighterSkillsPro;import cn.mxz.protocols.user.god.FighterP.FightersPro;import cn.mxz.protocols.user.god.FighterP.RecruitResaultPro;import cn.mxz.protocols.user.god.FighterP.RecruitResaultsPro;import cn.mxz.protocols.user.god.FighterP.SpiritesPro;import cn.mxz.protocols.user.god.FighterP.XianShiPro;import cn.mxz.script.Script;import cn.mxz.skill.FighterSkillsBuilder;import cn.mxz.skill.SkillManager;import cn.mxz.skill.SkillSnapshoot;import cn.mxz.spirite.Spirite;import cn.mxz.spirite.SpiriteManager;import cn.mxz.spirite.SpiritesBuilder;import cn.mxz.team.Skill;import cn.mxz.team.builder.FighterBuilder;import cn.mxz.team.builder.FightersBuilder;import cn.mxz.user.team.Formation;import cn.mxz.user.team.Team;import cn.mxz.user.team.god.Hero;import cn.mxz.util.counter.CounterKey;import cn.mxz.util.counter.UserCounter;import cn.mxz.util.counter.UserCounterSetter;import cn.mxz.util.debuger.Debuger;import cn.mxz.xianshi.RecruitResault;import cn.mxz.xianshi.RecruitResaultBuilder;import cn.mxz.xianshi.Recruitor;import cn.mxz.xianshi.RecruitorFactory;import com.google.common.collect.Lists;import com.google.common.collect.Sets;import db.dao.impl.DaoFactory;import db.dao.impl.SkillsDao;import db.domain.Skills;import define.D;@Component("fighterService")@Scope("prototype")public class FighterServiceImpl extends AbstractService implements		FighterService {	private final class ComparatorImpl implements Comparator<Hero> {		Formation formation = getCity().getFormation();		PlayerCamp s = formation.getSelected();		Collection<? extends Hero> all = formation.getAlternate().getFighters();		List<Hero> fighters = s.getFighters();		@Override		public int compare(Hero o1, Hero o2) {			int a = get(o1);			int b = get(o2);			return b - a;		}		// 1、主角固定排第一位		// 2、出战伙伴排在最前面，并且按身价排序		// 3、替补位伙伴排在出战伙伴后面，并且按身价排序		// 4、其他伙伴按品质排序，品质相同的按身价排序		private int get(Hero o1) {			if (o1 instanceof PlayerHero) {				return Integer.MAX_VALUE;			}			int value = 0;			if (fighters.contains(o1)) {				value += 1000000;			}			value += o1.getShenJia();			if (all.contains(o1)) {				value += 500000;			}			value += o1.getQuality() * 1000;			return value;		}	}	@Override	public FighterPro getFighter(int fighterId) {		City city = getCity();		Hero god = city.getTeam().get(fighterId);		if (god == null) {			throw new NullPointerException(fighterId + "战士不存在");		}		getCity().getPromptManager().removeMessageMark(PromptManager.YXHB);		return new FighterBuilder().build(god);	}	@Override	public FightersPro get(int index, int count) {		try {			City city = getCity();			PlayerCamp selected = city.getFormation().getSelected();			List<Hero> fighters = selected.getFighters();			List<Hero> all = Lists.newArrayList(city.getTeam().getAll());			remove(all, fighters);			sendFighters(all);			return new FightersBuilder().build(fighters);		} catch (NullPointerException e) {			Debuger.error("[战士异常]", e);			throw new RuntimeException(e);		}	}	private void remove(List<Hero> all, List<Hero> fighters) {		for (Hero hero : fighters) {			all.remove(hero);		}	}	private void sendFighters(List<Hero> values) {		sort(values);		List<List<Hero>> pages = Util.Collection.page(values, 20);		for (List<Hero> hs : pages) {			FightersPro build = new FightersBuilder().build(hs);			FighterMessageSender fighter = MessageFactory.getFighter();			fighter.fightersUpdate(getSocket(), build);		}	}	private void sort(List<Hero> s) {		Collections.sort(s, new ComparatorImpl());	}	@Override	public SpiritesPro getSpirites(int index, int count) {		SpiriteManager manager = getCity().getSpiriteManager();		List<Spirite> ls = manager.getSpirites();		List<Spirite> subList = ls.subList(index, ls.size());		subList = cn.javaplus.util.Util.Collection.sub(subList, count);		// Debuger.debug("FighterServiceImpl.getSpirites() 魂魄数量:" +		// subList.size());		return new SpiritesBuilder().build(subList);	}	@Override	public RecruitResaultPro recruit(int recruitType) {		City city = getCity();		Recruitor rt = RecruitorFactory.create(recruitType, city, true);		FighterSnapshoot s = new FighterSnapshoot(city);		s.snapshoot();		RecruitResault rr = rt.recruit(1, false);		city.getPromptManager().markMessage(PromptManager.YXHB);		s.snapshoot();		Logs.findFighterLog				.addLog(rr, city.getId(), city.getPlayer().getNick());		return new RecruitResaultBuilder().build(rr);	}	@Override	public void levelUpSpirite(int typeId) {		Team team = getCity().getTeam();		Hero hero = team.get(typeId);		SpiriteManager sm = getCity().getSpiriteManager();		sm.checkJinJieDan(hero);		sm.checkJingYuan(hero);		sm.checkSpirite(hero);		sm.checkMaxQuality(hero);		removeJinJieDan(hero);		removeJingYuan(hero);		removeSpirite(hero);		FighterSnapshoot s = new FighterSnapshoot(getCity());		s.snapshoot();		hero.qualityLevelUp();		s.snapshoot();	}	private void removeJingYuan(Hero hero) {		int need = getCity().getSpiriteManager().getJingYuanNeed(hero);		getCity().getBagAuto().remove(D.ID_JING_YUAN, need);	}	private void removeSpirite(Hero hero) {		SpiriteManager sm = getCity().getSpiriteManager();		int need = sm.getJinJieSpiriteNeed(hero.getTypeId());		sm.remove(hero.getTypeId(), need);	}	private void removeJinJieDan(Hero hero) {		int need = getCity().getSpiriteManager().getJinJieDanNeed(hero);		getCity().getBagAuto().remove(D.ID_JIN_JIE_DAN, need);	}	@Override	public FighterSkillsPro getSkillReadys(int indexStart, int count) {		SkillManager manager = getCity().getSkillManager();		List<Skill> skills = manager.getAll();		// Debuger.debug("FighterServiceImpl.getSkillReadys() 过滤前:"		// + skills.size());		filterTianFuSkill(skills);		// Debuger.debug("FighterServiceImpl.getSkillReadys() 过滤后:"		// + skills.size());		skills = skills.subList(indexStart, skills.size());		skills = cn.javaplus.util.Util.Collection.sub(skills, count);		// Debuger.debug("FighterServiceImpl.getSkillReadys()" + skills.size());		return new FighterSkillsBuilder().build(getCity(), skills);	}	private void filterTianFuSkill(List<Skill> skills) {		Iterator<Skill> it = skills.iterator();		while (it.hasNext()) {			Skill skill = (Skill) it.next();			if (isTianFu(skill)) {				it.remove();				// Debuger.debug("FighterServiceImpl.filterTianFuSkill()" );			}		}	}	private boolean isTianFu(Skill skill) {		int id = skill.getFighterId();		Team team = getCity().getTeam();		Hero hero = team.get(id);		if (hero == null) {			return false;		}		FighterTemplet temp = FighterTempletConfig.get(hero.getTypeId());		int skill2 = temp.getSkill();		// SkillTemplet temps = SkillTempletConfig.get(skill2);		// Debuger.debug("FighterServiceImpl.isTianFu() " + temp.getName()		// + "的天赋技能:" + skill2 + " 当前:" + skill.getId() + ","		// + temps.getName());		return skill2 == skill.getId();	}	@Override	public void addSkill(int fighterTypeId, int id) {		int oldShenJia = getCity().getFormation().getShenJia();		FighterSnapshoot s = new FighterSnapshoot(getCity());		s.snapshoot();		checkMax(fighterTypeId, id);		City city2 = getCity();		Team team = city2.getTeam();		Hero h = team.get(fighterTypeId);		// Debuger.debug("FighterServiceImpl.addSkill()" + h.getAttribute());		MessageAttributeChange m = new MessageAttributeChange(getCity());		m.saveOld(h);		SkillSnapshoot sn = new SkillSnapshoot(getCity());		sn.snapshoot();		TianMingSnapsort tms = new TianMingSnapsort(getCity().getTeam().get(				fighterTypeId));		tms.snapsort();		getCity().getSkillManager().equipmentToFighter(fighterTypeId, id);		sn.snapshoot();		tms.snapsort();		// Debuger.debug("FighterServiceImpl.addSkill()" + h.getAttribute());		m.saveNew(h);		m.sendMessage();		s.snapshoot();		Events.getInstance().dispatch(				new AttributeChangeEvent(getCity(), oldShenJia));	}	// private void checkEquipped(int id) {	//	// SkillManager manager = getCity().getSkillManager();	// Skill s = manager.getByIdentification(id);	//	// if (s.isEquipment()) {	// throw new OperationFaildException(S.S10169);	// }	// }	private void checkMax(int fighterTypeId, int skillId) {		Team team = getCity().getTeam();		Hero hero = team.get(fighterTypeId);		List<Skill> skills = hero.getSkills();		int size = skills.size();		if (size >= D.SKILL_MAX_COUNT) {			throw new OperationFaildException(S.S10330);		}		checkMagic(skills, hero, skillId);// 检查所有法力值是否达到了上限	}	private void checkMagic(List<Skill> skills, Hero hero, int skillId) {		Fraction faLi = hero.getFaLi();		int d = faLi.getDenominator();		int n = faLi.getNumerator();		//		// FighterTemplet temp = FighterTempletConfig.get(hero.getTypeId());		//		// int now = 0;		// for (Skill skill : skills) {		// int id = temp.getSkill();		// if (skill.getId() != id) {		// ISkillTemplet skillTemplet = SkillTempletConfig.get(skill.getId());		// now += skillTemplet.getMigc();		// }		// }		//		SkillManager sm = getCity().getSkillManager();		Skill st = sm.getByIdentification(skillId);		int id = st.getId();		ISkillTemplet t = SkillTempletConfig.get(id);		if (n + t.getMigc() > d) {			throw new OperationFaildException(S.S10226);		}	}	@Override	public void changeSkill(int fighterId, int oldId, int newId) {		int oldShenJia = getCity().getFormation().getShenJia();		FighterSnapshoot s = new FighterSnapshoot(getCity());		s.snapshoot();		TianMingSnapsort tms = new TianMingSnapsort(getCity().getTeam().get(				fighterId));		tms.snapsort();		SkillManager manager = getCity().getSkillManager();		SkillSnapshoot sn = new SkillSnapshoot(getCity());		sn.snapshoot();		manager.tackOff(oldId);		addSkill(fighterId, newId);		sn.snapshoot();		s.snapshoot();		tms.snapsort();		Events.getInstance().dispatch(				new AttributeChangeEvent(getCity(), oldShenJia));	}	@SuppressWarnings("unchecked")	@Override	public FighterSkillPro levelUpSkill(int skillId, String id) {		int oldShenJia = getCity().getFormation().getShenJia();		List<Skill> ids = getSkills(id);		checkSKill(ids);		SkillProbabilityCalc pc = new SkillProbabilityCalc();		SkillManager manager = getCity().getSkillManager();		Skill skill = manager.getByIdentification(skillId);		int times = getCity().getUserCounterHistory().get(				CounterKey.SKILL_LEVEL_UP_TIMES);		float pro = 0;		if (times == 0) {			pro = 1;		} else if (isPassSkillHostSumPro(pro, skill)) {			pro = 1;		} else {			pro = pc.getPro2(skill, ids);		}		boolean isHappen;		isHappen = Util.Random.isHappen(pro);		checkMaxLevel(skill);		reduceSomeThing(skill, ids, pro);		MessageFactory.getSkill().skillsRemove(getSocket(), id);		if (isHappen) {			FighterSnapshoot s = new FighterSnapshoot(getCity());			s.snapshoot();			SkillSnapshoot sn = new SkillSnapshoot(getCity());			sn.snapshoot();			levelUp(skill);			sn.snapshoot();			Events.getInstance().dispatch(					new SkillLevelUpSuccessEvent(skill, getCity()));			s.snapshoot();			UserCounter his = getCity().getUserCounterHistory();			his.set(CounterKey.SKILL_LEVEL_UP_FAILD_PRO, 0);		} else {			UserCounter his = getCity().getUserCounterHistory();			his.add(CounterKey.SKILL_LEVEL_UP_FAILD_PRO, (int) (pro * 1000));			Events.getInstance().dispatch(					new SkillLevelUpFaildEvent(skill, getCity()));			throw new OperationFaildException(S.S10286);		}		Events.getInstance().dispatch(				new AttributeChangeEvent(getCity(), oldShenJia));		return new FighterSkillBuilder().build(getCity(), skill);	}	private boolean isPassSkillHostSumPro(float pro, Skill skill) {		UserCounter his = getCity().getUserCounterHistory();		float c = his.get(CounterKey.SKILL_LEVEL_UP_FAILD_PRO);		c /= 1000;		SkillHostTemplet st = getTemplet(skill);		return c >= st.getSumPro();	}	private void checkSKill(List<Skill> ids) {		for (Skill skill : ids) {			if (skill.isEquipment()) {				throw new OperationFaildException(S.S10225);			}		}	}	private List<Skill> getSkills(String skills) {		Collection<Integer> ids = cn.javaplus.util.Util.Collection				.getIntegers(skills);		ids = Sets.newHashSet(ids);		SkillManager manager = getCity().getSkillManager();		List<Skill> ls = Lists.newArrayList();		for (Integer id : ids) {			Skill skill = manager.getByIdentification(id);			if (skill == null) {				throw new SureIllegalOperationException("技能不存在!" + id);			}			ls.add(skill);		}		return ls;	}	private void levelUp(Skill skill) {		SkillsDao DAO = DaoFactory.getSkillsDao();		Skills skills = skill.getDto();		skills.addLevel(1);		UserCounterSetter uc = getCity().getUserCounterHistory();		uc.add(CounterKey.SKILL_LEVEL_UP_TIMES, 1);		DAO.update(skills);	}	private void reduceSomeThing(Skill skill, List<Skill> ids, float pro) {		SkillManager manager = getCity().getSkillManager();		SkillHostTemplet st = getTemplet(skill);		int cashNeed = st.getCashNeed();		int reduce = (int) (cashNeed * pro * 100);		getCity().getPlayer().reduce(PlayerProperty.CASH, reduce);		for (Skill s : ids) {			manager.removeByIds(s.getIdentification());		}	}	private SkillHostTemplet getTemplet(Skill skill) {		return SkillHostTempletConfig.get(skill.getStep() + ","				+ skill.getLevel());	}	private void checkMaxLevel(Skill skill) {		if (skill.getLevel() >= D.MAX_SKILL_LEVEL) {			throw new SureIllegalOperationException("-技能达到最大等级");		}	}	@Override	public void takeOffSkill(int fighterId, int skillId) {		int oldShenJia = getCity().getFormation().getShenJia();		City city2 = getCity();		Team team = city2.getTeam();		Hero h = team.get(fighterId);		FighterSnapshoot s = new FighterSnapshoot(getCity());		s.snapshoot();		MessageAttributeChange m = new MessageAttributeChange(getCity());		m.saveOld(h);		SkillSnapshoot sn = new SkillSnapshoot(getCity());		sn.snapshoot();		getCity().getSkillManager().tackOff(skillId);		sn.snapshoot();		m.saveNew(h);		m.sendMessage();		Events.getInstance().dispatch(				new AttributeChangeEvent(getCity(), oldShenJia));		s.snapshoot();	}	@Override	public int recruitByJuHun(int type) {		FighterSnapshoot s = new FighterSnapshoot(getCity());		s.snapshoot();		JuHunRecruitTemplet temp = JuHunRecruitTempletConfig.get(type);		int recruit = new JuHunRecruitor(getCity(), temp).recruit();		s.snapshoot();		return recruit;	}	@Override	public XianShiPro getXianShiData() {		return new XianShiBuilder().build(getCity());	}	@Override	public FighterPro exchange(int typeId) {		FighterSnapshoot s = new FighterSnapshoot(getCity());		s.snapshoot();		checkExchange(typeId);		Hero addFighter = addFighter(typeId);		s.snapshoot();		return new FighterBuilder().build(addFighter);	}	private Hero addFighter(int typeId) {		removeSpirites(typeId);		Hero hero = getCity().getTeam().createNewHero(typeId);		return hero;	}	private void removeSpirites(int typeId) {		SpiriteManager sm = getCity().getSpiriteManager();		FighterTemplet temp = FighterTempletConfig.get(typeId);		int soul = (int) temp.getSoul();		sm.remove(typeId, soul);	}	private void checkExchange(int typeId) {		FighterTemplet temp = FighterTempletConfig.get(typeId);		int soul = (int) temp.getSoul();		if (soul == -1) {			throw new SureIllegalOperationException("-该神将不可招募");		}		if (getCity().getTeam().contains(typeId)) {			throw new SureIllegalOperationException("-已经拥有该神将了");		}	}	@Override	public FighterPro getFighterAfterLevelUp(int id) {		Team team = getCity().getTeam();		Hero hero = team.get(id);		FighterAfterLevelUp f = new FighterAfterLevelUp(hero);		return new FighterBuilder().build(f);	}	@Override	public FightersPro getOtherFighter(String userId, int index, int count) {		City city = CityFactory.getCity(userId);		if (city == null) {			return buildRobotFighters(userId);		}		Team t = city.getTeam();		List<Hero> values = Lists.newArrayList(t.getAll());		sort(values);		values = values.subList(index, values.size());		values = cn.javaplus.util.Util.Collection.sub(values, count);		return new FightersBuilder().build(values);	}	private FightersPro buildRobotFighters(String userId) {		PvpFightUser pus = getCity().getNewPvpManager().getUserRandomed(userId);		PlayerCamp all = pus.getCamp();		List<Hero> fighters = all.getFighters();		return new FightersBuilder().build(fighters);	}	@Override	public FightersPro getFighters(String ids) {		List<Integer> is = Util.Collection.getIntegers(ids);		City city = getCity();		Team t = city.getTeam();		List<Hero> values = Lists.newArrayList();		for (Integer id : is) {			values.add(t.get(id));		}		sort(values);		return new FightersBuilder().build(values);	}	@Override	public void openFighter() {		PromptManager pm = getCity().getPromptManager();		pm.removeMessageMark(PromptManager.YXHB);	}	@Override	public int getSpiriteCount(int typeId) {		SpiriteManager sm = getCity().getSpiriteManager();		Spirite spirite = sm.get(typeId);		if (spirite == null) {			return 0;		}		return spirite.getCount();	}	@Override	public RecruitResaultsPro recruitTenTimes(int recruitType) {		RecruitResaultsPro.Builder b = RecruitResaultsPro.newBuilder();		City city = getCity();		Recruitor rt = RecruitorFactory.create(recruitType, city, false);		FighterSnapshoot s = new FighterSnapshoot(city);		s.snapshoot();		UserCounter c = city.getUserCounter();		int a0 = c.get(CounterKey.XUN_XIAN_TEN_TIMES_TIMES);		double disCount = Script.XunXian.getDiscount(a0);		int times = 10;		rt.check(disCount, times);		int jiaCount = 0;// 寻出甲的数量		for (int i = 0; i < times; i++) {			boolean noJia = jiaCount >= D.SHI_CI_XUN_XIAN_JIA;			RecruitResault rr = rt.recruit(disCount, noJia);			int step = rr.getStep();			if (step == 4 || step == 5) {				jiaCount++;			}			b.addResualts(new RecruitResaultBuilder().build(rr));			String nick = city.getPlayer().getNick();			String id = city.getId();			Logs.findFighterLog.addLog(rr, id, nick);		}		Debuger.debug("FighterServiceImpl.recruitTenTimes() 寻到甲的数量:" + jiaCount);		city.getPromptManager().markMessage(PromptManager.YXHB);		s.snapshoot();		city.getUserCounterAuto().add(CounterKey.XUN_XIAN_TEN_TIMES_TIMES, 1);		return b.build();	}	@Override	public String getSpiriteCount2(int typeId) {		SpiriteManager sm = getCity().getSpiriteManager();		Spirite spirite = sm.get(typeId);		if (spirite == null) {			return typeId + "," + 0;		}		return typeId + "," + spirite.getCount();	}}