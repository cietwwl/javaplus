package cn.mxz.shop;import message.S;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Component;import cn.mxz.MarketPlaceTemplet;import cn.mxz.MarketPlaceTempletConfig;import cn.mxz.base.exception.OperationFaildException;import cn.mxz.base.service.AbstractService;import cn.mxz.handler.ShopService;import cn.mxz.protocols.user.shops.ShopsAllP.ShopPricePro;import cn.mxz.protocols.user.shops.ShopsAllP.ShopToolsPro;import cn.mxz.protocols.user.shops.ShopsAllP.ShopsAllPro;import cn.mxz.util.counter.CounterKey;@Component("shopService")@Scope("prototype")public class ShopServiceImpl extends AbstractService implements ShopService {	@Override	public ShopsAllPro getData() {		return new ShopsAllBuilder().build(getCity());	}	@Override	public ShopToolsPro buyTool(int toolId, int count) {		new Shopper(getCity()).buy(toolId, count);		return getShopTools(toolId);	}	/**	 * 反馈商品	 * 	 * @param toolId	 *            商品ID	 * 	 * @return 商品	 */	@Override	public ShopToolsPro getShopTools(int toolId) {		ShopToolsPro.Builder tool = ShopToolsPro.newBuilder();		MarketPlaceTemplet marketPlace = MarketPlaceTempletConfig.get(toolId);		// if(!getCity().isTester() && marketPlace.getIsVisible() == 0) {		// throw new OperationFaildException(S.S10277); -------throw new		// (S.S10290); -------该商品不可购买		// }		if (marketPlace == null) {			throw new OperationFaildException(S.S10186);		}		Shopper shopper = new Shopper(getCity());		Price price = shopper.getPrice(toolId, 1);		tool.setCashNew(price.getCashNew());			//金币最新价格				tool.setCashOld(price.getCashOld());			//金币原始价格		tool.setCouponsNew(price.getGoldNew());	//元宝最新价格		tool.setCouponsOld(price.getGoldOld());		//元宝原始价格		tool.setDescription(marketPlace.getDescription());		tool.setDressLevel(marketPlace.getDressLevel());		tool.setToolId(marketPlace.getTypeId());		tool.setToolName(marketPlace.getName());		tool.setToolType(marketPlace.getType());		tool.setRoad(marketPlace.getRoad());				tool.setBuyCountToday(getCity().getUserCounter().get(CounterKey.MARKET_BUY_COUNT, toolId));		tool.setBuyCountHistory(getCity().getUserCounterHistory().get(CounterKey.MARKET_BUY_COUNT, toolId));		tool.setQuality(marketPlace.getQuality());		tool.setTab(marketPlace.getTab());				tool.setHasCount(getCity().getBagAuto().getCount(toolId));		tool.setCanBuyCount(shopper.getCanBuyCountToday(toolId));		tool.setCountMax(shopper.getBuyCountMaxToday(toolId));				tool.setNowCoupons(getCity().getPlayer().getGold());				MarketPlaceTemplet temp = MarketPlaceTempletConfig.get(toolId);				tool.setIsSpecial(temp.getIsSpecial() == 1);		return tool.build();	}	@Override	public ShopPricePro getPrice(int toolId) {		Shopper shopper = new Shopper(getCity());		Price price = shopper.getPrice(toolId, 1);				return new ShopPriceBuilder().build(price);	}}