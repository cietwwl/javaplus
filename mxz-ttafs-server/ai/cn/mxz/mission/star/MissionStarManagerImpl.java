package cn.mxz.mission.star;import java.util.List;import java.util.Set;import message.S;import cn.javaplus.random.Fetcher;import cn.javaplus.util.Util;import cn.mxz.CopyTemplet;import cn.mxz.CopyTempletConfig;import cn.mxz.MapTemplet;import cn.mxz.MissionMapTemplet;import cn.mxz.MissionMapTempletConfig;import cn.mxz.base.exception.OperationFaildException;import cn.mxz.base.prize.PrizeSender;import cn.mxz.base.prize.PrizeSenderFactory;import cn.mxz.city.City;import cn.mxz.user.Player;import cn.mxz.util.counter.CounterKey;import cn.mxz.util.counter.UserCounter;import com.google.common.collect.Lists;import com.google.common.collect.Sets;import db.dao.impl.DaoFactory;import db.dao.impl.MissionStarDao;public class MissionStarManagerImpl implements MissionStarManager {//	private final class EmptyStar implements MissionStar {//		@Override//		public int getMissionId() {//			return 1;//		}////		@Override//		public int getMax() {//			return 1;//		}////		@Override//		public int getCount() {//			return 1;//		}//	}//	public MissionStarManagerImpl(City user) {//	}////	@Override//	public List<MissionStar> getStarByCapterId(int chapterId) {//		return Lists.newArrayList();//	}////	@Override//	public List<MissionStar> getStarBySceneId(int sceneId) {//		return Lists.newArrayList();//	}////	@Override//	public void clear(int missionId) {////	}////	@Override//	public MissionStar getStarByMissionId(int missionId) {//		return new EmptyStar();//	}////	@Override//	public int getStarReceivedStep(int chapterId) {//		return 0;//	}////	@Override//	public void receivedStarReward(int chapterId) {////	}////	@Override//	public void receivedStarReward(int chapterId, int percent) {////	}////	@Override//	public MissionStar getCurrentStarByMissionId(int missionId) {//		return new EmptyStar();//	}////	@Override//	public void addBossStar(int mapId, int star) {////	}////	@Override//	public void addBranchBossStar(int mapId, int star) {////	}////	@Override//	public void addDemonStar(int mapId, int star) {////	}////	@Override//	public boolean hasReceive(int chapterId, int type) {//		return false;//	}////	@Override//	public float getPercent(int chapterId) {//		return 0;//	}////	@Override//	public boolean canReceive(int chapterId, int type) {//		return false;//	}	private final class NullMissionStar implements MissionStar {		private final int	missionId;		private NullMissionStar(int missionId) {			this.missionId = missionId;		}		@Override		public int getMissionId() {			return missionId;		}		@Override		public int getMax() {			return 0;		}		@Override		public int getCount() {			return 0;		}	}	/**	 * 获取地图模板的ID	 *	 * @author 林岑	 *	 */	private final class MapIdFetcher implements Fetcher<MissionMapTemplet, Integer> {		@Override		public Integer get(MissionMapTemplet cup) {			return cup.getId();		}	}	private City						user;	private List<db.domain.MissionStar>	all;	public MissionStarManagerImpl(City user) {		this.user = user;		initAllMissionStar();	}	private void initAllMissionStar() {		MissionStarDao DAO = DaoFactory.getMissionStarDao();		all = DAO.findByUname(user.getId());		if (all.isEmpty()) {			initAll();		}	}	private void initAll() {		MissionStarDao DAO = DaoFactory.getMissionStarDao();		for (MapTemplet mt : MissionMapTempletConfig.getAll()) {			add(mt);		}		DAO.addAll(all);	}	private void add(MapTemplet mt) {		db.domain.MissionStar m = new db.domain.MissionStarImpl();		m.setMissionId(mt.getId());		m.setUname(user.getId());		all.add(m);	}	@Override	public List<MissionStar> getStarByCapterId(int chapterId) {		List<MissionStar> ls = Lists.newArrayList();		Set<Integer> allMissionId = findAllMissionIdByChapterId(chapterId);		for (Integer id : allMissionId) {			db.domain.MissionStar a = lazyGet(id);			ls.add(new MissionStarHistoryImpl(user, a));		}		return ls;	}	/**	 * 查找所有的指定关卡ID的 地图ID	 *	 * @param sceneId	 * @return	 */	private Set<Integer> findAllMissionIdByChapterId(int chapterId) {		List<MissionMapTemplet> all = MissionMapTempletConfig.findByChapterId(chapterId);		List<Integer> find = Util.Collection.getListByOneFields(new MapIdFetcher(), all);		return Sets.newHashSet(find);	}	@Override	public List<MissionStar> getStarBySceneId(int sceneId) {		List<MissionStar> ls = Lists.newArrayList();		Set<Integer> allMissionId = findAllMissionIdBySceneId(sceneId);		for (Integer id : allMissionId) {			db.domain.MissionStar a = lazyGet(id);			ls.add(new MissionStarHistoryImpl(user, a));		}		return ls;	}	/**	 * 查找所有的指定副本ID的 地图ID	 *	 * @param sceneId	 * @return	 */	private Set<Integer> findAllMissionIdBySceneId(int sceneId) {		List<MissionMapTemplet> all = MissionMapTempletConfig.findBySceneId(sceneId);		List<Integer> find = Util.Collection.getListByOneFields(new MapIdFetcher(), all);		return Sets.newHashSet(find);	}	@Override	public void clear(int missionId) {		db.domain.MissionStar m = lazyGet(missionId);		m.setDemonStar(0);		m.setMainBossStar(0);		for (int i = 0; i < db.domain.MissionStarImpl.BRANCH_BOSS_STAR__LEN; i++) {			m.setBranchBossStar(i, 0);		}		DaoFactory.getMissionStarDao().update(m);	}	private db.domain.MissionStar lazyGet(int missionId) {		for (db.domain.MissionStar m : all) {			if (m.getMissionId() == missionId) {				return m;			}		}		db.domain.MissionStar m = initToDB(missionId);		return m;	}	private db.domain.MissionStar initToDB(int missionId) {		db.domain.MissionStar m = new db.domain.MissionStarImpl();		m.setMissionId(missionId);		m.setUname(user.getId());		all.add(m);		DaoFactory.getMissionStarDao().add(m);		return m;	}	@Override	public MissionStar getStarByMissionId(final int missionId) {		MapTemplet mt = MissionMapTempletConfig.get(missionId);		if (mt == null) {			return new NullMissionStar(missionId);		}		db.domain.MissionStar a = lazyGet(missionId);		return new MissionStarHistoryImpl(user, a);	}	@Override	public int getStarReceivedStep(int chapterId) {		float percent = getPercent(chapterId);		int type = getFirstUnReceive(chapterId);// 第一个没有领取的奖励类型		if (type == -1) {			return Reward.Status.COMPLETE;		}		if (hasMeetRequirement(percent, type)) {			int canReceiveType = getCanReceiveType(type);//			Debuger.debug("MissionStarManagerImpl.getStarReceivedStep1()" + canReceiveType);			return canReceiveType; // 可以领取这个奖励		} else {			int canNotReceiveType = getCanNotReceiveType(type);//			Debuger.debug("MissionStarManagerImpl.getStarReceivedStep2()" + canNotReceiveType);			return canNotReceiveType; // 不可以领取这个奖励		}	}	@Override	public float getPercent(int chapterId) {		List<MissionStar> star = getStarByCapterId(chapterId);		MissionStar starAll = new MissionStarAll(star);		float count = starAll.getCount();		float max = starAll.getMax();		float percent = count / max;		return percent;	}	private int getCanReceiveType(int type) {		if (type == Reward.TYPE.PERCENT_100) {			return Reward.Status.PERCENT_100_O;		}		if (type == Reward.TYPE.PERCENT_60) {			return Reward.Status.PERCENT_60_O;		}		if (type == Reward.TYPE.PERCENT_30) {			return Reward.Status.PERCENT_30_O;		}		return -1;	}	private int getCanNotReceiveType(int type) {		if (type == Reward.TYPE.PERCENT_100) {			return Reward.Status.PERCENT_100_X;		}		if (type == Reward.TYPE.PERCENT_60) {			return Reward.Status.PERCENT_60_X;		}		if (type == Reward.TYPE.PERCENT_30) {			return Reward.Status.PERCENT_30_X;		}		return -1;	}	private boolean hasMeetRequirement(float percent, int type) {		if (type == Reward.TYPE.PERCENT_100) {			return percent >= 1;		}		if (type == Reward.TYPE.PERCENT_60) {			return percent >= 0.6;		}		if (type == Reward.TYPE.PERCENT_30) {			return percent >= 0.3;		}		return false;	}	private int getFirstUnReceive(int chapterId) {		if (!hasReceive(chapterId, Reward.TYPE.PERCENT_30)) {			return Reward.TYPE.PERCENT_30;		}		if (!hasReceive(chapterId, Reward.TYPE.PERCENT_60)) {			return Reward.TYPE.PERCENT_60;		}		if (!hasReceive(chapterId, Reward.TYPE.PERCENT_100)) {			return Reward.TYPE.PERCENT_100;		}		return -1;	}	/**	 * 是否领取了指定章节的指定类型的奖励	 *	 * @param chapterId	 * @param type	 * @return	 */	@Override	public boolean hasReceive(int chapterId, int type) {		UserCounter his = user.getUserCounterHistory();		return his.isMark(CounterKey.STAR_REWARD_RECEIVE, chapterId, type);	}	private void markReceived(int chapterId, int type) {		UserCounter his = user.getUserCounterHistory();		his.mark(CounterKey.STAR_REWARD_RECEIVE, chapterId, type);	}	@Override	public MissionStar getCurrentStarByMissionId(int missionId) {		MapTemplet mt = MissionMapTempletConfig.get(missionId);		if (mt == null) {			return new NullMissionStar(missionId);		}		db.domain.MissionStar a = lazyGet(missionId);		return new MissionStarImpl(user, a);	}	@Override	public void addBossStar(int mapId, int star) {		db.domain.MissionStar m = lazyGet(mapId);		star = m.getMainBossStar() + star;		if (star > 3) {			star = 3;		}		m.setMainBossStar(star);		if (m.getMainBossStar() > m.getMainBossStarMax()) {			m.setMainBossStarMax(m.getMainBossStar());		}		DaoFactory.getMissionStarDao().update(m);//		Debuger.debug("MissionStarManagerImpl.addBossStar() 增加主线boss星星");	}	@Override	public void addBranchBossStar(int mapId, int star) {		db.domain.MissionStar m = lazyGet(mapId);		int max = new MissionStarImpl(user, m).getMax();		if (max == 0) {			System.err.println("这里好像出问题了 最大星星数:" + max + ", missionId = " + mapId);		}		if (star > max) {			star = max;		}		new BranchBossStarController(m).add(star);		DaoFactory.getMissionStarDao().update(m);//		Debuger.debug("MissionStarManagerImpl.addBranchBossStar() 增加支线boss星星");	}	@Override	public void addDemonStar(int mapId, int star) {		db.domain.MissionStar m = lazyGet(mapId);		int max = new MissionStarImpl(user, m).getMax();		if (max == 0) {			System.err.println("这里好像出问题了 最大星星数:" + max + ", missionId = " + mapId);		}		if (star > max) {			star = max;		}		m.addDemonStar(star);		if (m.getDemonStar() > m.getDemonStarMax()) {			m.setDemonStarMax(m.getDemonStar());		}		DaoFactory.getMissionStarDao().update(m);//		Debuger.debug("MissionStarManagerImpl.addDemonStar() 增加小怪星星");	}	@Override	public boolean canReceive(int chapterId, int type) {		float percent = getPercent(chapterId);		return hasMeetRequirement(percent, type);	}	@Override	public void receivedStarReward(int chapterId) {		int percent = getStarReceivedStep(chapterId);		CopyTemplet temp = CopyTempletConfig.get(chapterId);		PrizeSender s = PrizeSenderFactory.getPrizeSender();		Player p = user.getPlayer();		if (percent == Reward.Status.PERCENT_30_O) {			s.send(p, temp.getAward1());			markReceived(chapterId, Reward.TYPE.PERCENT_30);//			Debuger.debug("MissionStarManagerImpl.receivedStarReward() 领取了30%的奖励");		} else if (percent == Reward.Status.PERCENT_60_O) {			s.send(p, temp.getAward2());			markReceived(chapterId, Reward.TYPE.PERCENT_60);//			Debuger.debug("MissionStarManagerImpl.receivedStarReward() 领取了60%的奖励");		} else if (percent == Reward.Status.PERCENT_100_O) {			s.send(p, temp.getAward3());			markReceived(chapterId, Reward.TYPE.PERCENT_100);//			Debuger.debug("MissionStarManagerImpl.receivedStarReward() 领取了90%的奖励");		} else {			throw new OperationFaildException(S.S10276); 		}	}	@Override	public void receivedStarReward(int chapterId, int percent) {		PrizeSender s = PrizeSenderFactory.getPrizeSender();		CopyTemplet temp = CopyTempletConfig.get(chapterId);		Player p = user.getPlayer();		if(percent == Reward.TYPE.PERCENT_30) {			s.send(p, temp.getAward1());		} else if(percent == Reward.TYPE.PERCENT_60) {			s.send(p, temp.getAward2());		} else {			s.send(p, temp.getAward3());		}		markReceived(chapterId, percent);	}}