package cn.mxz.handler;public interface FighterService extends cn.mxz.util.Service{	/**	 * 获得指定战士	 *	 * @param id 战士唯一ID（注意不是配置表里面的ID，　是后端发过来的战士唯一ID(数据库唯一标识)）	 * @return 战士数据	 */	cn.mxz.protocols.user.god.FighterP.FighterPro getFighter(int id);	/**	 * 如果欲获得所有战士列表, get(0, 1000000)即可 指定一个战士的下标位置, 和获取的数量, 获得某段战士列表, 比如现在玩家总共有 [A B C D E F G] 7个战士, 依次排列 则: get(0, 0) 返回 [ ] get(0, 3) 返回 [A B C ] get(5, 2) 返回 [ F G] get(6, 20) 返回 [ G] get(0, 100000) 返回 [A B C D E F G] 该方法即获得所有战士 get(1, 123323) 返回 [ B C D E F G]	 *	 * @param index 战士列表的开始索引	 * @param count 截取战士数量	 * @return 获得某段战士列表	 */	cn.mxz.protocols.user.god.FighterP.FightersPro get(int index, int count);	/**	 * 如果欲获得所有魂魄列表, getSpirites(0, 1000000)即可 指定一个魂魄的下标位置, 和获取的数量, 获得某段魂魄列表, 比如现在玩家总共有 [A B C D E F G] 7个魂魄, 依次排列 则: get(0, 0) 返回 [ ] get(0, 3) 返回 [A B C ] get(5, 2) 返回 [ F G] get(6, 20) 返回 [ G] get(0, 100000) 返回 [A B C D E F G] 该方法即获得所有魂魄 get(1, 123323) 返回 [ B C D E F G]	 *	 * @param index 魂魄列表的开始索引	 * @param count 截取魂魄数量	 * @return 获得某段魂魄列表	 */	cn.mxz.protocols.user.god.FighterP.SpiritesPro getSpirites(int index, int count);	/**	 * 招募	 *	 * @param recruitType 招募方式	 * @return null	 */	cn.mxz.protocols.user.god.FighterP.RecruitResaultPro recruit(int recruitType);	/**	 * 用聚魂值招募	 *	 * @param type 招募方式	 * @return 招得的魂魄ID	 */	int recruitByJuHun(int type);	/**	 * 升星	 *	 * @param typeId 战士ID	 * 	 */	void levelUpSpirite(int typeId);	/**	 * 可装备的技能列表 如果欲获得所有技能列表, getSkillReadys(100001, 0, 1000000)即可 指定一个技能的下标位置, 和获取的数量, 获得某段可装备的技能列表, 比如现在玩家总共有 [A B C D E F G] 7个技能, 依次排列 则: get(0, 0) 返回 [ ] get(0, 3) 返回 [A B C ] get(5, 2) 返回 [ F G] get(6, 20) 返回 [ G] get(0, 100000) 返回 [A B C D E F G] 该方法即获得所有技能 get(1, 123323) 返回 [ B C D E F G]	 *	 * @param indexStart 技能起始索引	 * @param count 获取可装备技能的数量	 * @return null	 */	cn.mxz.protocols.user.god.FighterP.FighterSkillsPro getSkillReadys(int indexStart, int count);	/**	 * 更换技能	 *	 * @param fighterId 战士ID	 * @param oldId 旧技能ID	 * @param newId 新技能ID	 * 	 */	void changeSkill(int fighterId, int oldId, int newId);	/**	 * 卸下技能	 *	 * @param fighterId 战士ID	 * @param skillId 技能ID	 * 	 */	void takeOffSkill(int fighterId, int skillId);	/**	 * 在空格子上面增加一个技能	 *	 * @param fighterTypeId 战士ID	 * @param skillId 技能ID	 * 	 */	void addSkill(int fighterTypeId, int skillId);	/**	 * 升级技能	 *	 * @param skillId 技能ID	 * @param stuffSkills 被消耗的技能ID列表 用逗号分隔	 * @return 升级后的技能	 */	cn.mxz.protocols.user.god.FighterP.FighterSkillPro levelUpSkill(int skillId, String stuffSkills);	/**	 * 获得仙市界面数据	 *	 * @return 	 */	cn.mxz.protocols.user.god.FighterP.XianShiPro getXianShiData();	/**	 * 兑换一个战士	 *	 * @param typeId 战士ID	 * @return 招得的战士	 */	cn.mxz.protocols.user.god.FighterP.FighterPro exchange(int typeId);	/**	 * 获得指定战士 升星后的属性	 *	 * @param id 战士唯一ID（注意不是配置表里面的ID，　是后端发过来的战士唯一ID(数据库唯一标识)）	 * @return 战士数据 升星后的属性	 */	cn.mxz.protocols.user.god.FighterP.FighterPro getFighterAfterLevelUp(int id);	/**	 * 如果欲获得所有战士列表, get(0, 1000000)即可 指定一个战士的下标位置, 和获取的数量, 获得某段战士列表, 比如现在玩家总共有 [A B C D E F G] 7个战士, 依次排列 则: get(0, 0) 返回 [ ] get(0, 3) 返回 [A B C ] get(5, 2) 返回 [ F G] get(6, 20) 返回 [ G] get(0, 100000) 返回 [A B C D E F G] 该方法即获得所有战士 get(1, 123323) 返回 [ B C D E F G]	 *	 * @param userId 用户ID	 * @param index 战士列表的开始索引	 * @param count 截取战士数量	 * @return 获得某段战士列表	 */	cn.mxz.protocols.user.god.FighterP.FightersPro getOtherFighter(String userId, int index, int count);	/**	 * 逗号分隔 的战士列表	 *	 * @param ids 逗号分隔的战士ID列表	 * @return 战士数据	 */	cn.mxz.protocols.user.god.FighterP.FightersPro getFighters(String ids);	/**	 * 通知服务器 点击了伙伴按钮	 *	 * 	 */	void openFighter();	/**	 * 指定魂魄的数量	 *	 * @param typeId 魂魄ID	 * @return 数量	 */	int getSpiriteCount(int typeId);	/**	 * 十次寻仙	 *	 * @param recruitType 招募方式	 * @return null	 */	cn.mxz.protocols.user.god.FighterP.RecruitResaultsPro recruitTenTimes(int recruitType);	/**	 * 指定魂魄的数量	 *	 * @param typeId 魂魄ID	 * @return 魂魄ID,数量	 */	String getSpiriteCount2(int typeId);}