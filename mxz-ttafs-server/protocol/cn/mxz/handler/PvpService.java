package cn.mxz.handler;public interface PvpService extends cn.mxz.util.Service{	/**	 * 获得我的PVP信息	 *	 * @return 获得我自己的PVP信息	 */	cn.mxz.protocols.pvp.PvpP.PvpScenePro getMyData();	/**	 * 获得我的PVP信息	 *	 * @param userId 别人的帐号	 * @return 获得我自己的PVP信息	 */	cn.mxz.protocols.pvp.PvpP.PvpScenePro getOther(String userId);	/**	 * 随机3个人出来给我打	 *	 * @return 随机3个人的信息	 */	cn.mxz.protocols.pvp.PvpP.PvpUsersPro getRandomUser();	/**	 * 第几页	 *	 * @param page 起始排行	 * @param count 截取数量 ( 范围 0 - 30, 如果超过这个值, 就报错. 假设getNearest(1, 30) 而总人数只有15人的时候, 程序不会报错, 并会返回15个人的数据 )	 * @return 我附近的所有玩家的PVP信息	 */	cn.mxz.protocols.pvp.PvpP.PvpUsersPro getTops(int page, int count);	/**	 * Pvp奖励信息	 *	 * @return Pvp奖励信息	 */	cn.mxz.protocols.pvp.PvpP.PvpRewardPro getReward();	/**	 * 领取Pvp奖励	 *	 * @param rewardType 奖励类型	 * 	 */	void receiveReward(int rewardType);	/**	 * 购买挑战机会(1个机会=5次)	 *	 * @param count 购买机会数量	 * @return 现在有多少次	 */	int buyTimes(int count);	/**	 * 获取最近战报信息	 *	 * @param page 页码(1 - x)	 * @param count 每页数量	 * @return null	 */	cn.mxz.protocols.pvp.PvpP.WarSituationsPro getWarsituations(int page, int count);	/**	 * 膜拜	 *	 * 	 */	void kowtow();	/**	 * 挑战某人	 *	 * @param userId 别人的ID	 * @return 挑战结果信息	 */	cn.mxz.protocols.pvp.PvpP.PvpWarsituationPro fighting(String userId);	/**	 * 获得我所在的页面的信息	 *	 * @param pageCount 每页记录数量	 * @return 获得我所在的页面的信息	 */	cn.mxz.protocols.pvp.PvpP.PvpUsersPro getUsersNearMe(int pageCount);	/**	 * 第几页	 *	 * @param page 起始排行	 * @param count 截取数量 ( 范围 0 - 30, 如果超过这个值, 就报错. 假设getNearest(1, 30) 而总人数只有15人的时候, 程序不会报错, 并会返回15个人的数据 )	 * @return 我附近的所有玩家的PVP信息	 */	cn.mxz.protocols.pvp.PvpP.PvpUsersPro getTops2(int page, int count);	/**	 * 领取任务奖励	 *	 * @param taskId 任务ID	 * 	 */	void recieveReward(int taskId);	/**	 * 获取PVP任务奖励信息	 *	 * @return PVP任务奖励信息	 */	cn.mxz.protocols.pvp.PvpP.TaskRewardsPro getTaskReward();	/**	 * 领取奖励	 *	 * 	 */	void recieveRankReward();	/**	 * 购买挑战机会(1个机会=5次)	 *	 * @return 现在有多少次	 */	int buyFuWen();	/**	 * 购买挑战机会(1个机会=5次)	 *	 * @return 现在有多少次	 */	int useFuWen();	/**	 * Pvp夺宝战报	 *	 * @param situationId 战况信息ID	 * @return 	 */	cn.mxz.protocols.user.battle.WarSituationP.WarSituationPro getWarSituation(int situationId);	/**	 * 今日前十名, 这个排名明日00:00才会更新	 *	 * @return >今日前十名, 这个排名明日00:00才会更新	 */	cn.mxz.protocols.pvp.PvpP.PvpUsersPro getTopsToday();	/**	 * 获取最近战报信息	 *	 * @param page 页码(1 - x)	 * @param count 每页数量	 * @return null	 */	cn.mxz.protocols.pvp.PvpP.WarSituationsPro getWarsituationsCs(int page, int count);	/**	 * 领取当前的段位奖励	 *	 * 	 */	void receiveDanReward();	/**	 * 领取奖励	 *	 * @return ...	 */	cn.mxz.protocols.pvp.PvpP.PvpScenePro recieveRankReward2();	/**	 * 领取当前的段位奖励	 *	 * @return ...	 */	cn.mxz.protocols.pvp.PvpP.PvpScenePro receiveDanReward2();	/**	 * 竞技场奖励	 *	 * @return ...	 */	cn.mxz.protocols.pvp.PvpP.PvpRewardStatusPro getRewardStatus();	/**	 * 清空刷新冷却时间	 *	 * 	 */	void clearRefreshCd();	/**	 * 随机3个人出来给我打	 *	 * @param isRefresh 是否刷新这3个人	 * @return 随机3个人的信息	 */	cn.mxz.protocols.pvp.PvpP.PvpRandomResultPro getRandomUser2(Boolean isRefresh);}