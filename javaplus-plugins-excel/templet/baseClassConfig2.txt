package PACKAGE_NAME;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.dom4j.Attribute;

public class CLASS_NAMEConfig {

	private static Map<KEY_TYPE, CLASS_NAME> map;
	private static List<KEY_TYPE> keys;
	private static List<CLASS_NAME> all;


	static {
		load();
		all = new ArrayList<CLASS_NAME>();

		for(KEY_TYPE c : keys) {
			all.add(get(c));
		}
	}

	public static List<CLASS_NAME> getAll() {
		return all;
	}

	public static List<KEY_TYPE> getKeys() {
		return keys;
	}

	private static final String fileName = "res/properties/CLASS_BASE_NAMEConfig.xml";

	@SuppressWarnings("unchecked")
	public static void load() {

		map = new HashMap<KEY_TYPE, CLASS_NAME>();
		keys = new ArrayList<KEY_TYPE>();

		try {
			synchronized (map) {
				File inputXml = new File(fileName);
				SAXReader saxReader = new SAXReader();
					Document document = saxReader.read(inputXml);
					Element employees = document.getRootElement();
					for (Iterator<Element> i = employees.elementIterator(); i.hasNext();) {
						Element e = i.next();

						try {
							put(e);
						} catch (RuntimeException e1) {
							List<Attribute> all = e.attributes();

							StringBuilder sb = new StringBuilder();

							for (Attribute o : all) {
								sb.append("[" + o.getStringValue() + "]");
							}

							System.err.println("Error:" + fileName + "......" + sb);
							throw e1;
						}

					}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		keys.addAll(map.keySet());

		Collections.sort(keys);
	}

	private static void put(Element e) {
		CLASS_NAME x = new CLASS_NAME();
PARSE_SETS
		map.put(x.getKEY_NAME(), x);
	}

	public static CLASS_NAME get(KEY_TYPE x) {
		synchronized (map) {
			return map.get(x);
		}
	}

	/**
	 * 最大主键值
	 */
	public static KEY_TYPE getMaxKey() {
		return keys.get(keys.size() - 1);
	}

	/**
	 * 最小主键值
	 */
	public static KEY_TYPE getMinKey() {
		return keys.get(0);
	}

FINDERS

GETARRAYS

GETLISTS
}