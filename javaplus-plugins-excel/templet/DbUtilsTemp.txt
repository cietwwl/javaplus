package PACKAGE_NAME.utils;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.concurrent.atomic.AtomicLong;

public class DbUtils {

	private static Connection conn;
	
	private static String serverId;
	
	public static void changeTo(String path, String uname, String pass) {
		try {

			if(path == null) {
				return;
			}
			
			Class.forName("com.mysql.jdbc.Driver");
			conn= DriverManager.getConnection(path,uname,pass);
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static AtomicLong init(String sql) {

		AtomicLong atomicLong = null;

		PreparedStatement pst = null;

		ResultSet rs = null;

		pst = getPst(sql);
		
		try {

			rs = pst.executeQuery();

			if (rs != null && rs.next()) {
				atomicLong = new AtomicLong(rs.getLong("ids"));
			} else {
				atomicLong = new AtomicLong(0);
			}
			
		} catch (SQLException e) {
			
		} finally {
			free(pst, rs);
		}
		return atomicLong;
	}

	private static long calcIdStart(String sId) {
		Long serverId = Long.parseLong(sId);
		serverId %= 20;
		serverId = serverId % 4 * 5 + serverId / 4 * 1;
		return serverId * 10000000 + 1;
	}

	private DbUtils(){
		
	}

	public static PreparedStatement getPst ( String sql ) {
		try {
			return conn.prepareStatement( sql );
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	public static void free(Statement stm, ResultSet rs) {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			if (stm != null)
				stm.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String getServerId() {
		return serverId;
	}

	public static void setServerId(String serverId) {
		DbUtils.serverId = serverId;
	}
}
