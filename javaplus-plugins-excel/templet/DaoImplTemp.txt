package PACKAGE_NAME.dao.impl;
 
import java.util.List; 
import java.util.ArrayList;
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException; 
import PACKAGE_NAME.dao.DAOTAIL; 
import PACKAGE_NAME.domain.CLASS_NAME;
import dbutils.DbUtils;
import java.util.concurrent.atomic.AtomicLong;

public class CLASS_NAMEDAOImpl implements DAOTAIL<KEYS CLASS_NAME> {

	private static AtomicLong idMax = null;
	
	static {
		String sql = "select max(KEY_COLUMN_NAME) as ids from TABLE_NAME";
		idMax = DbUtils.init(sql);
	}
	
	@Override
	public void add(CLASS_NAME CLASS_PARAMETER) {
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String sql = "insert into TABLE_NAME (COLUMN_NAMES) "
					+ "values (COLUMN_?S)";
			ps = DbUtils.getPst(sql);
			PS_SETS_ADD
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
	}
		
	@Override
	public void addAll(List<CLASS_NAME> CLASS_PARAMETERs) {
		
		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			String sql = "insert into TABLE_NAME (COLUMN_NAMES) "
					+ "values (COLUMN_?S)";
			ps = DbUtils.getPst(sql);
			
			for (CLASS_NAME CLASS_PARAMETER : CLASS_PARAMETERs) {
				PS_SETS_ADD
				ps.addBatch();
			}
			
			ps.executeBatch();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
	}
	
	@Override
	public void delete(PK_PARAMETER) { 
		ResultSet rs = null; 
		PreparedStatement ps = null; 
		try { 
			String sql = "delete from TABLE_NAME where PKCOLUMNS_S";
			ps = DbUtils.getPst(sql);
			PK_PS_SETS
			ps.executeUpdate(); 
 		} catch (SQLException e) {
			e.printStackTrace(); 
		} finally { 
			DbUtils.free(ps, rs); 
		} 
	} 

	@Override
	public void update(CLASS_NAME CLASS_PARAMETER) {
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String sql = "update TABLE_NAME set COLUMN_PARAMETERS where PKCOLUMNS_S";
			ps = DbUtils.getPst(sql);
			PS_SETS_UPDATE
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
	}
		
	@Override
	public CLASS_NAME get(PK_PARAMETER) {
		PreparedStatement ps = null;
		ResultSet rs = null;
		CLASS_NAME CLASS_PARAMETER = null;
		try {
			String sql = "select * from TABLE_NAME where PK_COLUMNS";
			ps = DbUtils.getPst(sql);
			PK_PS_SETS
			rs = ps.executeQuery();
			while (rs.next()) {
			CLASS_PARAMETER = mapping(rs);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
		return CLASS_PARAMETER;
	}
		
	@Override
	public List<CLASS_NAME> getAll(int pageNo, int pageSize) {
		PreparedStatement ps = null;
		ResultSet rs = null;
		List<CLASS_NAME> CLASS_PARAMETERs = new ArrayList<CLASS_NAME>();
		try {
			String sql = "select * from TABLE_NAME limit ?, ?";
			ps = DbUtils.getPst(sql);
			PAGE_SETS
			rs = ps.executeQuery();
			while (rs.next()) {
				CLASS_NAME CLASS_PARAMETER = new CLASS_NAME();
				CLASS_PARAMETER = mapping(rs);
				CLASS_PARAMETERs.add(CLASS_PARAMETER);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
		return CLASS_PARAMETERs;
	}
	
	@Override
	public List<CLASS_NAME> getAll() {
		PreparedStatement ps = null;
		ResultSet rs = null;
		List<CLASS_NAME> CLASS_PARAMETERs = new ArrayList<CLASS_NAME>();
		try {
			String sql = "select * from TABLE_NAME";
			ps = DbUtils.getPst(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				CLASS_NAME CLASS_PARAMETER = new CLASS_NAME();
				CLASS_PARAMETER = mapping(rs);
				CLASS_PARAMETERs.add(CLASS_PARAMETER);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
		return CLASS_PARAMETERs;
	}
	
	@Override
	public int getCount() { 
		PreparedStatement ps = null; 
 		ResultSet rs = null;
		int count = 0; 
 		try { 
			String sql = "select count(*) from TABLE_NAME"; 
			ps = DbUtils.getPst(sql);
			rs = ps.executeQuery(); 
			while (rs.next()) { 
				count =  rs.getInt(1); 
			} 
		} catch (SQLException e) { 
 			e.printStackTrace();
		} finally { 
 			DbUtils.free(ps, rs);
		} 
 		return count; 
 	} 
 
	private CLASS_NAME mapping(ResultSet rs) throws SQLException {
		CLASS_NAME CLASS_PARAMETER = new CLASS_NAME();
		RS_GETS
		return CLASS_PARAMETER;
	}
	
	@Override
	public int nextId() {
		return (int) idMax.addAndGet(1);
	}

	@Override
	public List<CLASS_NAME> findBy(String field, String o){
		PreparedStatement ps = null;
		ResultSet rs = null;
		List<CLASS_NAME> ls = new ArrayList<CLASS_NAME>();
		try {
			String sql = "select * from TABLE_NAME where " + field + " = ?";
			ps = DbUtils.getPst(sql);
			ps.setString(1, o);
			
			rs = ps.executeQuery();
			while (rs.next()) {
				ls.add(mapping(rs));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
		return ls;
	}
	
	@Override
	public List<CLASS_NAME> get(int from, int count) {
		PreparedStatement ps = null;
		ResultSet rs = null;
		List<CLASS_NAME> wsos = new ArrayList<CLASS_NAME>();
		try {
			String sql = "select * from TABLE_NAME limit ?, ?";
			ps = DbUtils.getPst(sql);
			ps.setInt(1, from);
			ps.setInt(2, count);
			rs = ps.executeQuery();
			while (rs.next()) {
				CLASS_NAME wso = new CLASS_NAME();
				wso = mapping(rs);
				wsos.add(wso);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.free(ps, rs);
		}
		return wsos;
	}

	@Override
	public CLASS_NAME createDTO() {
		return new CLASS_NAME();
	}
}
